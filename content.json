{"meta":{"title":"Joker's Blog","subtitle":"个人分享博客","description":"分享生活、技术、学习心得","author":"Joker","url":"https://meandni.com"},"pages":[{"title":"About","date":"2018-08-14T06:25:14.000Z","updated":"2018-08-14T06:26:37.000Z","comments":true,"path":"about/index.html","permalink":"https://meandni.com/about/index.html","excerpt":"","text":"个人分享博客介绍页面"},{"title":"","date":"2018-08-14T06:24:40.000Z","updated":"2018-08-14T06:24:40.000Z","comments":true,"path":"categories/index.html","permalink":"https://meandni.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-08-14T06:22:53.000Z","updated":"2018-08-14T06:22:53.000Z","comments":true,"path":"tags/index.html","permalink":"https://meandni.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-08-18T04:00:17.000Z","updated":"2018-08-18T04:00:15.000Z","comments":true,"path":"images/Tutorial_ Intro to React – React.html","permalink":"https://meandni.com/images/Tutorial_ Intro to React – React.html","excerpt":"","text":".gatsby-highlight{background:#282c34;color:#ffffff;border-radius:10px;overflow:auto;tab-size:1.5em;-moz-tab-size:1.5em;} .gatsby-highlight > code[class*=\"gatsby-code-\"], .gatsby-highlight > pre[class*=\"gatsby-code-\"], .gatsby-highlight > pre.prism-code{height:auto !important;margin:1rem;font-size:14px;line-height:20px;white-space:pre-wrap;word-break:break-word;}.gatsby-highlight + .gatsby-highlight{margin-top:20px;}.gatsby-highlight-code-line{background-color:#14161a;display:block;margin:-0.125rem calc(-1rem - 15px);padding:0.125rem calc(1rem + 15px);}.token.attr-name{color:#c5a5c5;} .token.comment, .token.block-comment, .token.prolog, .token.doctype, .token.cdata{color:#999999;} .token.property, .token.number, .token.function-name, .token.constant, .token.symbol, .token.deleted{color:#5a9bcf;}.token.boolean{color:#ff8b50;}.token.tag{color:#fc929e;}.token.string{color:#8dc891;}.token.punctuation{color:#5FB3B3;} .token.selector, .token.char, .token.builtin, .token.inserted{color:#D8DEE9;}.token.function{color:#79b6f2;} .token.operator, .token.entity, .token.url, .token.variable{color:#d7deea;}.token.attr-value{color:#8dc891;}.token.keyword{color:#c5a5c5;} .token.atrule, .token.class-name{color:#FAC863;}.token.important{font-weight:400;}.token.bold{font-weight:700;}.token.italic{font-style:italic;}.token.entity{cursor:help;}.namespace{opacity:0.7;}html { font-family: sans-serif; /* 1 */ line-height: 1.15; /* 2 */ -ms-text-size-adjust: 100%; /* 3 */ -webkit-text-size-adjust: 100%; /* 3 */ }body { margin: 0; }article, aside, footer, header, nav, section { display: block; }h1 { font-size: 2em; margin: 0.67em 0; }figcaption, figure, main { /* 1 */ display: block; }figure { margin: 1em 40px; }hr { box-sizing: content-box; /* 1 */ height: 0; /* 1 */ overflow: visible; /* 2 */ }pre { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ }a { background-color: transparent; /* 1 */ -webkit-text-decoration-skip: objects; /* 2 */ }a:active, a:hover { outline-width: 0; }abbr[title] { border-bottom: none; /* 1 */ text-decoration: underline; /* 2 */ text-decoration: underline dotted; /* 2 */ }b, strong { font-weight: inherit; }b, strong { font-weight: bolder; }code, kbd, samp { font-family: monospace, monospace; /* 1 */ font-size: 1em; /* 2 */ }dfn { font-style: italic; }mark { background-color: #ff0; color: #000; }small { font-size: 80%; }sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }sub { bottom: -0.25em; }sup { top: -0.5em; }audio, video { display: inline-block; }audio:not([controls]) { display: none; height: 0; }img { border-style: none; }svg:not(:root) { overflow: hidden; }button, input, optgroup, select, textarea { font-family: sans-serif; /* 1 */ font-size: 100%; /* 1 */ line-height: 1.15; /* 1 */ margin: 0; /* 2 */ }button, input { /* 1 */ overflow: visible; }button, select { /* 1 */ text-transform: none; }button, html [type=\"button\"], /* 1 */ [type=\"reset\"], [type=\"submit\"] { -webkit-appearance: button; /* 2 */ }button::-moz-focus-inner, [type=\"button\"]::-moz-focus-inner, [type=\"reset\"]::-moz-focus-inner, [type=\"submit\"]::-moz-focus-inner { border-style: none; padding: 0; }button:-moz-focusring, [type=\"button\"]:-moz-focusring, [type=\"reset\"]:-moz-focusring, [type=\"submit\"]:-moz-focusring { outline: 1px dotted ButtonText; }fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }legend { box-sizing: border-box; /* 1 */ color: inherit; /* 2 */ display: table; /* 1 */ max-width: 100%; /* 1 */ padding: 0; /* 3 */ white-space: normal; /* 1 */ }progress { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ }textarea { overflow: auto; }[type=\"checkbox\"], [type=\"radio\"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ }[type=\"number\"]::-webkit-inner-spin-button, [type=\"number\"]::-webkit-outer-spin-button { height: auto; }[type=\"search\"] { -webkit-appearance: textfield; /* 1 */ outline-offset: -2px; /* 2 */ }[type=\"search\"]::-webkit-search-cancel-button, [type=\"search\"]::-webkit-search-decoration { -webkit-appearance: none; }::-webkit-file-upload-button { -webkit-appearance: button; /* 1 */ font: inherit; /* 2 */ }details, /* 1 */ menu { display: block; }summary { display: list-item; }canvas { display: inline-block; }template { display: none; }[hidden] { display: none; }.css-1tv5sxm,[data-css-1tv5sxm]{flex:1 0 auto;margin-top:60px;-webkit-flex:1 0 auto;}@media (min-width: 780px) and (max-width: 1279px){.css-1tv5sxm,[data-css-1tv5sxm]{margin-top:50px;}}@media (max-width: 779px){.css-1tv5sxm,[data-css-1tv5sxm]{margin-top:40px;}}.css-190hivd,[data-css-190hivd]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;min-height:calc(100vh - 40px);-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;}.css-184keb2,[data-css-184keb2]{color:inherit;margin-left:10px;font-weight:700;font-size:20px;line-height:20px;}@media (max-width: 979px){.css-184keb2,[data-css-184keb2]{font-size:16px;margin-top:1px;}}@media (max-width: 599px){.css-184keb2,[data-css-184keb2]{position:absolute;overflow:hidden;clip:rect(0 0 0 0);height:1px;width:1px;margin:-1px;padding:0;border:0;}}.css-4ivotw,[data-css-4ivotw]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;margin-right:10px;height:100%;align-items:center;color:#61dafb;-webkit-box-align:center;-webkit-align-items:center;}.css-4ivotw:focus,[data-css-4ivotw]:focus{outline:0;color:#ffffff;}@media (min-width: 600px){.css-4ivotw,[data-css-4ivotw]{width:calc(100% / 6);}}@media (max-width: 599px){.css-4ivotw,[data-css-4ivotw]{flex:0 0 auto;-webkit-flex:0 0 auto;}}.css-17o7gw8,[data-css-17o7gw8]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;align-items:stretch;overflow-x:auto;overflow-y:hidden;-webkit-overflow-scrolling:touch;height:100%;width:60%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:stretch;-webkit-align-items:stretch;}@media (min-width: 0px) and (max-width: 599px){.css-17o7gw8,[data-css-17o7gw8]{flex-grow:1;width:auto;-webkit-flex-grow:1;}}@media (max-width: 599px){.css-17o7gw8,[data-css-17o7gw8]{mask-image:-webkit-linear-gradient(to right, transparent, black 20px, black 90%, transparent); mask-image: -moz-linear-gradient(to right, transparent, black 20px, black 90%, transparent); mask-image: linear-gradient(to right, transparent, black 20px, black 90%, transparent);-webkit-mask-image:-webkit-linear-gradient(to right, transparent, black 20px, black 90%, transparent); -webkit-mask-image: -moz-linear-gradient(to right, transparent, black 20px, black 90%, transparent); -webkit-mask-image: linear-gradient(to right, transparent, black 20px, black 90%, transparent);}}.css-1v42y44,[data-css-1v42y44]{padding:5px 10px;white-space:nowrap;font-size:14px;}.css-1v42y44:hover,[data-css-1v42y44]:hover{color:#61dafb;}.css-1v42y44:focus,[data-css-1v42y44]:focus{outline:0;background-color:#373940;border-radius:15px;}.css-14nlkyt,[data-css-14nlkyt]{padding:5px 10px;margin-left:10px;white-space:nowrap;font-size:14px;}.css-14nlkyt:hover,[data-css-14nlkyt]:hover{color:#61dafb;}.css-14nlkyt:focus,[data-css-14nlkyt]:focus{outline:0;background-color:#373940;border-radius:15px;}@media (max-width: 779px){.css-dkzafi,[data-css-dkzafi]{display:none;}}@media (min-width: 980px){.css-dkzafi,[data-css-dkzafi]{width:calc(100% / 6);}}.css-iiezwn,[data-css-iiezwn]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;align-items:center;height:60px;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;}@media (min-width: 600px) and (max-width: 1279px){.css-iiezwn,[data-css-iiezwn]{height:50px;}}@media (max-width: 599px){.css-iiezwn,[data-css-iiezwn]{height:40px;}}.css-mlkfzr,[data-css-mlkfzr]{background-color:#20232a;color:#ffffff;position:fixed;z-index:1;width:100%;top:0;left:0;}.css-tctv7l,[data-css-tctv7l]{padding-left:20px;padding-right:20px;margin-left:auto;margin-right:auto;}@media (min-width: 780px){.css-tctv7l,[data-css-tctv7l]{width:90%;}}@media (min-width: 1340px){.css-tctv7l,[data-css-tctv7l]{max-width:1260px;}}.css-hobwqm,[data-css-hobwqm]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;align-items:center;color:#ffffff;transition:color 0.2s ease-out;padding-left:15px;padding-right:15px;font-weight:300;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;-webkit-transition:color 0.2s ease-out;-moz-transition:color 0.2s ease-out;}.css-hobwqm:focus,[data-css-hobwqm]:focus{outline:0;background-color:#373940;color:#ffffff;}@media (min-width: 0px) and (max-width: 599px){.css-hobwqm,[data-css-hobwqm]{padding-left:8px;padding-right:8px;}}@media (min-width: 600px) and (max-width: 979px){.css-hobwqm,[data-css-hobwqm]{padding-left:10px;padding-right:10px;}}@media (min-width: 1280px){.css-hobwqm,[data-css-hobwqm]{padding-left:20px;padding-right:20px;font-size:18px;}.css-hobwqm:hover:not(:focus),[data-css-hobwqm]:hover:not(:focus){color:#61dafb;}}.css-1wo8d34,[data-css-1wo8d34]{appearance:none;background:transparent;border:0;color:#ffffff;font-size:18px;font-weight:300;font-family:inherit;position:relative;padding:5px 5px 5px 29px;background-image:url(/search.svg);background-size:16px 16px;background-repeat:no-repeat;background-position-y:center;background-position-x:5px;-webkit-appearance:none;-moz-appearance:none;}.css-1wo8d34:focus,[data-css-1wo8d34]:focus{outline:0;background-color:#373940;border-radius:0.25rem;}@media (max-width: 979px){.css-1wo8d34,[data-css-1wo8d34]{font-size:16px;}}@media (min-width: 600px){.css-1wo8d34,[data-css-1wo8d34]{width:100%;}}@media (max-width: 599px){.css-1wo8d34,[data-css-1wo8d34]{width:16px;transition:width 0.2s ease, padding 0.2s ease;padding-left:16px;-webkit-transition:width 0.2s ease, padding 0.2s ease;-moz-transition:width 0.2s ease, padding 0.2s ease;}.css-1wo8d34:focus,[data-css-1wo8d34]:focus{padding-left:29px;width:8rem;outline:none;}}.css-3n5uzf,[data-css-3n5uzf]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex:0 0 auto;flex-direction:row;align-items:center;padding-left:0.5rem;padding-right:0.5rem;-webkit-flex:0 0 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;}@media (max-width: 599px){.css-3n5uzf,[data-css-3n5uzf]{justify-content:flex-end;-webkit-box-pack:end;-webkit-justify-content:flex-end;}}@media (max-width: 979px){.css-3n5uzf,[data-css-3n5uzf]{margin-right:10px;}}@media (min-width: 600px) and (max-width: 979px){.css-3n5uzf,[data-css-3n5uzf]{width:calc(100% / 3);}}@media (min-width: 780px) and (max-width: 1339px){.css-3n5uzf,[data-css-3n5uzf]{width:calc(100% / 6);}}@media (min-width: 600px){.css-3n5uzf,[data-css-3n5uzf]{min-width:120px;}}.css-19vhmgv,[data-css-19vhmgv]{margin-left:5px;vertical-align:-2px;color:#6d6d6d;}.css-15lkjjo,[data-css-15lkjjo]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;flex-grow:1;flex-shrink:0;flex-basis:auto;justify-content:stretch;align-items:flex-start;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-webkit-flex-grow:1;-webkit-flex-shrink:0;-webkit-flex-basis:auto;-webkit-box-pack:stretch;-webkit-justify-content:stretch;-webkit-box-align:start;-webkit-align-items:flex-start;}.css-1q9mcvr,[data-css-1q9mcvr]{flex-wrap:wrap;display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;-webkit-box-lines:multiple;-webkit-flex-wrap:wrap;}@media (max-width: 979px){.css-1q9mcvr,[data-css-1q9mcvr]{width:100%;}}@media (min-width: 1280px){.css-1q9mcvr,[data-css-1q9mcvr]{width:calc(100% / 3 * 2);padding-left:40px;}}.css-1izr7si,[data-css-1izr7si]{max-width:160px;height:auto;}.css-1yy5aal,[data-css-1yy5aal]{color:#999;padding-top:15px;}.css-smm72f,[data-css-smm72f]{background-color:#20232a;color:#ffffff;padding-top:10px;padding-bottom:50px;}@media (min-width: 2000px){.css-smm72f,[data-css-smm72f]{padding-top:40px;}}.css-1m3wp4q,[data-css-1m3wp4q]{display:-webkit-inline-box; display: -moz-inline-box; display: -ms-inline-flexbox; display: -webkit-inline-flex; display: inline-flex;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;}.css-12bsqfj,[data-css-12bsqfj]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;align-items:flex-start;width:50%;padding-top:40px;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-webkit-box-align:start;-webkit-align-items:flex-start;}@media (min-width: 2000px){.css-12bsqfj,[data-css-12bsqfj]{padding-top:0;width:25%;}}.css-109jn6d,[data-css-109jn6d]{color:#999;font-size:14px;font-weight:700;line-height:3;text-transform:uppercase;letter-spacing:0.08em;}.css-8l81zy,[data-css-8l81zy]{line-height:2;}.css-8l81zy:hover,[data-css-8l81zy]:hover{color:#61dafb;}.css-83uoqv,[data-css-83uoqv]{vertical-align:-2px;display:inline-block;margin-left:5px;color:#6d6d6d;}@media (min-width: 600px){.css-2y24fj,[data-css-2y24fj]{position:absolute;bottom:-1px;height:4px;background:#61dafb;left:0;right:0;z-index:1;}}.css-li68ai,[data-css-li68ai]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;align-items:center;color:#61dafb;transition:color 0.2s ease-out;padding-left:15px;padding-right:15px;font-weight:300;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;-webkit-transition:color 0.2s ease-out;-moz-transition:color 0.2s ease-out;}.css-li68ai:focus,[data-css-li68ai]:focus{outline:0;background-color:#373940;color:#ffffff;}@media (min-width: 0px) and (max-width: 599px){.css-li68ai,[data-css-li68ai]{padding-left:8px;padding-right:8px;}}@media (min-width: 600px) and (max-width: 979px){.css-li68ai,[data-css-li68ai]{padding-left:10px;padding-right:10px;}}@media (min-width: 1280px){.css-li68ai,[data-css-li68ai]{padding-left:20px;padding-right:20px;font-size:18px;}.css-li68ai:hover:not(:focus),[data-css-li68ai]:hover:not(:focus){color:#61dafb;}}@media (min-width: 600px){.css-li68ai,[data-css-li68ai]{position:relative;}}.css-51kfyg,[data-css-51kfyg]{line-height:25px;}.css-51kfyg .gatsby-highlight,[data-css-51kfyg] .gatsby-highlight{margin-top:25px;margin-left:-30px;margin-right:-30px;margin-bottom:25px;padding-left:15px;padding-right:15px;}.css-51kfyg a:not(.anchor):not(.gatsby-resp-image-link),[data-css-51kfyg] a:not(.anchor):not(.gatsby-resp-image-link){background-color:rgba(187,239,253,0.3);border-bottom:1px solid rgba(0,0,0,0.2);color:#1a1a1a;}.css-51kfyg a:not(.anchor):not(.gatsby-resp-image-link):hover,[data-css-51kfyg] a:not(.anchor):not(.gatsby-resp-image-link):hover{background-color:#bbeffd;border-bottom-color:#1a1a1a;}.css-51kfyg > p:first-child,[data-css-51kfyg] > p:first-child{font-size:18px;font-weight:300;color:#6d6d6d;}.css-51kfyg > p:first-child a,[data-css-51kfyg] > p:first-child a, .css-51kfyg > p:first-child strong, [data-css-51kfyg] > p:first-child strong{font-weight:400;}.css-51kfyg p,[data-css-51kfyg] p{margin-top:30px;font-size:17px;line-height:1.7;max-width:42em;}.css-51kfyg p:first-of-type,[data-css-51kfyg] p:first-of-type{margin-top:15px;}.css-51kfyg p:first-child,[data-css-51kfyg] p:first-child{margin-top:0;}.css-51kfyg h3 + p,[data-css-51kfyg] h3 + p, .css-51kfyg h3 + p:first-of-type, [data-css-51kfyg] h3 + p:first-of-type{margin-top:20px;}.css-51kfyg p > code,[data-css-51kfyg] p > code, .css-51kfyg li > code, [data-css-51kfyg] li > code{background:rgba(255,229,100,0.2);color:#1a1a1a;}.css-51kfyg p > code,[data-css-51kfyg] p > code, .css-51kfyg li > code, [data-css-51kfyg] li > code, .css-51kfyg p > a > code, [data-css-51kfyg] p > a > code, .css-51kfyg li > a > code, [data-css-51kfyg] li > a > code{padding:0 3px;font-size:16px;word-break:break-word;}.css-51kfyg hr,[data-css-51kfyg] hr{height:1px;margin-bottom:-1px;border:none;border-bottom:1px solid #ececec;margin-top:40px;}.css-51kfyg hr:first-child,[data-css-51kfyg] hr:first-child{margin-top:0;}.css-51kfyg h1,[data-css-51kfyg] h1{line-height:1.2;}.css-51kfyg h2,[data-css-51kfyg] h2{border-top:1px solid #ececec;margin-top:44px;padding-top:40px;line-height:1.2;}.css-51kfyg h2:first-child,[data-css-51kfyg] h2:first-child{border-top:0;margin-top:0;padding-top:0;}.css-51kfyg hr + h2,[data-css-51kfyg] hr + h2{border-top:0;margin-top:0;}.css-51kfyg h3,[data-css-51kfyg] h3{padding-top:45px;}.css-51kfyg h2 + h3,[data-css-51kfyg] h2 + h3, .css-51kfyg h2 + h3:first-of-type, [data-css-51kfyg] h2 + h3:first-of-type{padding-top:30px;}.css-51kfyg h4,[data-css-51kfyg] h4{font-size:20px;color:#6d6d6d;line-height:1.3;margin-top:50px;font-weight:400;}.css-51kfyg h4 + p,[data-css-51kfyg] h4 + p{margin-top:20px;}.css-51kfyg ol,[data-css-51kfyg] ol, .css-51kfyg ul, [data-css-51kfyg] ul{margin-top:20px;font-size:16px;color:#1a1a1a;padding-left:20px;}.css-51kfyg ol p,[data-css-51kfyg] ol p, .css-51kfyg ul p, [data-css-51kfyg] ul p, .css-51kfyg ol p:first-of-type, [data-css-51kfyg] ol p:first-of-type, .css-51kfyg ul p:first-of-type, [data-css-51kfyg] ul p:first-of-type{font-size:16px;margin-top:0;line-height:1.2;}.css-51kfyg ol li,[data-css-51kfyg] ol li, .css-51kfyg ul li, [data-css-51kfyg] ul li{margin-top:10px;}.css-51kfyg ol li.button-newapp,[data-css-51kfyg] ol li.button-newapp, .css-51kfyg ul li.button-newapp, [data-css-51kfyg] ul li.button-newapp{margin-top:0;}.css-51kfyg ol ol,[data-css-51kfyg] ol ol, .css-51kfyg ul ol, [data-css-51kfyg] ul ol, .css-51kfyg ol ul, [data-css-51kfyg] ol ul, .css-51kfyg ul ul, [data-css-51kfyg] ul ul{margin-left:20px;margin-top:10px;}.css-51kfyg img,[data-css-51kfyg] img{max-width:100%;}.css-51kfyg ol,[data-css-51kfyg] ol{list-style:decimal;}.css-51kfyg ul,[data-css-51kfyg] ul{list-style:disc;}.css-51kfyg blockquote,[data-css-51kfyg] blockquote{background-color:rgba(255,229,100,0.3);border-left-color:#ffe564;border-left-width:9px;border-left-style:solid;padding:20px 45px 20px 26px;margin-bottom:30px;margin-top:20px;margin-left:-30px;margin-right:-30px;}.css-51kfyg blockquote p,[data-css-51kfyg] blockquote p{margin-top:15px;}.css-51kfyg blockquote p:first-of-type,[data-css-51kfyg] blockquote p:first-of-type{font-weight:700;margin-top:0;}.css-51kfyg blockquote p:nth-of-type(2),[data-css-51kfyg] blockquote p:nth-of-type(2){margin-top:0;}.css-51kfyg .gatsby-highlight + blockquote,[data-css-51kfyg] .gatsby-highlight + blockquote{margin-top:40px;}@media (max-width: 599px){.css-51kfyg .gatsby-highlight,[data-css-51kfyg] .gatsby-highlight{margin-left:-20px;margin-right:-20px;border-radius:0;}.css-51kfyg h3,[data-css-51kfyg] h3{word-break:break-all;}.css-51kfyg blockquote,[data-css-51kfyg] blockquote{margin-left:-20px;margin-right:-20px;}}@media (min-width: 1280px){.css-51kfyg > p:first-child,[data-css-51kfyg] > p:first-child{font-size:24px;}.css-51kfyg h1,[data-css-51kfyg] h1{font-size:60px;}.css-51kfyg h2,[data-css-51kfyg] h2{font-size:35px;}.css-51kfyg h3,[data-css-51kfyg] h3{font-size:25px;line-height:1.3;}}@media (max-width: 979px){.css-51kfyg p,[data-css-51kfyg] p{font-size:16px;margin-top:25px;}.css-51kfyg h2,[data-css-51kfyg] h2{font-size:20px;}}@media (min-width: 0px) and (max-width: 599px){.css-51kfyg h1,[data-css-51kfyg] h1{font-size:30px;}}@media (min-width: 600px) and (max-width: 1279px){.css-51kfyg h1,[data-css-51kfyg] h1{font-size:45px;}}.css-124oy3v,[data-css-124oy3v]{margin-top:40px;margin-bottom:120px;}@media (min-width: 780px){.css-124oy3v,[data-css-124oy3v]{margin-top:50px;}}.css-1kbu8hg,[data-css-1kbu8hg]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;}@media (min-width: 600px){.css-1kbu8hg,[data-css-1kbu8hg]{border-left:1px solid #ececec;margin-left:80px;}}@media (min-width: 600px) and (max-width: 1339px){.css-1kbu8hg,[data-css-1kbu8hg]{flex:0 0 200px;margin-left:80px;-webkit-flex:0 0 200px;}}@media (min-width: 600px) and (max-width: 979px){.css-1kbu8hg,[data-css-1kbu8hg]{margin-left:40px;}}@media (min-width: 1100px){.css-1kbu8hg,[data-css-1kbu8hg]{flex:0 0 300px;-webkit-flex:0 0 300px;}}@media (min-width: 2000px){.css-1kbu8hg,[data-css-1kbu8hg]{position:fixed;right:0;width:300px;z-index:2;}}.css-j4q8zh,[data-css-j4q8zh]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;min-height:calc(100vh - 60px);}@media (min-width: 2000px){.css-j4q8zh,[data-css-j4q8zh]{max-width:840px;margin-left:auto;margin-right:auto;}}.css-12vsfho,[data-css-12vsfho]{flex:1 0 auto;-webkit-flex:1 0 auto;}.css-5v0gxc,[data-css-5v0gxc]{width:100%;flex:1 0 auto;position:relative;z-index:0;-webkit-flex:1 0 auto;}.css-95xunl,[data-css-95xunl]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;flex-grow:1;flex-shrink:0;flex-basis:auto;justify-content:flex-start;align-items:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-webkit-flex-grow:1;-webkit-flex-shrink:0;-webkit-flex-basis:auto;-webkit-box-pack:start;-webkit-justify-content:flex-start;-webkit-box-align:stretch;-webkit-align-items:stretch;}.css-174qq1k,[data-css-174qq1k]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;flex-grow:1;flex-shrink:1;flex-basis:auto;justify-content:flex-start;align-items:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-webkit-flex-grow:1;-webkit-flex-shrink:1;-webkit-flex-basis:auto;-webkit-box-pack:start;-webkit-justify-content:flex-start;-webkit-box-align:stretch;-webkit-align-items:stretch;}.css-1a9m1x6,[data-css-1a9m1x6]{color:#282c34;margin-bottom:0;margin-top:40px;font-size:60px;line-height:65px;font-weight:700;}@media (max-width: 779px){.css-1a9m1x6,[data-css-1a9m1x6]{font-size:40px;line-height:45px;}}@media (min-width: 780px) and (max-width: 979px){.css-1a9m1x6,[data-css-1a9m1x6]{margin-top:60px;}}@media (min-width: 980px){.css-1a9m1x6,[data-css-1a9m1x6]{margin-top:80px;}}.css-hgc6lu,[data-css-hgc6lu]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;flex-grow:0;flex-shrink:1;flex-basis:auto;justify-content:space-between;align-items:baseline;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-flex-grow:0;-webkit-flex-shrink:1;-webkit-flex-basis:auto;-webkit-box-pack:justify;-webkit-justify-content:space-between;-webkit-box-align:baseline;-webkit-align-items:baseline;}.css-p72dfi,[data-css-p72dfi]{margin-top:60px;}@media (min-width: 0px) and (max-width: 599px){.css-p72dfi,[data-css-p72dfi]{margin-top:40px;}}@media (min-width: 600px) and (max-width: 979px){.css-p72dfi,[data-css-p72dfi]{margin-top:0;}}@media (min-width: 780px) and (max-width: 1279px){.css-p72dfi,[data-css-p72dfi]{margin-top:50px;}}@media (min-width: 600px){.css-p72dfi,[data-css-p72dfi]{transform:none !important;-webkit-transform:none !important;}}@media (max-width: 599px){.css-3ao3zf,[data-css-3ao3zf]{top:0;left:0;bottom:0;right:0;position:fixed;background-color:#ffffff;z-index:2;height:100vh;overflow-y:auto;-webkit-overflow-scrolling:touch;pointer-events:none;}}@media (min-width: 780px){.css-3ao3zf,[data-css-3ao3zf]{margin-right:-999px;padding-right:999px;background-color:#f7f7f7;}}@media (min-width: 780px) and (max-width: 1999px){.css-3ao3zf,[data-css-3ao3zf]{position:fixed;z-index:2;height:100%;}}@media (min-width: 600px){.css-3ao3zf,[data-css-3ao3zf]{position:fixed;z-index:2;height:calc(100vh - 60px);overflow-y:auto;-webkit-overflow-scrolling:touch;margin-right:-999px;padding-right:999px;background-color:#f7f7f7;opacity:1 !important;}}@media (min-width: 600px) and (max-width: 779px){.css-3ao3zf,[data-css-3ao3zf]{height:calc(100vh - 40px);}}@media (min-width: 780px) and (max-width: 1279px){.css-3ao3zf,[data-css-3ao3zf]{height:calc(100vh - 50px);}}@media (min-width: 2000px){.css-3ao3zf,[data-css-3ao3zf]{border-left:1px solid #ececec;}}.css-1dgtft4,[data-css-1dgtft4]{width:20px;height:20px;align-self:center;display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;color:#61dafb;-webkit-align-self:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;}.css-7ef8f8,[data-css-7ef8f8]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;align-items:center;height:60px;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-align:center;-webkit-align-items:center;}@media (min-width: 780px) and (max-width: 1279px){.css-7ef8f8,[data-css-7ef8f8]{height:50px;}}@media (max-width: 599px){.css-7ef8f8,[data-css-7ef8f8]{height:60px;overflow:hidden;align-items:flex-start;-webkit-box-align:start;-webkit-align-items:flex-start;}}.css-yx40kw,[data-css-yx40kw]{background-color:#20232a;bottom:44px;color:#61dafb;display:none;cursor:pointer;position:fixed;right:20px;z-index:3;border-radius:50%;border:1px solid rgba(255, 255, 255, 0.1);box-shadow:0 0 20px rgba(0, 0, 0, 0.3);}@media (max-width: 599px){.css-yx40kw,[data-css-yx40kw]{display:inline-block;}}.css-7stz2q,[data-css-7stz2q]{width:100%;padding-left:20px;position:relative;}@media (min-width: 1100px){.css-7stz2q,[data-css-7stz2q]{padding-left:40px;}}@media (max-width: 599px){.css-7stz2q,[data-css-7stz2q]{padding-bottom:100px;}}.css-1aai96l,[data-css-1aai96l]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:column;flex-grow:0;flex-shrink:1;flex-basis:auto;justify-content:flex-start;align-items:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-webkit-flex-grow:0;-webkit-flex-shrink:1;-webkit-flex-basis:auto;-webkit-box-pack:start;-webkit-justify-content:flex-start;-webkit-box-align:stretch;-webkit-align-items:stretch;}.css-1j8jxus,[data-css-1j8jxus]{cursor:pointer;background-color:transparent;border:0;margin-top:10px;}.css-19pur11,[data-css-19pur11]{color:#1a1a1a;display:inline-block;border-bottom:1px solid transparent;transition:border 0.2s ease;margin-top:5px;-webkit-transition:border 0.2s ease;-moz-transition:border 0.2s ease;}.css-19pur11:hover,[data-css-19pur11]:hover{color:#6d6d6d;}.css-atv6j6,[data-css-atv6j6]{margin-top:5px;}.css-axv6fp,[data-css-axv6fp]{margin-bottom:10px;}@media (min-width: 600px){.css-axv6fp,[data-css-axv6fp]{display:block;}}.css-cqdcva,[data-css-cqdcva]{color:#6d6d6d;font-size:14px;font-weight:700;line-height:3;text-transform:uppercase;letter-spacing:0.08em;}@media (min-width: 600px){.css-cqdcva,[data-css-cqdcva]{color:#1a1a1a;}.css-cqdcva:hover,[data-css-cqdcva]:hover{color:#1a1a1a;}}.css-1mwek35,[data-css-1mwek35]{margin-left:7px;transform:rotateX(180deg);transition:-webkit-transform 0.2s ease,transform 0.2s ease;-webkit-transform:rotateX(180deg);-webkit-transition:-webkit-transform 0.2s ease,transform 0.2s ease;-moz-transition:transform 0.2s ease;}@media (max-width: 599px){.css-1mwek35,[data-css-1mwek35]{display:none;}}.css-sg9l1i,[data-css-sg9l1i]{transform:translate(2px, -4px) rotate(180deg);transition:-webkit-transform 0.2s ease,transform 0.2s ease;-webkit-transform:translate(2px, -4px) rotate(180deg);-webkit-transition:-webkit-transform 0.2s ease,transform 0.2s ease;-moz-transition:transform 0.2s ease;}.css-o1zbu3,[data-css-o1zbu3]{transform:translate(2px, 4px);transition:-webkit-transform 0.2s ease,transform 0.2s ease;-webkit-transform:translate(2px, 4px);-webkit-transition:-webkit-transform 0.2s ease,transform 0.2s ease;-moz-transition:transform 0.2s ease;}.css-1ac8j74,[data-css-1ac8j74]{padding-top:40px;display:block !important;}@media (min-width: 1280px){.css-1ac8j74,[data-css-1ac8j74]{width:calc(100% / 3);order:-1;-webkit-order:-1;}}@media (min-width: 980px){.css-1ac8j74,[data-css-1ac8j74]{order:-1;-webkit-order:-1;}}@media (max-width: 979px){.css-1ac8j74,[data-css-1ac8j74]{text-align:center;width:100%;padding-top:40px;}}.css-ftk3jl,[data-css-ftk3jl]{display:-webkit-box; display: -moz-box; display: -ms-flexbox; display: -webkit-flex; display: flex;flex-direction:row;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-webkit-box-lines:multiple;-webkit-flex-wrap:wrap;}@media (min-width: 600px) and (max-width: 979px){.css-ftk3jl,[data-css-ftk3jl]{padding-right:240px;}}@media (min-width: 980px) and (max-width: 1339px){.css-ftk3jl,[data-css-ftk3jl]{padding-right:280px;}}@media (min-width: 1100px) and (max-width: 1999px){.css-ftk3jl,[data-css-ftk3jl]{padding-right:380px;}}.css-140tz9x,[data-css-140tz9x]{margin-left:20px;} // .anchor { float: left; padding-right: 4px; margin-left: -20px; } h1 .anchor svg, h2 .anchor svg, h3 .anchor svg, h4 .anchor svg, h5 .anchor svg, h6 .anchor svg { visibility: hidden; } h1:hover .anchor svg, h2:hover .anchor svg, h3:hover .anchor svg, h4:hover .anchor svg, h5:hover .anchor svg, h6:hover .anchor svg, h1 .anchor:focus svg, h2 .anchor:focus svg, h3 .anchor:focus svg, h4 .anchor:focus svg, h5 .anchor:focus svg, h6 .anchor:focus svg { visibility: visible; } document.addEventListener(\"DOMContentLoaded\", function(event) { var hash = window.decodeURI(location.hash.replace('#', '')) if (hash !== '') { var element = document.getElementById(hash) if (element) { var offset = element.offsetTop // Wait for the browser to finish rendering before scrolling. setTimeout((function() { window.scrollTo(0, offset - 0) }), 0) } } }) Tutorial: Intro to React – Reacthtml{box-sizing:border-box;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-weight:400;font-style:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}body{overflow-x:hidden;position:relative}*{margin:0;padding:0}*,:after,:before{box-sizing:inherit}a{color:inherit;text-decoration:none}ol,ul{list-style:none}img{display:inline-block;vertical-align:top}code,pre{font-family:source-code-pro,Menlo,Monaco,Consolas,Courier New,monospace}.searchbox{display:inline-block;position:relative;width:200px;height:32px!important;white-space:nowrap;box-sizing:border-box;visibility:visible!important}.searchbox .algolia-autocomplete{display:block;width:100%;height:100%}.searchbox__wrapper{width:100%;height:100%;z-index:999;position:relative}.searchbox__input{display:inline-block;box-sizing:border-box;transition:box-shadow .4s ease,background .4s ease;border:0;border-radius:16px;box-shadow:inset 0 0 0 1px #ccc;background:#fff!important;padding:0;padding-right:26px;padding-left:32px;width:100%;height:100%;vertical-align:middle;white-space:normal;font-size:12px;-webkit-appearance:none;-moz-appearance:none;appearance:none}.searchbox__input::-webkit-search-cancel-button,.searchbox__input::-webkit-search-decoration,.searchbox__input::-webkit-search-results-button,.searchbox__input::-webkit-search-results-decoration{display:none}.searchbox__input:hover{box-shadow:inset 0 0 0 1px #b3b3b3}.searchbox__input:active,.searchbox__input:focus{outline:0;box-shadow:inset 0 0 0 1px #aaa;background:#fff}.searchbox__input::-webkit-input-placeholder{color:#aaa}.searchbox__input:-ms-input-placeholder{color:#aaa}.searchbox__input::placeholder{color:#aaa}.searchbox__submit{position:absolute;top:0;margin:0;border:0;border-radius:16px 0 0 16px;background-color:rgba(69,142,225,0);padding:0;width:32px;height:100%;vertical-align:middle;text-align:center;font-size:inherit;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;right:inherit;left:0}.searchbox__submit:before{display:inline-block;margin-right:-4px;height:100%;vertical-align:middle;content:\"\"}.searchbox__submit:active,.searchbox__submit:hover{cursor:pointer}.searchbox__submit:focus{outline:0}.searchbox__submit svg{width:14px;height:14px;vertical-align:middle;fill:#6d7e96}.searchbox__reset{display:block;position:absolute;top:8px;right:8px;margin:0;border:0;background:none;cursor:pointer;padding:0;font-size:inherit;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;fill:rgba(0,0,0,.5)}.searchbox__reset.hide{display:none}.searchbox__reset:focus{outline:0}.searchbox__reset svg{display:block;margin:4px;width:8px;height:8px}.searchbox__input:valid~.searchbox__reset{display:block;animation-name:sbx-reset-in;animation-duration:.15s}@keyframes sbx-reset-in{0%{transform:translate3d(-20%,0,0);opacity:0}to{transform:none;opacity:1}}.algolia-autocomplete .ds-dropdown-menu:before{display:block;position:absolute;content:\"\";width:14px;height:14px;background:#373940;z-index:1000;top:-7px;border-top:1px solid #373940;border-right:1px solid #373940;-ms-transform:rotate(-45deg);transform:rotate(-45deg);border-radius:2px}.algolia-autocomplete .ds-dropdown-menu{box-shadow:0 1px 0 0 rgba(0,0,0,.2),0 2px 3px 0 rgba(0,0,0,.1)}@media (min-width:601px){.algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu{right:0!important;left:inherit!important}.algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu:before{right:48px}.algolia-autocomplete .ds-dropdown-menu{top:-6px;border-radius:4px;margin:6px 0 0;padding:0;text-align:left;height:auto;position:relative;background:transparent;border:none;z-index:999;max-width:600px;min-width:500px}}@media (max-width:600px){.algolia-autocomplete .ds-dropdown-menu{z-index:100;position:fixed!important;top:40px!important;left:auto!important;right:1rem!important;width:600px;max-width:calc(100% - 2rem);max-height:calc(100% - 5rem);display:block}.algolia-autocomplete .ds-dropdown-menu:before{right:96px;right:6rem}}.algolia-autocomplete .ds-dropdown-menu .ds-suggestions{position:relative;z-index:1000}.algolia-autocomplete .ds-dropdown-menu .ds-suggestion{cursor:pointer}.algolia-autocomplete .ds-dropdown-menu [class^=ds-dataset-]{position:relative;border-radius:4px;overflow:auto;padding:0}.algolia-autocomplete .ds-dropdown-menu *{box-sizing:border-box}.algolia-autocomplete .algolia-docsearch-suggestion{position:relative;padding:0;overflow:hidden}.algolia-autocomplete .ds-cursor .algolia-docsearch-suggestion--wrapper{background:#f1f1f1;box-shadow:inset -2px 0 0 #61dafb}.algolia-autocomplete .algolia-docsearch-suggestion--highlight{background:#ffe564;padding:.1em .05em}.algolia-autocomplete .algolia-docsearch-suggestion--category-header .algolia-docsearch-suggestion--category-header-lvl0 .algolia-docsearch-suggestion--highlight,.algolia-autocomplete .algolia-docsearch-suggestion--category-header .algolia-docsearch-suggestion--category-header-lvl1 .algolia-docsearch-suggestion--highlight{color:inherit;background:inherit}.algolia-autocomplete .algolia-docsearch-suggestion--text .algolia-docsearch-suggestion--highlight{padding:0 0 1px;background:inherit;box-shadow:inset 0 -2px 0 0 rgba(69,142,225,.8);color:inherit}.algolia-autocomplete .algolia-docsearch-suggestion--content{display:block;float:right;width:70%;position:relative;padding:5.33333px 0 5.33333px 10.66667px;cursor:pointer}.algolia-autocomplete .algolia-docsearch-suggestion--content:before{content:\"\";position:absolute;display:block;top:0;height:100%;width:1px;background:#ececec;left:-1px}.algolia-autocomplete .algolia-docsearch-suggestion--category-header{position:relative;display:none;font-size:14px;letter-spacing:.08em;font-weight:700;background-color:#373940;text-transform:uppercase;color:#fff;margin:0;padding:5px 8px}.algolia-autocomplete .algolia-docsearch-suggestion--wrapper{background-color:#fff;width:100%;float:left;padding:8px 0 0}.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column{float:left;width:30%;display:none;padding-left:0;text-align:right;position:relative;padding:5.33333px 10.66667px;color:#777;font-size:.9em;word-wrap:break-word}.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column:before{content:\"\";position:absolute;display:block;top:0;height:100%;width:1px;background:#ececec;right:0}.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column .algolia-docsearch-suggestion--highlight{background-color:inherit;color:inherit}.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-inline{display:none}.algolia-autocomplete .algolia-docsearch-suggestion--title{margin-bottom:4px;color:#02060c;font-size:.9em;font-weight:700}.algolia-autocomplete .algolia-docsearch-suggestion--text{display:block;line-height:1.2em;font-size:.85em;color:#63676d;padding-right:2px}.algolia-autocomplete .algolia-docsearch-suggestion--no-results{width:100%;padding:8px 0;text-align:center;font-size:1.2em;background-color:#373940;margin-top:-8px}.algolia-autocomplete .algolia-docsearch-suggestion--no-results .algolia-docsearch-suggestion--text{color:#fff;margin-top:4px}.algolia-autocomplete .algolia-docsearch-suggestion--no-results:before{display:none}.algolia-autocomplete .algolia-docsearch-suggestion code{padding:1px 5px;font-size:90%;border:none;color:#222;background-color:#ebebeb;border-radius:3px;font-family:source-code-pro,Menlo,Monaco,Consolas,Courier New,monospace}.algolia-autocomplete .algolia-docsearch-suggestion code .algolia-docsearch-suggestion--highlight{background:none}.algolia-autocomplete .algolia-docsearch-suggestion.algolia-docsearch-suggestion__main .algolia-docsearch-suggestion--category-header,.algolia-autocomplete .algolia-docsearch-suggestion.algolia-docsearch-suggestion__secondary .algolia-docsearch-suggestion--subcategory-column{display:block}.algolia-autocomplete .algolia-docsearch-footer{background-color:#fff;width:100%;height:30px;z-index:2000;float:right;font-size:0;line-height:0}.algolia-autocomplete .algolia-docsearch-footer--logo{background-image:url('data:image/svg+xml;utf8,');background-repeat:no-repeat;background-position:50%;background-size:100%;overflow:hidden;text-indent:-9000px;width:110px;height:100%;display:block;margin-left:auto;margin-right:5px} #nprogress { pointer-events: none; } #nprogress .bar { background: #61dafb; position: fixed; z-index: 1031; top: 0; left: 0; width: 100%; height: 2px; } #nprogress .peg { display: block; position: absolute; right: 0px; width: 100px; height: 100%; box-shadow: 0 0 10px #61dafb, 0 0 5px #61dafb; opacity: 1.0; -webkit-transform: rotate(3deg) translate(0px, -4px); -ms-transform: rotate(3deg) translate(0px, -4px); transform: rotate(3deg) translate(0px, -4px); } #nprogress .spinner { display: block; position: fixed; z-index: 1031; top: 15px; right: 15px; } #nprogress .spinner-icon { width: 18px; height: 18px; box-sizing: border-box; border: solid 2px transparent; border-top-color: #61dafb; border-left-color: #61dafb; border-radius: 50%; -webkit-animation: nprogress-spinner 400ms linear infinite; animation: nprogress-spinner 400ms linear infinite; } .nprogress-custom-parent { overflow: hidden; position: relative; } .nprogress-custom-parent #nprogress .spinner, .nprogress-custom-parent #nprogress .bar { position: absolute; } @-webkit-keyframes nprogress-spinner { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); } } @keyframes nprogress-spinner { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } ReactDocsTutorialCommunityBlogv16.4.2GitHubTutorial: Intro to ReactThis tutorial doesn’t assume any existing React knowledge. Before We Start the Tutorial We will build a small game during this tutorial. You might be tempted to skip it because you’re not building games — but give it a chance. The techniques you’ll learn in the tutorial are fundamental to building any React apps, and mastering it will give you a deep understanding of React. Tip This tutorial is designed for people who prefer to learn by doing. If you prefer learning concepts from the ground up, check out our step-by-step guide. You might find this tutorial and the guide complementary to each other. The tutorial is divided into several sections: Setup for the Tutorial will give you a starting point to follow the tutorial. Overview will teach you the fundamentals of React: components, props, and state. Completing the Game will teach you the most common techniques in React development. Adding Time Travel will give you a deeper insight into the unique strengths of React. You don’t have to complete all of the sections at once to get the value out of this tutorial. Try to get as far as you can — even if it’s one or two sections. It’s fine to copy and paste code as you’re following along the tutorial, but we recommend to type it by hand. This will help you develop a muscle memory and a stronger understanding. What Are We Building? In this tutorial, we’ll show how to build an interactive tic-tac-toe game with React. You can see what we’ll be building here: Final Result. If the code doesn’t make sense to you, or if you are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand React and its syntax. We recommend that you check out the tic-tac-toe game before continuing with the tutorial. One of the features that you’ll notice is that there is a numbered list to the right of the game’s board. This list gives you a history of all of the moves that have occurred in the game, and is updated as the game progresses. You can close the tic-tac-toe game once you’re familiar with it. We’ll be starting from a simpler template in this tutorial. Our next step is to set you up so that you can start building the game. Prerequisites We’ll assume that you have some familiarity with HTML and JavaScript, but you should be able to follow along even if you’re coming from a different programming language. We’ll also assume that you’re familiar with programming concepts like functions, objects, arrays, and to a lesser extent, classes. If you need to review JavaScript, we recommend reading this guide. Note that we’re also using some features from ES6 — a recent version of JavaScript. In this tutorial, we’re using arrow functions, classes, let, and const statements. You can use the Babel REPL to check what ES6 code compiles to. Setup for the Tutorial There are two ways to complete this tutorial: you can either write the code in your browser, or you can set up a local development environment on your computer. Setup Option 1: Write Code in the Browser This is the quickest way to get started! First, open this Starter Code in a new tab. The new tab should display an empty tic-tac-toe game board and React code. We will be editing the React code in this tutorial. You can now skip the second setup option, and go to the Overview section to get an overview of React. Setup Option 2: Local Development Environment This is completely optional and not required for this tutorial! Optional: Instructions for following along locally using your preferred text editor This setup requires more work but allows you to complete the tutorial using an editor of your choice. Here are the steps to follow: Make sure you have a recent version of Node.js installed. Follow the installation instructions for Create React App to make a new project. npm install -g create-react-app create-react-app my-app Delete all files in the src/ folder of the new project (don’t delete the folder, just its contents). cd my-app rm -f src/* Add a file named index.css in the src/ folder with this CSS code. Add a file named index.js in the src/ folder with this JS code. Add these three lines to the top of index.js in the src/ folder: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; Now if you run npm start in the project folder and open http://localhost:3000 in the browser, you should see an empty tic-tac-toe field. We recommend following these instructions to configure syntax highlighting for your editor. Help, I’m Stuck! If you get stuck, check out the community support resources. In particular, Reactiflux Chat is a great way to get help quickly. If you don’t receive an answer, or if you remain stuck, please file an issue, and we’ll help you out. Overview Now that you’re set up, let’s get an overview of React! What Is React? React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”. React has a few different kinds of components, but we’ll start with React.Component subclasses: class ShoppingList extends React.Component { render() { return ( &lt;div className=\"shopping-list\"&gt; &lt;h1&gt;Shopping List for {this.props.name}&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Instagram&lt;/li&gt; &lt;li&gt;WhatsApp&lt;/li&gt; &lt;li&gt;Oculus&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); } } // Example usage: &lt;ShoppingList name=\"Mark\" /&gt; We’ll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components. Here, ShoppingList is a React component class, or React component type. A component takes in parameters, called props (short for “properties”), and returns a hierarchy of views to display via the render method. The render method returns a description of what you want to see on the screen. React takes the description and displays the result. In particular, render returns a React element, which is a lightweight description of what to render. Most React developers use a special syntax called “JSX” which makes these structures easier to write. The &lt;div /&gt; syntax is transformed at build time to React.createElement('div'). The example above is equivalent to: return React.createElement('div', {className: 'shopping-list'}, React.createElement('h1', /* ... h1 children ... */), React.createElement('ul', /* ... ul children ... */) ); See full expanded version. If you’re curious, createElement() is described in more detail in the API reference, but we won’t be using it in this tutorial. Instead, we will keep using JSX. JSX comes with the full power of JavaScript. You can put any JavaScript expressions within braces inside JSX. Each React element is a JavaScript object that you can store in a variable or pass around in your program. The ShoppingList component above only renders built-in DOM components like &lt;div /&gt; and &lt;li /&gt;. But you can compose and render custom React components too. For example, we can now refer to the whole shopping list by writing &lt;ShoppingList /&gt;. Each React component is encapsulated and can operate independently; this allows you to build complex UIs from simple components. Inspecting the Starter Code If you’re going to work on the tutorial in your browser, open this code in a new tab: Starter Code. If you’re going to work on the tutorial locally, instead open src/index.js in your project folder (you have already touched this file during the setup). This Starter Code is the base of what we’re building. We’ve provided the CSS styling so that you only need focus on learning React and programming the tic-tac-toe game. By inspecting the code, you’ll notice that we have three React components: Square Board Game The Square component renders a single &lt;button&gt; and the Board renders 9 squares. The Game component renders a board with placeholder values which we’ll modify later. There are currently no interactive components. Passing Data Through Props Just to get our feet wet, let’s try passing some data from our Board component to our Square component. In Board’s renderSquare method, change the code to pass a prop called value to the Square: class Board extends React.Component { renderSquare(i) { return &lt;Square value={i} /&gt;; } Change Square’s render method to show that value by replacing {/* TODO */} with {this.props.value}: class Square extends React.Component { render() { return ( &lt;button className=\"square\"&gt; {this.props.value} &lt;/button&gt; ); } } Before: After: You should see a number in each square in the rendered output. View the full code at this point Congratulations! You’ve just “passed a prop” from a parent Board component to a child Square component. Passing props is how information flows in React apps, from parents to children. Making an Interactive Component Let’s fill the Square component with an “X” when we click it. First, change the button tag that is returned from the Square component’s render() function to this: class Square extends React.Component { render() { return ( &lt;button className=\"square\" onClick={function() { alert('click'); }}&gt; {this.props.value} &lt;/button&gt; ); } } If we click on a Square now, we should get an alert in our browser. Note To save typing and avoid the confusing behavior of this, we will use the arrow function syntax for event handlers here and further below: class Square extends React.Component { render() { return ( &lt;button className=\"square\" onClick={() =&gt; alert('click')}&gt; {this.props.value} &lt;/button&gt; ); } } Notice how with onClick={() =&gt; alert('click')}, we’re passing a function as the onClick prop. It only fires after a click. Forgetting () =&gt; and writing onClick={alert('click')} is a common mistake, and would fire the alert every time the component re-renders. As a next step, we want the Square component to “remember” that it got clicked, and fill it with an “X” mark. To “remember” things, components use state. React components can have state by setting this.state in their constructors. this.state should be considered as private to a React component that it’s defined in. Let’s store the current value of the Square in this.state, and change it when the Square is clicked. First, we’ll add a constructor to the class to initialize the state: class Square extends React.Component { constructor(props) { super(props); this.state = { value: null, }; } render() { return ( &lt;button className=\"square\" onClick={() =&gt; alert('click')}&gt; {this.props.value} &lt;/button&gt; ); } } Note In JavaScript classes, you need to always call super when defining the constructor of a subclass. All React component classes that have a constructor should start it with a super(props) call. Now we’ll change the Square’s render method to display the current state’s value when clicked: Replace this.props.value with this.state.value inside the &lt;button&gt; tag. Replace the () =&gt; alert() event handler with () =&gt; this.setState({value: 'X'}). Put the className and onClick props on separate lines for better readability. After these changes, the &lt;button&gt; tag that is returned by the Square’s render method looks like this: class Square extends React.Component { constructor(props) { super(props); this.state = { value: null, }; } render() { return ( &lt;button className=\"square\" onClick={() =&gt; this.setState({value: 'X'})} &gt; {this.state.value} &lt;/button&gt; ); } } By calling this.setState from an onClick handler in the Square’s render method, we tell React to re-render that Square whenever its &lt;button&gt; is clicked. After the update, the Square’s this.state.value will be 'X', so we’ll see the X on the game board. If you click on any Square, an X should show up. When you call setState in a component, React automatically updates the child components inside of it too. View the full code at this point Developer Tools The React Devtools extension for Chrome and Firefox lets you inspect a React component tree with your browser’s developer tools. The React DevTools let you check the props and the state of your React components. After installing React DevTools, you can right-click on any element on the page, click “Inspect” to open the developer tools, and the React tab will appear as the last tab to the right. However, note there are a few extra steps to get it working with CodePen: Log in or register and confirm your email (required to prevent spam). Click the “Fork” button. Click “Change View” and then choose “Debug mode”. In the new tab that opens, the devtools should now have a React tab. Completing the Game We now have the basic building blocks for our tic-tac-toe game. To have a complete game, we now need to alternate placing “X”s and “O”s on the board, and we need a way to determine a winner. Lifting State Up Currently, each Square component maintains the game’s state. To check for a winner, we’ll maintain the value of each of the 9 squares in one location. We may think that Board should just ask each Square for the Square’s state. Although this approach is possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game’s state in the parent Board component instead of in each Square. The Board component can tell each Square what to display by passing a prop, just like we did when we passed a number to each Square. To collect data from multiple children, or to have two child components communicate with each other, you need to declare the shared state in their parent component instead. The parent component can pass the state back down to the children by using props; this keeps the child components in sync with each other and with the parent component. Lifting state into a parent component is common when React components are refactored — let’s take this opportunity to try it out. We’ll add a constructor to the Board and set the Board’s initial state to contain an array with 9 nulls. These 9 nulls correspond to the 9 squares: class Board extends React.Component { constructor(props) { super(props); this.state = { squares: Array(9).fill(null), }; } renderSquare(i) { return &lt;Square value={i} /&gt;; } render() { const status = 'Next player: X'; return ( &lt;div&gt; &lt;div className=\"status\"&gt;{status}&lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)} &lt;/div&gt; &lt;/div&gt; ); } } When we fill the board in later, the board will look something like this: [ 'O', null, 'X', 'X', 'X', 'O', 'O', null, null, ] The Board’s renderSquare method currently looks like this: renderSquare(i) { return &lt;Square value={i} /&gt;; } In the beginning, we passed the value prop down from the Board to show numbers from 0 to 8 in every Square. In a different previous step, we replaced the numbers with an “X” mark determined by Square’s own state. This is why Square currently ignores the value prop passed to it by the Board. We will now use the prop passing mechanism again. We will modify the Board to instruct each individual Square about its current value ('X', 'O', or null). We have already defined the squares array in the Board’s constructor, and we will modify the Board’s renderSquare method to read from it: renderSquare(i) { return &lt;Square value={this.state.squares[i]} /&gt;; } View the full code at this point Each Square will now receive a value prop that will either be 'X', 'O', or null for empty squares. Next, we need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. We need to create a way for the Square to update the Board’s state. Since state is considered to be private to a component that defines it, we cannot update the Board’s state directly from Square. To maintain the Board’s state’s privacy, we’ll pass down a function from the Board to the Square. This function will get called when a Square is clicked. We’ll change the renderSquare method in Board to: renderSquare(i) { return ( &lt;Square value={this.state.squares[i]} onClick={() =&gt; this.handleClick(i)} /&gt; ); } Note We split the returned element into multiple lines for readability, and added parentheses so that JavaScript doesn’t insert a semicolon after return and break our code. Now we’re passing down two props from Board to Square: value and onClick. The onClick prop is a function that Square can call when clicked. We’ll make the following changes to Square: Replace this.state.value with this.props.value in Square’s render method Replace this.setState() with this.props.onClick() in Square’s render method Delete the constructor from Square because Square no longer keeps track of the game’s state After these changes, the Square component looks like this: class Square extends React.Component { render() { return ( &lt;button className=\"square\" onClick={() =&gt; this.props.onClick()} &gt; {this.props.value} &lt;/button&gt; ); } } When a Square is clicked, the onClick function provided by the Board is called. Here’s a review of how this is achieved: The onClick prop on the built-in DOM &lt;button&gt; component tells React to set up a click event listener. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method. This event handler calls this.props.onClick(). The Square’s onClick prop was specified by the Board. Since the Board passed onClick={() =&gt; this.handleClick(i)} to Square, the Square calls this.handleClick(i) when clicked. We have not defined the handleClick() method yet, so our code crashes. Note The DOM &lt;button&gt; element’s onClick attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. We could name the Square’s onClick prop or Board’s handleClick method differently. In React, however, it is a convention to use on[Event] names for props which represent events and handle[Event] for the methods which handle the events. When we try to click a Square, we should get an error because we haven’t defined handleClick yet. We’ll now add handleClick to the Board class: class Board extends React.Component { constructor(props) { super(props); this.state = { squares: Array(9).fill(null), }; } handleClick(i) { const squares = this.state.squares.slice(); squares[i] = 'X'; this.setState({squares: squares}); } renderSquare(i) { return ( &lt;Square value={this.state.squares[i]} onClick={() =&gt; this.handleClick(i)} /&gt; ); } render() { const status = 'Next player: X'; return ( &lt;div&gt; &lt;div className=\"status\"&gt;{status}&lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)} &lt;/div&gt; &lt;/div&gt; ); } } View the full code at this point After these changes, we’re again able to click on the Squares to fill them. However, now the state is stored in the Board component instead of the individual Square components. When the Board’s state changes, the Square components re-render automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future. Since the Square components no longer maintain state, the Square components receive values from the Board component and inform the Board component when they’re clicked. In React terms, the Square components are now controlled components. The Board has full control over them. Note how in handleClick, we call .slice() to create a copy of the squares array to modify instead of modifying the existing array. We will explain why we create a copy of the squares array in the next section. Why Immutability Is Important In the previous code example, we suggested that you use the .slice() operator to create a copy of the squares array to modify instead of modifying the existing array. We’ll now discuss immutability and why immutability is important to learn. There are generally two approaches to changing data. The first approach is to mutate the data by directly changing the data’s values. The second approach is to replace the data with a new copy which has the desired changes. Data Change with Mutation var player = {score: 1, name: 'Jeff'}; player.score = 2; // Now player is {score: 2, name: 'Jeff'} Data Change without Mutation var player = {score: 1, name: 'Jeff'}; var newPlayer = Object.assign({}, player, {score: 2}); // Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'} // Or if you are using object spread syntax proposal, you can write: // var newPlayer = {...player, score: 2}; The end result is the same but by not mutating (or changing the underlying data) directly, we gain several benefits described below. Complex Features Become Simple Immutability makes complex features much easier to implement. Later in this tutorial, we will implement a “time travel” feature that allows us to review the tic-tac-toe game’s history and “jump back” to previous moves. This functionality isn’t specific to games — an ability to undo and redo certain actions is a common requirement in applications. Avoiding direct data mutation lets us keep previous versions of the game’s history intact, and reuse them later. Detecting Changes Detecting changes in mutable objects is difficult because they are modified directly. This detection requires the mutable object to be compared to previous copies of itself and the entire object tree to be traversed. Detecting changes in immutable objects is considerably easier. If the immutable object that is being referenced is different than the previous one, then the object has changed. Determining When to Re-render in React The main benefit of immutability is that it helps you build pure components in React. Immutable data can easily determine if changes have been made which helps to determine when a component requires re-rendering. You can learn more about shouldComponentUpdate() and how you can build pure components by reading Optimizing Performance. Functional Components We’ll now change the Square to be a functional component. In React, functional components are a simpler way to write components that only contain a render method and don’t have their own state. Instead of defining a class which extends React.Component, we can write a function that takes props as input and returns what should be rendered. Functional components are less tedious to write than classes, and many components can be expressed this way. Replace the Square class with this function: function Square(props) { return ( &lt;button className=\"square\" onClick={props.onClick}&gt; {props.value} &lt;/button&gt; ); } We have changed this.props to props both times it appears. View the full code at this point Note When we modified the Square to be a functional component, we also changed onClick={() =&gt; this.props.onClick()} to a shorter onClick={props.onClick} (note the lack of parentheses on both sides). In a class, we used an arrow function to access the correct this value, but in a functional component we don’t need to worry about this. Taking Turns We now need to fix an obvious defect in our tic-tac-toe game: the “O”s cannot be marked on the board. We’ll set the the first move to be “X” by default. We can set this default by modifying the initial state in our Board constructor: class Board extends React.Component { constructor(props) { super(props); this.state = { squares: Array(9).fill(null), xIsNext: true, }; } Each time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game’s state will be saved. We’ll update the Board’s handleClick function to flip the value of xIsNext: handleClick(i) { const squares = this.state.squares.slice(); squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ squares: squares, xIsNext: !this.state.xIsNext, }); } With this change, “X”s and “O”s can take turns. Let’s also change the “status” text in Board’s render so that it displays which player has the next turn: render() { const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); return ( // the rest has not changed After applying these changes, you should have this Board component: class Board extends React.Component { constructor(props) { super(props); this.state = { squares: Array(9).fill(null), xIsNext: true, }; } handleClick(i) { const squares = this.state.squares.slice(); squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ squares: squares, xIsNext: !this.state.xIsNext, }); } renderSquare(i) { return ( &lt;Square value={this.state.squares[i]} onClick={() =&gt; this.handleClick(i)} /&gt; ); } render() { const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); return ( &lt;div&gt; &lt;div className=\"status\"&gt;{status}&lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)} &lt;/div&gt; &lt;/div&gt; ); } } View the full code at this point Declaring a Winner Now that we show which player’s turn is next, we should also show when the game is won and there are no more turns to make. We can determine a winner by adding this helper function to the end of the file: function calculateWinner(squares) { const lines = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], ]; for (let i = 0; i &lt; lines.length; i++) { const [a, b, c] = lines[i]; if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) { return squares[a]; } } return null; } We will call calculateWinner(squares) in the Board’s render function to check if a player has won. If a player has won, we can display text such as “Winner: X” or “Winner: O”. We’ll replace the status declaration in Board’s render function with this code: render() { const winner = calculateWinner(this.state.squares); let status; if (winner) { status = 'Winner: ' + winner; } else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); } return ( // the rest has not changed We can now change the Board’s handleClick function to return early by ignoring a click if someone has won the game or if a Square is already filled: handleClick(i) { const squares = this.state.squares.slice(); if (calculateWinner(squares) || squares[i]) { return; } squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ squares: squares, xIsNext: !this.state.xIsNext, }); } View the full code at this point Congratulations! You now have a working tic-tac-toe game. And you’ve just learned the basics of React too. So you’re probably the real winner here. Adding Time Travel As a final exercise, let’s make it possible to “go back in time” to the previous moves in the game. Storing a History of Moves If we mutated the squares array, implementing time travel would be very difficult. However, we used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow us to store every past version of the squares array, and navigate between the turns that have already happened. We’ll store the past squares arrays in another array called history. The history array represents all board states, from the first to the last move, and has a shape like this: history = [ // Before first move { squares: [ null, null, null, null, null, null, null, null, null, ] }, // After first move { squares: [ null, null, null, null, 'X', null, null, null, null, ] }, // After second move { squares: [ null, null, null, null, 'X', null, null, null, 'O', ] }, // ... ] Now we need to decide which component should own the history state. Lifting State Up, Again We’ll want the top-level Game component to display a list of past moves. It will need access to the history to do that, so we will place the history state in the top-level Game component. Placing the history state into the Game component lets us remove the squares state from its child Board component. Just like we “lifted state up” from the Square component into the Board component, we are now lifting it up from the Board into the top-level Game component. This gives the Game component full control over the Board’s data, and lets it instruct the Board to render previous turns from the history. First, we’ll set up the initial state for the Game component within its constructor: class Game extends React.Component { constructor(props) { super(props); this.state = { history: [{ squares: Array(9).fill(null), }], xIsNext: true, }; } render() { return ( &lt;div className=\"game\"&gt; &lt;div className=\"game-board\"&gt; &lt;Board /&gt; &lt;/div&gt; &lt;div className=\"game-info\"&gt; &lt;div&gt;{/* status */}&lt;/div&gt; &lt;ol&gt;{/* TODO */}&lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; ); } } Next, we’ll have the Board component receive squares and onClick props from the Game component. Since we now have a single click handler in Board for many Squares, we’ll need to pass the location of each Square into the onClick handler to indicate which Square was clicked. Here are the required steps to transform the Board component: Delete the constructor in Board. Replace this.state.squares[i] with this.props.squares[i] in Board’s renderSquare. Replace this.handleClick(i) with this.props.onClick(i) in Board’s renderSquare. The Board component now looks like this: class Board extends React.Component { handleClick(i) { const squares = this.state.squares.slice(); if (calculateWinner(squares) || squares[i]) { return; } squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ squares: squares, xIsNext: !this.state.xIsNext, }); } renderSquare(i) { return ( &lt;Square value={this.props.squares[i]} onClick={() =&gt; this.props.onClick(i)} /&gt; ); } render() { const winner = calculateWinner(this.state.squares); let status; if (winner) { status = 'Winner: ' + winner; } else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); } return ( &lt;div&gt; &lt;div className=\"status\"&gt;{status}&lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)} &lt;/div&gt; &lt;/div&gt; ); } } We’ll update the Game component’s render function to use the most recent history entry to determine and display the game’s status: render() { const history = this.state.history; const current = history[history.length - 1]; const winner = calculateWinner(current.squares); let status; if (winner) { status = 'Winner: ' + winner; } else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); } return ( &lt;div className=\"game\"&gt; &lt;div className=\"game-board\"&gt; &lt;Board squares={current.squares} onClick={(i) =&gt; this.handleClick(i)} /&gt; &lt;/div&gt; &lt;div className=\"game-info\"&gt; &lt;div&gt;{status}&lt;/div&gt; &lt;ol&gt;{/* TODO */}&lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; ); } Since the Game component is now rendering the game’s status, we can remove the corresponding code from the Board’s render method. After refactoring, the Board’s render function looks like this: render() { return ( &lt;div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(0)} {this.renderSquare(1)} {this.renderSquare(2)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(3)} {this.renderSquare(4)} {this.renderSquare(5)} &lt;/div&gt; &lt;div className=\"board-row\"&gt; {this.renderSquare(6)} {this.renderSquare(7)} {this.renderSquare(8)} &lt;/div&gt; &lt;/div&gt; ); } Finally, we need to move the handleClick method from the Board component to the Game component. We also need to modify handleClick because the Game component’s state is structured differently. Within the Game’s handleClick method, we concatenate new history entries onto history. handleClick(i) { const history = this.state.history; const current = history[history.length - 1]; const squares = current.squares.slice(); if (calculateWinner(squares) || squares[i]) { return; } squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ history: history.concat([{ squares: squares, }]), xIsNext: !this.state.xIsNext, }); } Note Unlike the array push() method you might be more familiar with, the concat() method doesn’t mutate the original array, so we prefer it. At this point, the Board component only needs the renderSquare and render methods. The game’s state and the handleClick method should be in the Game component. View the full code at this point Showing the Past Moves Since we are recording the tic-tac-toe game’s history, we can now display it to the player as a list of past moves. We learned earlier that React elements are first-class JavaScript objects; we can pass them around in our applications. To render multiple items in React, we can use an array of React elements. In JavaScript, arrays have a map() method that is commonly used for mapping data to other data, for example: const numbers = [1, 2, 3]; const doubled = numbers.map(x =&gt; x * 2); // [2, 4, 6] Using the map method, we can map our history of moves to React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves. Let’s map over the history in the Game’s render method: render() { const history = this.state.history; const current = history[history.length - 1]; const winner = calculateWinner(current.squares); const moves = history.map((step, move) =&gt; { const desc = move ? 'Go to move #' + move : 'Go to game start'; return ( &lt;li&gt; &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt; &lt;/li&gt; ); }); let status; if (winner) { status = 'Winner: ' + winner; } else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); } return ( &lt;div className=\"game\"&gt; &lt;div className=\"game-board\"&gt; &lt;Board squares={current.squares} onClick={(i) =&gt; this.handleClick(i)} /&gt; &lt;/div&gt; &lt;div className=\"game-info\"&gt; &lt;div&gt;{status}&lt;/div&gt; &lt;ol&gt;{moves}&lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; ); } View the full code at this point For each move in the tic-tac-toes’s game’s history, we create a list item &lt;li&gt; which contains a button &lt;button&gt;. The button has a onClick handler which calls a method called this.jumpTo(). We haven’t implemented the jumpTo() method yet. For now, we should see a list of the moves that have occurred in the game and a warning that says: Warning: Each child in an array or iterator should have a unique “key” prop. Check the render method of “Game”. Let’s discuss what the above warning means. Picking a Key When we render a list, React stores some information about each rendered list item. When we update a list, React needs to determine what has changed. We could have added, removed, re-arranged, or updated the list’s items. Imagine transitioning from &lt;li&gt;Alexa: 7 tasks left&lt;/li&gt; &lt;li&gt;Ben: 5 tasks left&lt;/li&gt; to &lt;li&gt;Ben: 9 tasks left&lt;/li&gt; &lt;li&gt;Claudia: 8 tasks left&lt;/li&gt; &lt;li&gt;Alexa: 5 tasks left&lt;/li&gt; From our perspective, our transition swapped Alexa and Ben’s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what we intended. Because React cannot know our intentions, we need to specify a key property for each list item to differentiate each list item from its siblings. The strings alexa, ben, claudia may be used as keys. If we had access to a database, Alexa, Ben, and Claudia’s database IDs could be used as keys. &lt;li key={user.id}&gt;{user.name}: {user.taskCount} tasks left&lt;/li&gt; key is a special and reserved property in React (along with ref, a more advanced feature). When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it belongs in props, key cannot be referenced using this.props.key. React automatically uses key to decide which components to update. A component cannot inquire about its key. When a list is re-rendered, React takes each list item’s key and searches the previous list’s items for a matching key. If the current list has a key that does not exist in the previous list, React creates a component. If the current list is missing a key that exists in the previous list, React destroys a component. Keys tell React about the identity of each component which allows React to maintain state between re-renders. If a component’s key changes, the component will be destroyed and re-created with a new state. It’s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don’t have an appropriate key, you may want to consider restructuring your data so that you do. If no key is specified, React will present a warning and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list’s items or inserting/removing list items. Explicitly passing key={i} silences the warning but has the same problems as array indices and is not recommended in most cases. Keys do not need to be globally unique. Keys only needs to be unique between components and their siblings. Implementing Time Travel In the tic-tac-toe game’s history, each past move has a unique ID associated with it: it’s the sequential number of the move. The moves are never re-ordered, deleted, or inserted in the middle, so it’s safe to use the move index as a key. In the Game component’s render method, we can add the key as &lt;li key={move}&gt; and React’s warning about keys should disappear: const moves = history.map((step, move) =&gt; { const desc = move ? 'Go to move #' + move : 'Go to game start'; return ( &lt;li key={move}&gt; &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt; &lt;/li&gt; ); }); View the full code at this point Clicking any of the list item’s buttons throws an error because the jumpTo method is undefined. Before we implement jumpTo, we’ll add stepNumber to the Game component’s state to indicate which step we’re currently viewing. First, add stepNumber: 0 to the initial state in Game’s constructor: class Game extends React.Component { constructor(props) { super(props); this.state = { history: [{ squares: Array(9).fill(null), }], stepNumber: 0, xIsNext: true, }; } Next, we’ll define the jumpTo method in Game to update that stepNumber. We also set xIsNext to true if the number that we’re changing stepNumber to is even: handleClick(i) { // this method has not changed } jumpTo(step) { this.setState({ stepNumber: step, xIsNext: (step % 2) === 0, }); } render() { // this method has not changed } We will now make a few changes to the Game’s handleClick method which fires when you click on a square. The stepNumber state we’ve added reflects the move displayed to the user now. After we make a new move, we need to update stepNumber by adding stepNumber: history.length as part of the this.setState argument. This ensures we don’t get stuck showing the same move after a new one has been made. We will also replace reading this.state.history with this.state.history.slice(0, this.state.stepNumber + 1). This ensures that if we “go back in time” and then make a new move from that point, we throw away all the “future” history that would now become incorrect. handleClick(i) { const history = this.state.history.slice(0, this.state.stepNumber + 1); const current = history[history.length - 1]; const squares = current.squares.slice(); if (calculateWinner(squares) || squares[i]) { return; } squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState({ history: history.concat([{ squares: squares }]), stepNumber: history.length, xIsNext: !this.state.xIsNext, }); } Finally, we will modify the Game component’s render method from always rendering the last move to rendering the currently selected move according to stepNumber: render() { const history = this.state.history; const current = history[this.state.stepNumber]; const winner = calculateWinner(current.squares); // the rest has not changed If we click on any step in the game’s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred. View the full code at this point Wrapping Up Congratulations! You’ve created a tic-tac-toe game that: Lets you play tic-tac-toe, Indicates when a player has won the game, Stores a game’s history as a game progresses, Allows players to review a game’s history and see previous versions of a game’s board. Nice work! We hope you now feel like you have a decent grasp on how React works. Check out the final result here: Final Result. If you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game which are listed in order of increasing difficulty: Display the location for each move in the format (col, row) in the move history list. Bold the currently selected item in the move list. Rewrite Board to use two loops to make the squares instead of hardcoding them. Add a toggle button that lets you sort the moves in either ascending or descending order. When someone wins, highlight the three squares that caused the win. When no one wins, display a message about the result being a draw. Throughout this tutorial, we touched on React concepts including elements, components, props, and state. For a more detailed explanation of each of these topics, check out the rest of the documentation. To learn more about defining components, check out the React.Component API reference.TutorialBefore We Start the TutorialWhat Are We Building?PrerequisitesSetup for the TutorialOption 1: Write Code in the BrowserOption 2: Local Development EnvironmentHelp, I'm Stuck!OverviewWhat Is React?Inspecting the Starter CodePassing Data Through PropsMaking an Interactive ComponentDeveloper ToolsCompleting the GameLifting State UpWhy Immutability Is ImportantFunctional ComponentsTaking TurnsDeclaring a WinnerAdding Time TravelStoring a History of MovesLifting State Up, AgainShowing the Past MovesPicking a KeyImplementing Time TravelWrapping UpDocsInstallationMain ConceptsAdvanced GuidesAPI ReferenceContributingFAQChannelsGitHubStack OverflowDiscussion ForumReactiflux ChatDEV CommunityFacebookTwitterCommunityCommunity ResourcesToolsMoreTutorialBlogAcknowledgementsReact NativeCopyright © 2018 Facebook Inc./**/ window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = \"https://platform.twitter.com/widgets.js\"; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, \"script\", \"twitter-wjs\")); if(true) { (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); } if (typeof ga === \"function\") { ga('create', 'UA-41298772-1', 'auto'); } /*')})/*]]>*/"}],"posts":[{"title":"实战中学习Flutter1：简易聊天AppUI","slug":"2018-12-04-study-flutter","date":"2019-01-05T12:12:57.000Z","updated":"2019-01-04T12:45:35.427Z","comments":true,"path":"2019/01/05/2105/","link":"","permalink":"https://meandni.com/2019/01/05/2105/","excerpt":"","text":"作为新手写实战教程是为了也是为了学习，课程内容的实战项目主要来自我看的英文视频教程 希望尽一点点薄力让大家有兴趣学习这门新技术。 这里暂不介绍环境配置等操作，不了解的朋友请先移步官网：https://flutter.io/ 开发环境：VS Code 本套课程适合直接上手，无需各种基础，dart基础也不需要～～ 项目展示废话不多说了，看下这次我们需要开发的UI界面吧： Flutter 代码实现首先我们替换入口文件lib/main.dart下的代码代码如下： 1234567import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123;&#125; import &#39;package:flutter/material.dart&#39;; Flutter默认帮我们导入了flutter/material.dart包，这个包也是我们开发FlutterApp必备的包，其实也是一个UI库，其内部实现了大量优秀炫酷的组件(Widgets)，有App结构和导航、按钮、输入框和选择框、对话框、Alert、Panel、动画等等等等Material Design风格的控件。 Material Design：熟悉Android开发的童鞋一定非常了解了，是谷歌推出的一套视觉设计语言。其风格简单大方是我个人非常喜欢的设计风格，有兴趣的同学可以学习了解一下Material Design官方原版和Material Design中文翻译版。 在本项目中还需倒入其他哦两个库： 12import 'package:flutter/cupertino.dart'; //IOS风格适配import 'package:flutter/foundation.dart'; //flutter核心库之一 void main() =&gt; runApp(new MyApp()); 是Dart程序的入口，也就是说，Flutter程序在运行的时候，第一个执行的函数就是main()函数，Flutter默认会找到lib目录下的main.dart并运行void main() =&gt; runApp(new MyApp()); 第一个组件 123class MyApp extends StatelessWidget &#123; &#125; 这是我们在主函数中调用的第一个控件(Widget)。 定义添加两种Theme(主题)分别适配Android和IOS12345678910111213141516171819202122import 'package:flutter/material.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/foundation.dart';final ThemeData iOSTheme = new ThemeData( primarySwatch: Colors.red, primaryColor: Colors.grey[400], primaryColorBrightness: Brightness.dark,);final ThemeData androidTheme = new ThemeData( primarySwatch: Colors.blue, accentColor: Colors.green,);const String defaultUserName = \"MeandNi\"; //默认用户名void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123;&#125; 关注一下其中的primary颜色对双平台的设置，并且我们将ThemeData变量设置为final不可变的变量。 定义一个无状态StatelessWidget组件继承 StatelessWidget，通过 build 方法返回一个布局好的静态控件。 12345678910111213class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext ctx) &#123; return new MaterialApp( title: \"Chat Application\", theme: defaultTargetPlatform == TargetPlatform.iOS ? iOSTheme : androidTheme, home: new Chat(), ); &#125;&#125; 我们在这里返回了一个MaterialApp，其中可以设置title(标题)、theme(主题)、home(主页)等属性。 其他属性参考：https://docs.flutter.io/flutter/widgets/WidgetsApp-class.html title：App标题 theme：App主题 home：App根路径 我们通过判断用户平台给出不同的主题。 定义一个有状态StatefulWidget组件 —— Chat继承 StatefulWidget，通过 build 方法返回一个布局好的动态控件。所谓动态控件，这里我们主要关注State 的 `build` 方法去构建控件。在 State 中，你可以动态改变数据，这类似 MVVM 实现，在 `setState` 之后，改变的数据会触发 Widget 重新构建刷新。而下方代码中，我们咋State中定义了_messages、_textController、_isWriting三个变量，我们需要在改变着三个变量时触发 Widget 重新刷新。123456789101112131415161718192021222324252627282930313233343536```dartclass Chat extends StatefulWidget &#123; @override State createState() =&gt; new ChatWindow();&#125;class ChatWindow extends State&lt;Chat&gt; with TickerProviderStateMixin &#123; final List&lt;Msg&gt; _messages = &lt;Msg&gt;[]; final TextEditingController _textController = new TextEditingController(); bool _isWriting = false; @override Widget build(BuildContext ctx) &#123; return new Scaffold( appBar: new AppBar( title: new Text(&quot;Chat Application&quot;), elevation: Theme.of(ctx).platform == TargetPlatform.iOS ? 0.0 : 6.0, ), body: new Column(children: &lt;Widget&gt;[ new Flexible( child: new ListView.builder( itemBuilder: (_, int index) =&gt; _messages[index], itemCount: _messages.length, reverse: true, padding: new EdgeInsets.all(6.0), )), new Divider(height: 1.0), new Container( child: _buildComposer(), decoration: new BoxDecoration(color: Theme.of(ctx).cardColor), ), ]), ); &#125; 定义底部输入框和submit按钮：此Widget被放在ChatWindow的底部用于用户的输入提交。我们可以放关注点聚焦在TextField组件上，我们通过对输入值的监听修改_isWriting的值并对输入框组件和下方的按钮组件刷新达到一定用户体验。 对于放松按钮，我们在IOS端使用CupertinoButton，android端使用IconButton。 123456789101112131415161718192021222324252627282930313233343536373839404142434445Widget _buildComposer() &#123; return new IconTheme( data: new IconThemeData(color: Theme.of(context).accentColor), child: new Container( margin: const EdgeInsets.symmetric(horizontal: 9.0), child: new Row( children: &lt;Widget&gt;[ new Flexible( child: new TextField( controller: _textController, onChanged: (String txt) &#123; setState(() &#123; _isWriting = txt.length &gt; 0; &#125;); &#125;, onSubmitted: _submitMsg, decoration: new InputDecoration.collapsed(hintText: \"Enter some text to send a message\"), ), ), new Container( margin: new EdgeInsets.symmetric(horizontal: 3.0), child: Theme.of(context).platform == TargetPlatform.iOS ? new CupertinoButton( child: new Text(\"Submit\"), onPressed: _isWriting ? () =&gt; _submitMsg(_textController.text) : null ) : new IconButton( icon: new Icon(Icons.message), onPressed: _isWriting ? () =&gt; _submitMsg(_textController.text) : null, ) ), ], ), decoration: Theme.of(context).platform == TargetPlatform.iOS ? new BoxDecoration( border: new Border(top: new BorderSide(color: Colors.brown))) : null ), ); &#125; 定义发送数据的函数通过_textController清除输入框的旧数据。定义Msg插入到_messages数组中。 这里我们可以关注动画效果的操作,animationController将作为传输传递到Msg组件当中。 1234567891011121314151617void _submitMsg(String txt) &#123; _textController.clear(); setState(() &#123; _isWriting = false; &#125;); Msg msg = new Msg( txt: txt, animationController: new AnimationController( vsync: this, duration: new Duration(milliseconds: 800) ), ); setState(() &#123; _messages.insert(0, msg); &#125;); msg.animationController.forward(); &#125; 定义Msg消息的模版组件实际上我们点击Submit消息发送时，发送的就是这样一个StatelessWidget，其中携带两个变量：txt消息内容、animationController动画控制器。 123456789101112131415161718192021222324252627282930313233343536373839class Msg extends StatelessWidget &#123; Msg(&#123;this.txt, this.animationController&#125;); final String txt; final AnimationController animationController; @override Widget build(BuildContext ctx) &#123; return new SizeTransition( sizeFactor: new CurvedAnimation( parent: animationController, curve: Curves.easeOut), axisAlignment: 0.0, child: new Container( margin: const EdgeInsets.symmetric(vertical: 8.0), child: new Row( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ new Container( margin: const EdgeInsets.only(right: 18.0), child: new CircleAvatar(child: new Text(defaultUserName[0])), ), new Expanded( child: new Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ new Text(defaultUserName, style: Theme.of(ctx).textTheme.subhead), new Container( margin: const EdgeInsets.only(top: 6.0), child: new Text(txt), ), ], ), ), ], ), ), ); &#125;&#125; 至此我们的第一个实战App旧大功告成了，是不是很简单的样子，没错，就是这么简单就能做出这么漂亮的UI，其中有些Flutter基础可能没有涉及，如果又需要会尽量更新！ 完整代码github demo","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"自学","slug":"自学","permalink":"https://meandni.com/tags/自学/"},{"name":"flutter","slug":"flutter","permalink":"https://meandni.com/tags/flutter/"}]},{"title":"经验：Flutter项目IOS真机部署及问题","slug":"2019-01-04-flutter-ios-problems","date":"2019-01-04T12:12:57.000Z","updated":"2019-01-04T12:42:21.401Z","comments":true,"path":"2019/01/04/5671/","link":"","permalink":"https://meandni.com/2019/01/04/5671/","excerpt":"","text":"用flutter开发ios应用在真机调试时出现的问题以及处理方式 无法连接iphone手机flutter找不到真机，已经安装Xcode，Xcode里面可以打开真机运行，但Android Studio环境和Vscode环境下，不能找到连接的iPhone真机，其实很简单，终端运行一下: 1flutter doctor 即可，控制台提示如下： image-20190104201612194 按照提示终端执行 截图绿色部分的命令即可。 1234brew install --HEAD usbmuxdbrew link usbmuxdbrew install --HEAD libimobiledevicebrew install ideviceinstaller Signing for “xxx” requires a development team. Select a development team首次用vscode连上真机以后，点击调试，会出现如下问题： No Provisioning Profile was found for your project’s Bundle Identifier or yourdevice. You can create a new Provisioning Profile for your project in Xcode foryour team by: 1- Open the Flutter project’s Xcode target with open ios/Runner.xcworkspace 2- Select the ‘Runner’ project in the navigator then the ‘Runner’ target in the project settings 3- In the ‘General’ tab, make sure a ‘Development Team’ is selected. You may need to: - Log in with your Apple ID in Xcode first - Ensure you have a valid unique Bundle ID - Register your device with your Apple Developer Account - Let Xcode automatically provision a profile for your app 4- Build or run your project againIt’s also possible that a previously installed app with the same BundleIdentifier was signed with a different certificate.For more information, please visit: https://flutter.io/setup/#deploy-to-ios-devicesOr run on an iOS simulator without code signing════════════════════════════════════════════════════════════════════════════════2018-10-27 12:09:29.004 ios-deploy[91734:221562][ !! ] Error 0xe8008015: A valid provisioning profile for this executable was not found. AMDeviceSecureInstallApplication(0, device, url, options, install_callback, 0)Could not install build/ios/iphoneos/Runner.app on b53d6902af4ac5d5166a3125b9013886739c92d2.Try launching Xcode and selecting “Product &gt; Run” to fix the problem: open ios/Runner.xcworkspaceError launching application on xxx的 iPhone.Exited (sigterm) 用xcode打开 flutter项目/ios/Runner.xcworkspace 这个文件，好，我们手动打开，点击编译，此时会编译不通过～ 出现这个问题的原因是你的xcode project 中的team没有选择，选择方法如下。 img 不受信任的开发者解决方式：打开手机上的”设置-&gt;通用-&gt;设备管理-&gt;开发者应用”，进入以后，点击”信任 xxxxx@xxx.com“ 参考链接官方链接：https://flutter.io/docs/get-started/install/macos","categories":[{"name":"整理","slug":"整理","permalink":"https://meandni.com/categories/整理/"}],"tags":[{"name":"总结","slug":"总结","permalink":"https://meandni.com/tags/总结/"},{"name":"flutter","slug":"flutter","permalink":"https://meandni.com/tags/flutter/"},{"name":"问题","slug":"问题","permalink":"https://meandni.com/tags/问题/"}]},{"title":"Android进阶之路","slug":"2018-12-25-android-advance","date":"2018-12-25T07:15:58.000Z","updated":"2019-01-03T15:17:49.533Z","comments":true,"path":"2018/12/25/644b/","link":"","permalink":"https://meandni.com/2018/12/25/644b/","excerpt":"","text":"读书进阶Android已读：《Android群英传》 正读：《Android进阶之光》 未读：《Android开发艺术探索》","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://meandni.com/tags/Android/"},{"name":"读书","slug":"读书","permalink":"https://meandni.com/tags/读书/"}]},{"title":"Android 框架组件(Android Architecture Components)使用指南","slug":"2018-12-04-android-architecture","date":"2018-11-21T06:17:01.833Z","updated":"2019-01-03T13:51:48.033Z","comments":true,"path":"2018/11/21/86ef/","link":"","permalink":"https://meandni.com/2018/11/21/86ef/","excerpt":"","text":"面对越来越复杂的 App 需求，Google 官方发布了Android 框架组件库（Android Architecture Components ）。为开发者更好的开发 App 提供了非常好的样本。这个框架里的组件是配合 Android 组件生命周期的，所以它能够很好的规避组件生命周期管理的问题。今天我们就来看看这个库的使用。 0x00 通用的框架准则官方建议在架构 App 的时候遵循以下两个准则： 关注分离 其中早期开发 App 最常见的做法是在 Activity 或者 Fragment 中写了大量的逻辑代码，导致 Activity 或 Fragment 中的代码很臃肿，十分不易维护。现在很多 App 开发者都注意到了这个问题，所以前两年 MVP 结构就非常有市场，目前普及率也很高。 模型驱动UI 模型持久化的好处就是：即使系统回收了 App 的资源用户也不会丢失数据，而且在网络不稳定的情况下 App 依然可以正常地运行。从而保证了 App 的用户体验。 0x01 App 框架组件框架提供了以下几个核心组件，我们将通过一个实例来说明这几个组件的使用。 ViewModel LiveData Room 假设要实现一个用户信息展示页面。这个用户信息是通过REST API 从后台获取的。 0x02 建立UI我们使用 fragment (UserProfileFragment.java) 来实现用户信息的展示页面。为了驱动 UI，我们的数据模型需要持有以下两个数据元素 用户ID: 用户的唯一标识。可以通过 fragment 的 arguments 参数进行传递这个信息。这样做的好处就是如果系统销毁了应用，这个参数会被保存并且下次重新启动时可以恢复之前的数据。 用户对象数据：POJO 持有用户数据。 我们要创建 ViewModel 对象用于保存以上数据。 那什么是 ViewModel 呢？ A ViewModel provides the data for a specific UI component, such as a fragment or activity, and handles the communication with the business part of data handling, such as calling other components to load the data or forwarding user modifications. The ViewModel does not know about the View and is not affected by configuration changes such as recreating an activity due to rotation. ViewModel 是一个框架组件。它为 UI 组件 (fragment或activity) 提供数据，并且可以调用其它组件加载数据或者转发用户指令。ViewModel 不会关心 UI 长什么样，也不会受到 UI 组件配置改变的影响，例如不会受旋转屏幕后 activity 重新启动的影响。因此它是一个与 UI 组件无关的。 1234567891011public class UserProfileViewModel extends ViewModel &#123; private String userId; private User user; public void init(String userId) &#123; this.userId = userId; &#125; public User getUser() &#123; return user; &#125;&#125; 123456789101112131415161718public class UserProfileFragment extends LifecycleFragment &#123; private static final String UID_KEY = \"uid\"; private UserProfileViewModel viewModel; @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); String userId = getArguments().getString(UID_KEY); viewModel = ViewModelProviders.of(this).get(UserProfileViewModel.class); viewModel.init(userId); &#125; @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; return inflater.inflate(R.layout.user_profile, container, false); &#125;&#125; 需要的是：由于框架组件目前还处于预览版本，这里UserProfileFragment 是继承于 LifecycleFragment 而不是 Fragment。待正式发布版本之后 Android Support 包中的 Fragment 就会默认实现 LifecycleOwner 接口。而 LifecycleFragment 也是实现了 LifecycleOwner 接口的。即正式版本发布时 Support 包中的 UI 组件类就是支持框架组件的。 现在已经有了 UI 组件和 ViewModel，那么我们如何将它们进行连接呢？这时候就需要用到 LiveData 组件了。 LiveData is an observable data holder. It lets the components in your app observe LiveData objects for changes without creating explicit and rigid dependency paths between them. LiveData also respects the lifecycle state of your app components (activities, fragments, services) and does the right thing to prevent object leaking so that your app does not consume more memory. LiveData 的使用有点像 RxJava。因此完全可以使用 RxJava 来替代 LiveData 组件。 现在我们修改一下 UserProfileViewModel 类 1234567public class UserProfileViewModel extends ViewModel &#123; ... private LiveData&lt;User&gt; user; public LiveData&lt;User&gt; getUser() &#123; return user; &#125;&#125; 将 User user 替换成 LiveData&lt;User&gt; user 然后再修改 UserProfileFragment 类中 1234567@Overridepublic void onActivityCreated(@Nullable Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); viewModel.getUser().observe(this, user -&gt; &#123; // update UI &#125;);&#125; 当用户数据发生改变时，就会通知 UI 进行更新。ViewModel 与 UI 组件的交互就是这么简单。 但细心的朋友可能发现了：fragment 在 onActivityCreated 方法中添加了相应的监听，但是没有在其它对应的生命周期中移除监听。有经验的朋友就会觉得这是不是有可能会发生引用泄露问题呢？其实不然，LiveData 组件内部已经为开发者做了这些事情。即 LiveData 会再正确的生命周期进行回调。 0x03 获取数据现在已经成功的把 ViewModel 与 UI 组件（fragment）进行了通信。那么 ViewModel 又是如何获取数据的呢？ 假设我们的数据是通过REST API 从后天获取的。我们使用 Retrofit 库实现网络请求。 以下是请求网络接口 Webservice 123456789public interface Webservice &#123; /** * @GET declares an HTTP GET request * @Path(\"user\") annotation on the userId parameter marks it as a * replacement for the &#123;user&#125; placeholder in the @GET path */ @GET(\"/users/&#123;user&#125;\") Call&lt;User&gt; getUser(@Path(\"user\") String userId);&#125; ViewModel 可以引用 Webservice 接口，但是这样做违背了我们在上文提到的关注分离准则。因为我们推荐使用 Repository 模型对 Webservice 进行封装。 Repository modules are responsible for handling data operations. They provide a clean API to the rest of the app. They know where to get the data from and what API calls to make when data is updated. You can consider them as mediators between different data sources (persistent model, web service, cache, etc.). 关于 Repository 模式可以参考我的上一篇《App 组件化/模块化之路——Repository模式》 以下是使用 Repository 封装 WebService 12345678910111213141516public class UserRepository &#123; private Webservice webservice; // ... public LiveData&lt;User&gt; getUser(int userId) &#123; // This is not an optimal implementation, we'll fix it below final MutableLiveData&lt;User&gt; data = new MutableLiveData&lt;&gt;(); webservice.getUser(userId).enqueue(new Callback&lt;User&gt;() &#123; @Override public void onResponse(Call&lt;User&gt; call, Response&lt;User&gt; response) &#123; // error case is left out for brevity data.setValue(response.body()); &#125; &#125;); return data; &#125;&#125; 使用 Respository 模式抽象数据源接口，也可以很方便地替换其它数据。这样 ViewModel 也不用知道数据源到底是来自哪里。 0x04 组件间的依赖管理从上文我们知道 UserRepository 类需要有一个 WebService 实例才能工作。我们可以直接创建它，但这么做我们就必须知道它的依赖，而且会由很多重复的创建对象的代码。这时候我们可以使用依赖注入。本例中我们将使用 Dagger 2 来管理依赖。 0x05 连接 ViewModel 和 Repository修改 UserProfileViewModel 类，引用 Repository 并且通过 Dagger 2 对 Repository 的依赖进行管理。 123456789101112131415161718192021public class UserProfileViewModel extends ViewModel &#123; private LiveData&lt;User&gt; user; private UserRepository userRepo; @Inject // UserRepository parameter is provided by Dagger 2 public UserProfileViewModel(UserRepository userRepo) &#123; this.userRepo = userRepo; &#125; public void init(String userId) &#123; if (this.user != null) &#123; // ViewModel is created per Fragment so // we know the userId won't change return; &#125; user = userRepo.getUser(userId); &#125; public LiveData&lt;User&gt; getUser() &#123; return this.user; &#125;&#125; 0x06 缓存数据前面我们实现的 Repository 是只有一个网络数据源的。这样做每次进入用户信息页面都需要去查询网络，用户需要等待，体验不好。因此在 Repository 中加一个缓存数据。 123456789101112131415161718192021222324@Singleton // informs Dagger that this class should be constructed oncepublic class UserRepository &#123; private Webservice webservice; // simple in memory cache, details omitted for brevity private UserCache userCache; public LiveData&lt;User&gt; getUser(String userId) &#123; LiveData&lt;User&gt; cached = userCache.get(userId); if (cached != null) &#123; return cached; &#125; final MutableLiveData&lt;User&gt; data = new MutableLiveData&lt;&gt;(); userCache.put(userId, data); // this is still suboptimal but better than before. // a complete implementation must also handle the error cases. webservice.getUser(userId).enqueue(new Callback&lt;User&gt;() &#123; @Override public void onResponse(Call&lt;User&gt; call, Response&lt;User&gt; response) &#123; data.setValue(response.body()); &#125; &#125;); return data; &#125;&#125; 0x07 持久化数据 （Room 组件）Android 框架提供了 Room 组件，为 App 数据持久化提供了解决方案。 Room is an object mapping library that provides local data persistence with minimal boilerplate code. At compile time, it validates each query against the schema, so that broken SQL queries result in compile time errors instead of runtime failures. Room abstracts away some of the underlying implementation details of working with raw SQL tables and queries. It also allows observing changes to the database data (including collections and join queries), exposing such changes via LiveData objects. In addition, it explicitly defines thread constraints that address common issues such as accessing storage on the main thread. Room 组件提供了数据库操作，配合 LiveData 使用可以监听数据库的变化，进而更新 UI 组件。 要使用 Room 组件，需要以下步骤： 使用注解 @Entity 定义实体 创建 RoomDatabase 子类 创建数据访问接口（DAO） 在 RoomDatabase 中引用 DAO 用注解 @Entity 定义实体类 12345678@Entityclass User &#123; @PrimaryKey private int id; private String name; private String lastName; // getters and setters for fields&#125; 创建 RoomDatabase子类 123@Database(entities = &#123;User.class&#125;, version = 1)public abstract class MyDatabase extends RoomDatabase &#123;&#125; 需要注意的是 MyDatabase 是抽象类，Room 组件为我们提供具体的实现。 创建 DAO 1234567@Daopublic interface UserDao &#123; @Insert(onConflict = REPLACE) void save(User user); @Query(\"SELECT * FROM user WHERE id = :userId\") LiveData&lt;User&gt; load(String userId);&#125; 在 RoomDatabase 中引用 DAO 1234@Database(entities = &#123;User.class&#125;, version = 1)public abstract class MyDatabase extends RoomDatabase &#123; public abstract UserDao userDao();&#125; 现在有了 Room 组件，那么我们可以修改 UserRepository 类 1234567891011121314151617181920212223242526272829303132333435@Singletonpublic class UserRepository &#123; private final Webservice webservice; private final UserDao userDao; private final Executor executor; @Inject public UserRepository(Webservice webservice, UserDao userDao, Executor executor) &#123; this.webservice = webservice; this.userDao = userDao; this.executor = executor; &#125; public LiveData&lt;User&gt; getUser(String userId) &#123; refreshUser(userId); // return a LiveData directly from the database. return userDao.load(userId); &#125; private void refreshUser(final String userId) &#123; executor.execute(() -&gt; &#123; // running in a background thread // check if user was fetched recently boolean userExists = userDao.hasUser(FRESH_TIMEOUT); if (!userExists) &#123; // refresh the data Response response = webservice.getUser(userId).execute(); // TODO check for error etc. // Update the database.The LiveData will automatically refresh so // we don't need to do anything else here besides updating the database userDao.save(response.body()); &#125; &#125;); &#125;&#125; 目前为止我们的代码就基本完成了。UI 组件通过 ViewModel 访问数据，而 ViewModel 通过 LiveData 监听数据的变化，并且使用 Repository 模式封装数据源。这些数据源可以是网络数据，缓存以及持久化数据。 0x08 框架结构图 final-architecture 0x09 参考文档https://developer.android.com/topic/libraries/architecture/guide.html#recommended_app_architecture https://github.com/googlesamples/android-architecture-components","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[]},{"title":"跟着Google学习架构2：todo‑mvp代码分析","slug":"2019-01-03-google-mvp-todo","date":"2018-11-11T14:01:00.000Z","updated":"2019-01-03T15:16:53.659Z","comments":true,"path":"2018/11/11/3b09/","link":"","permalink":"https://meandni.com/2018/11/11/3b09/","excerpt":"","text":"一、MVP简介 img Model: 数据层，负责与网络层和数据库层的逻辑交互。 View: UI层，显示数据, 并向Presenter报告用户行为。 Presenter: 从Model拿数据，应用到UI层，管理UI的状态，响应用户的行为。 二、MVP优势在学习todo-mvp之前，先了解一下MVP的优势。 分离了视图逻辑和业务逻辑，降低了耦合。 Activity只处理生命周期的任务，代码变得更加简洁。 视图逻辑和业务逻辑分别抽象到了View和Presenter的接口中，提高代码的阅读性。 Presenter被抽象成接口，可以有多种具体的实现，所以方便进行单元测试。 把业务逻辑抽到Presenter中去，避免后台线程引用着Activity导致Activity的资源无法被系统回收从而引起内存泄露和OOM。 三、todo-mvp结构解析1.项目结构 img 从上图可以看出，todo-mvp是按照功能模块划分的。 其中tasks, taskdetail, addedittask, statistics是四个业务模块。 data是数据模块，其中具体的类TasksRepository担任Model层，负责远程和本地数据的获取。 BasePresenter和BaseView是presenter 和 view 的基类，在具体模块承担实际功能。最后，util是工具类集合。 2.具体解析在todoapp中，MVP的具体结构如下图所示： img 下面以tasks模块具体阐述上述图片中的实际作用关系。 基类 12345public interface BasePresenter &#123; void start();&#125; 其中start()方法的作用是presenter开始获取数据并调用view中方法改变界面显示，其调用时机是在Fragment类的onResume方法中。 12345public interface BaseView&lt;T&gt; &#123; void setPresenter(T presenter);&#125; 其中setPresenter()方法作用是在将presenter实例传入view中，其调用时机是presenter实现类的构造函数中。 契约类 与之前使用的MVP实现不同，官方的实现中加入了契约类来统一管理view与presenter的所有的接口，这种方式使得view与presenter中有哪些功能，一目了然，维护起来也方便，同时使得view与presenter一一对应，并有效地减少类的数目。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public interface TasksContract &#123; interface View extends BaseView&lt;Presenter&gt; &#123; void setLoadingIndicator(boolean active); void showTasks(List&lt;Task&gt; tasks); void showAddTask(); void showTaskDetailsUi(String taskId); void showTaskMarkedComplete(); void showTaskMarkedActive(); void showCompletedTasksCleared(); void showLoadingTasksError(); void showNoTasks(); void showActiveFilterLabel(); void showCompletedFilterLabel(); void showAllFilterLabel(); void showNoActiveTasks(); void showNoCompletedTasks(); void showSuccessfullySavedMessage(); boolean isActive(); void showFilteringPopUpMenu(); &#125; interface Presenter extends BasePresenter &#123; void result(int requestCode, int resultCode); void loadTasks(boolean forceUpdate); void addNewTask(); void openTaskDetails(@NonNull Task requestedTask); void completeTask(@NonNull Task completedTask); void activateTask(@NonNull Task activeTask); void clearCompletedTasks(); void setFiltering(TasksFilterType requestType); TasksFilterType getFiltering(); &#125;&#125; TasksActivity Activity 在项目中是一个全局的控制者，负责创建 view 以及 presenter 实例，并将二者联系起来。 123456789101112131415 TasksFragment tasksFragment = (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame); if (tasksFragment == null) &#123; // 创建 fragment tasksFragment = TasksFragment.newInstance(); ActivityUtils.addFragmentToActivity( getSupportFragmentManager(), tasksFragment, R.id.contentFrame); &#125; // 创建 presenter，TasksPresenter是TasksContract.Presenter 的实现类// 传入两个参数 //1.TasksRepository实例，负责数据层 //2.tasksFragment，是TasksContract.View的实现类，即view实例 mTasksPresenter = new TasksPresenter( Injection.provideTasksRepository(getApplicationContext()), tasksFragment); 其中，通过实例化TasksPresenter时，传入tasksFragment，使得在TasksPresenter中拥有view实例。同时，在实例化时初始化构造函数，调用了setPresenter()方法，使得view实例中拥有了presenter实例对象，使得两者联系起来。 TasksPresenter构造函数如下所示： 123456public TasksPresenter(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView) &#123; mTasksRepository = checkNotNull(tasksRepository, &quot;tasksRepository cannot be null&quot;); mTasksView = checkNotNull(tasksView, &quot;tasksView cannot be null!&quot;); mTasksView.setPresenter(this);&#125; TasksFragment 将Fragment作为view层的实现类，使得Activity作为一个全局控制类来创建对象，而Fragment作为view，两者各司其职。同时，Fragment比较灵活，能够方便的处理界面适配的问题。 1234567891011121314151617181920212223public class TasksFragment extends Fragment implements TasksContract.View &#123; ........... public static TasksFragment newInstance() &#123; return new TasksFragment(); &#125; ........... @Override public void onResume() &#123; super.onResume(); mPresenter.start(); &#125; ........... @Override public void setPresenter(@NonNull TasksContract.Presenter presenter) &#123; mPresenter = checkNotNull(presenter); &#125; ........... @Override public boolean isActive() &#123; return isAdded(); &#125; ...........&#125; 对于 view 的实现TasksFragment，只挑一部分重要的方法来看。 newInstance ()方法，实例化TasksFragment对象。 setPresenter()方法继承于父类，通过该方法，view 获得了 presenter 得实例，从而可以调用 presenter 代码来处理业务逻辑。 在onResume()中，调用了 presenter 得start()方法，获取数据并操作view界面的显示。 isActive()方法，通过isAdded()判断对应Activity是否销毁。在Fragment在执行异步耗时操作后，如果调用Activity实例，应当先使用isActive()方法加以判断。 四、总结通过对todo-mvp分析，再次了解学习了MVP。从google提供的例子中可以看出，MVP的实现较为简单，model、view和presenter各个职责明确，便于扩展维护。contract契约类的出现，使得model和presenter结构更加清晰明了。Activity和Fragment的配合，使得Activity职能更为简化，同时View的实现更加灵活。 参考文章：https://www.jianshu.com/p/e219ebd1572a","categories":[{"name":"整理","slug":"整理","permalink":"https://meandni.com/categories/整理/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://meandni.com/tags/Android/"},{"name":"架构","slug":"架构","permalink":"https://meandni.com/tags/架构/"},{"name":"模块化","slug":"模块化","permalink":"https://meandni.com/tags/模块化/"}]},{"title":"跟着Google学习架构1：todo‑mvp和todo‑mvp‑clean","slug":"2019-01-03-google-mvp-todo-and-clean","date":"2018-11-10T14:01:00.000Z","updated":"2019-01-03T15:16:46.591Z","comments":true,"path":"2018/11/10/33d5/","link":"","permalink":"https://meandni.com/2018/11/10/33d5/","excerpt":"","text":"前提这里一定要说明一下，对于MVP,MVC,MVVM,Clean Architecture 等都只是设计思想，并不是代码框架，具体的框架需要来使用上述的设计思想来实现。就比如下面的MVP实现中，View是Activity,Fragment，Presenter是单独的类来处理逻辑，REPOSITORY可以看做是Model。 android-architecture-todoapp-mvpgoogle官方推荐的Android框架MVP例子。自己添加了一些注释和心得。基于 Model-View-Presenter的机构模式。 核心思想就再下面这张图里面： ss 图中的REPOSITORY 也就是数据层，相当于Model。 谷歌仓库：https://github.com/googlesamples/android-architecture android-architecture-todoapp-mvp-clean下面的内容来自简书 首先看一个Clean Architecture构想图： mvp 约定，从最里面的圈向外依次为1、2、3、4。 第一个圈，是代表App的业务对象（business objects of the application），我的理解也就是相当于数据层。 第二个圈，是编排数据从 Entity 入或出的流，也叫交互器(Interactors)，基本上所有业务逻辑都在这里。 第三个圈，把 Use Cases 或者 Entity 使用的数据结构转换成需要的形式。Presenters 和 Controllers 都属于这里。 第四个圈，框架和驱动：处理细节的地方：UI、工具（tools）、框架（framework）等。 上面只是一个设计规范，那么具体到代码实现应该怎么设计呢？下图是一个大概的框架： CleanCode Presentation Layer这一层是处理UI、动画逻辑的地方，它使用了MVP（Model View Presenter）模式， 你也可以使用 MVC、MVVM（不再深究）。 在这里 Activity和Fragment都是Views，不处理除UI逻辑之外的任何逻辑，许多的渲染操作都在这里完成。 在这一层 Presenters 是由各种 interactors (use cases) 组成的，他们负责执行一个异步任务，并通过回调取回需要的数据给UI渲染。 CleanCodeMvp Model就相当于各种interactors(use cases)，可以把多个interactors(use cases)封装一下来实现一个页面的逻辑，这样封装好的就是Model了，当然如果不封装也可以。 如果你想看一看一些比较酷的MVP、MVVM例子，可以参考 Effective Android UI 。 Domain Layer所有的业务逻辑都是在这层处理的。考虑到Android工程，你会看到所有的 interactors (use cases) 也是在这里实现的。 这层是一个纯Java的模块，不包含任何Android依赖，所有的外部交互都是通过接口来实现。 CleanCodeDomain 通过上图可以发现，这一层即包含与 Presentation Layer交互的接口（interactors / use cases），也包含与 Data Layer交互的接口（Repository Interface）。 Data Layer所有App需要的数据都是通过这层的 UserRepository （实现了DomainLayer的接口）提供的，它使用了 Repository Pattern 的策略—— 通过一个工厂，根据不同的条件抓取不同的数据源。比如，当通过 id 来获取一个 user 时，如果这个 user 在缓存中不存在，那么它会选择磁盘缓存作为数据源，如果磁盘缓存也不存在它会通过云端接口获取数据，并保存在本地缓存中。 Error Handling这是一个值得讨论的话题，非常欢迎任何分享。我的策略是实用回调机制。如果 DataRepo 发生变化，回调接口提供两个方法：onResponse() 和 onError(), 后者把错误封装在 ErrorBundle 类里面：这种处理方式带来一个问题，错误通过层层传递（就是异步编程中常见的 CallbackHell 问题 ）导致代码可读性变差。 或者可以使用 EventBus 来处理，但是这种方式有点像 GOTO 会导致代码逻辑混乱。 github代码示例：Here is the github link 基于 android-architecture-todoapp-mvp，使用Clean Architecture的概念来实现。参见链接：https://github.com/stateofzhao/android-architecture-todoapp-mvp-clean 在这里唠叨下MVP和MVP-Clean的不同： MVP，Presenter直接持并操作数据层UserRepository，数据层就被看做是MVP中的M了。由于Presenter对业务逻辑至关重要，所以Presenter不光起到隔离Model与View的作用，还起到具体业务逻辑实现的作用，导致Presenter比较臃肿，不便于业务功能的扩展。 MVP-Clean，这个是MVP结合Clean Architecture来使用的，不让Presenter直接处理数据层，而是使用Domain Layer把数据层与上层（Presenter和View）彻底隔离起来，所有的业务逻辑都是在这层处理的，考虑到Android工程，你会看到所有的 interactors (use cases) 也是在这里实现的，这一层是纯java模块，不包含任何Android依赖；Presenter是由各种interactors (use cases) 组成，Presenter其实就是起到一个数据转换作用，把数据层的数据封装成View需要显示的数据；数据层UserRepository（实现了DomainLayer的接口）与上面的基本MVP数据层一样，就是提供APP需要的各种数据，注意数据层需要实现DomainLayer层提供的接口，但是在官方例子中，数据层接口直接放到数据层里面。 通过上面的理解，可以看出俩MVP中的M是一个相当泛类的指代，它并不是指具体的一个类，比如在基本MVP中它指数据层；而在MVP-Clean中指UseCase层的各种useCase。 与MVP很相近的MVC模式参见知乎上的一个链接：https://www.zhihu.com/question/22886622 回答中讲解的非常好，看了后发现我之前理解的Model和Controller完全是错误的！ 参考文章：https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html","categories":[{"name":"整理","slug":"整理","permalink":"https://meandni.com/categories/整理/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://meandni.com/tags/Android/"},{"name":"架构","slug":"架构","permalink":"https://meandni.com/tags/架构/"},{"name":"模块化","slug":"模块化","permalink":"https://meandni.com/tags/模块化/"}]},{"title":"理解 IntelliJ IDEA 的项目配置和Web部署","slug":"2018-10-10-intellijidea-config","date":"2018-10-10T04:37:00.230Z","updated":"2019-01-03T13:43:16.653Z","comments":true,"path":"2018/10/10/a03f/","link":"","permalink":"https://meandni.com/2018/10/10/a03f/","excerpt":"","text":"1、项目配置的理解IDEA 中最重要的各种设置项，就是这个 Project Structre 了，关乎你的项目运行，缺胳膊少腿都不行。最近学校正好也是用之前自己比较熟悉的IDEA而不是Eclipse，为了更深入理解和使用，就找来各种资料再研究一下，这里整理后来个输出。 1.1 Project Project name：定义项目的名称； Project SDK：设置该项目使用的JDK，也可以在此处新添加其他版本的JDK； Project language level：这个和JDK的类似，区别在于，假如你设置了JDK1.8，却只用到1.6的特性，那么这里可以设置语言等级为1.6，这个是限定项目编译检查时最低要求的JDK特性； Project compiler output：项目中的默认编译输出总目录，如图黄色部分，实际上每个模块可以自己设置特殊的输出目录（Modules - (project) - Paths - Use module compile output path），所以这个设置有点鸡肋。 1.2 Modules 1.2.1 增删子项目 一个项目中可以有多个子项目，每个子项目相当于一个模块。一般我们项目只是单独的一个，IntelliJ IDEA 默认也是单子项目的形式，所以只需要配置一个模块。 （此处的两个项目引入仅作示例参考） 1.2.2 子项目配置每个子项目都对应了Sources、Paths、Dependencies 三大配置选项： Sources：显示项目的目录资源，那些是项目部署的时候需要的目录，不同颜色代表不同的类型； Paths：可以指定项目的编译输出目录，即项目类和测试类的编译输出地址（替换掉了Project的默认输出地址） Dependencies：项目的依赖 1.2.3 增删框架（Web部署-1）每个子项目之下都可以定义它所使用的框架，这里重点说明一下Web部分的设置。 1.3 Libraries这里可以显示所添加的jar包，同时也可以添加jar包，并且可以把多个jar放在一个组里面，类似于jar包整理。 这里默认将每个jar包做为了一个单独的组（未测试，待定）。 1.4 Facets官方的解释是： When you select a framework (a facet) in the element selector pane, the settings for the framework are shown in the right-hand part of the dialog. （当你在左边选择面板点击某个技术框架，右边将会显示这个框架的一些设置） 说实话，并没有感觉到有什么作用。 1.5 Artifacts（Web部署-2）项目的打包部署设置，这个是项目配置里面比较关键的地方，重点说一下。 先理解下它的含义，来看看官方定义的artifacts： An artifact is an assembly of your project assets that you put together to test, deploy or distribute your software solution or its part. Examples are a collection of compiled Java classes or a Java application packaged in a Java archive, a Web application as a directory structure or a Web application archive, etc. 即编译后的Java类，Web资源等的整合，用以测试、部署等工作。再白话一点，就是说某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式。某个module有了 Artifacts 就可以部署到应用服务器中了。 （ *jar：Java ARchive，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发Java平台应用软件或库；* *war：Web application ARchive，一种JAR文件，其中包含用来分发的JSP、Java Servlet、Java类、XML文件、标签库、静态网页（HTML和相关文件），以及构成Web应用程序的其他资源；* *exploded：在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。* ） 默认情况下，IDEA的 Modules 和 Artifacts 的 output目录已经设置好了，不需要更改，打成war包的时候会自动在 WEB-INF目录下生成classes，然后把编译后的文件放进去。 你可能对这里的输出目录不太理解，之前不是配置过了文件编译的输出目录了吗？为什么这里还有一个整合这些资源的目录呢？它又做了哪些事呢？ ==其实，实际上，当你点击运行tomcat时，默认就开始做以下事情：== 编译，IDEA在保存/自动保存后不会做编译，不像Eclipse的保存即编译，因此在运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下（见1.2.2）； 根据artifact中的设定对目录结构进行创建； 拷贝web资源的根目录下的所有文件到artifact的目录下（见1.2.3）； 拷贝编译输出目录下的classes目录到artifact下的WEB-INF下（见1.2.2）； 拷贝lib目录下所需的jar包到artifact下的WEB_INF下； 运行server，运行成功后，如有需要，会自动打开浏览器访问指定url。 在这里还要注意的是，配置完成的artifact，需要在tomcat中进行添加： 2、参考链接 IntelliJ IDEA 项目相关的几个重要概念介绍 Dependencies Tab Facet Page Working with Artifacts Intellij IDEA 14.x 中的Facets和Artifacts的区别 IntelliJ使用指南—— 深入理解IntelliJ的Web部署逻辑 IntelliJ IDEA WEB项目的部署配置","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://meandni.com/tags/软件/"},{"name":"IntelliJ IDEA","slug":"IntelliJ-IDEA","permalink":"https://meandni.com/tags/IntelliJ-IDEA/"},{"name":"javaweb","slug":"javaweb","permalink":"https://meandni.com/tags/javaweb/"}]},{"title":"2018.10.5有感！","slug":"2018-10-05-nationalday","date":"2018-10-05T14:33:37.782Z","updated":"2019-01-03T13:38:52.892Z","comments":true,"path":"2018/10/05/3a4f/","link":"","permalink":"https://meandni.com/2018/10/05/3a4f/","excerpt":"","text":"生活本来想着不回家的，我可能已经被击垮了，但在他们的诱导下还是去了苏州准备和他们一起回去，在苏州车站一个人等郑来接我的时候就感觉到了一个人的孤独（现在我时刻感觉孤独），如果以后都是我一个人面对将来的生活和各种痛苦我该怎么活，我不想像我的一些朋友一样毕业了就开始了孤单落寞颓废的生活，先把bug立在这边，毕业后不能孤单。 现在唯一能做的是什么？？？我觉得未来比较迷茫 ^ ^，我觉得现在能做的还得是把自己的欲望收敛起来，这可能比较困难，已不复当年了，过去是多么的美好，但现在回想起来我怎么错过了那么多美好的东西和机会。再立一个bug，把握住美好的机会啊。 后悔过去很多事情，事实是不能重来了！做梦都不能想！但我本来就不能做到我表现出来的那么洒脱啊（我尽量都表现的洒脱），我好像失去出去的动力了，感觉如果不能改变现状，我宁愿一直平平淡淡的呆在家里！但还是要锻炼身体的啊（已成习惯，不练练肌肉感觉自己就废了！“告诉他们我还能 ”），奉劝自己啊，不要再做让自己后悔的事情。 我可能就是一个现实和理想大幅度不同的人，想到就很不自信，但又不想承认，有时看到身边的消极人物竟还为我有这种心思而自豪（是我太优秀了吗？别人都不这么想的吗？），我看似活的越来越像想象中的自己了，但我眼界好像越来越窄了，我面对别的人物过于高傲了，过于把自己放在太高的位置了，我面对的都些什么人啊！对于我的不自信我是真的不想承认的啊，不应该啊，我可能对自己要求过于严格 ^ ^。那就继续对自己严格 = =。 我希望啊，未来的生活都会是像我现在想的那样啊，没好啊，充实啊，有一点剧情啊！但现实又告诉我一切都不是尽如人意的，这有别人的原因，但错在自己！尽力把握自己能做到的，然后就是。。。。。该放弃的放弃！今天啊，我就重拾了我过去喜欢写怪文的习惯，但以前的找不到了= =。","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"感想","slug":"感想","permalink":"https://meandni.com/tags/感想/"},{"name":"人生","slug":"人生","permalink":"https://meandni.com/tags/人生/"}]},{"title":"推荐一下Typora：极致简洁的markdown编辑器","slug":"2018-09-12-typora","date":"2018-09-12T02:32:42.000Z","updated":"2019-01-03T13:44:55.793Z","comments":true,"path":"2018/09/12/1011/","link":"","permalink":"https://meandni.com/2018/09/12/1011/","excerpt":"","text":"typora 官网：https://typora.io/ 如果你还不了解 Markdown 及相关背景知识，可以参见： 《认识与入门 Markdown》 《解决作者们的焦虑：7 款优秀 Markdown 编辑工具推荐》 然而看看市面上现在比较流行的 Markdown 编辑器，都基本采用了「写字」和「预览」相分离的策略，无论是像 Mou 这样将窗口左右排列，还是像 Typed 一样两种状态需要切换显示，都似乎离 Markdown 的初衷渐行渐远：优雅可控的格式是为了让文字本身更易读。然而，在实际使用的时候，由于文字的输入源和文字的输出源是割裂的，这件事情本身就显得不纯粹，再加上众多 Markdown 编辑器始终没有着手解决表格、代码等格式的编辑，也使 Markdown 变得不那么优雅。是的，如果你用 Markdown 原生格式去编辑过一个表格，你应该懂我的 看看 Typora 是怎么解决这个问题的无意中发现了 Typora 这款 Markdown 编辑器。第一眼看上去它就像任何一款 Markdown 编辑器的同类，尤其是 Mou，但再看一眼，你就发现，它是如此的不同。 因为它将「写字」和「预览」这两件事情合并了，你输入的地方，也是输出的地方，即现在很流行的 WYSIWYG（What You See Is What You Get）。其实转念一想，这不就是回到了 Office Word 嘛，只不过编辑文本时不用再去工具栏上点选，一切的格式都能通过符号来控制。 用 Typora 官方的介绍视频，你就懂这一切是多么的自然。没错，所有的行内元素（如加粗、斜体）都会根据当前是否在编辑态而智能地在编辑态和预览态切换，而区块级元素（如标题、列表）则会在按下 Enter 后即时渲染，不能再次编辑。 一切都变得如此干净、纯粹。 当然，Typora 的强大之处不仅仅在于颠覆了 Markdown 编辑器传统的交互模式，它还引入了一系列强大的功能，一起看看吧。 Typora中MarkDown的使用官网演示地址：https://support.typora.io/Markdown-Reference/ 最大的特点应该就是即时预览，我主要觉得非常简洁漂亮！ 我自己在博客中的测试 没有完成 已完成 first second Hashes shshh Here is the text of the footnote. Pandoc的安装与使用官网地址： https://support.typora.io/Install-and-Use-Pandoc/","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://meandni.com/tags/markdown/"},{"name":"软件","slug":"软件","permalink":"https://meandni.com/tags/软件/"}]},{"title":"《The Modern Javascript Tutorial》：javascript中的\"this\"","slug":"2018-12-25-javascrpt-this","date":"2018-09-08T03:25:47.000Z","updated":"2019-01-03T15:17:09.574Z","comments":true,"path":"2018/09/08/f1a1/","link":"","permalink":"https://meandni.com/2018/09/08/f1a1/","excerpt":"","text":"对象方法与 “this”对象通常被用来表示真实世界中的实体，比如用户、订单等等： 1234let user = &#123; name: \"John\", age: 30&#125;; 另外，在现实世界中，用户可以操作：从购物车中挑选某物、登录、注销等。 在 JavaScript 中，操作通过属性中的函数来表示。 方法示例刚开始，我们来让 user 说 hello： run123456789101112let user = &#123; name: \"John\", age: 30&#125;;*!*user.sayHi = function() &#123; alert(\"Hello!\");&#125;;*/!*user.sayHi(); // Hello! 这里我们使用函数表达式创建了函数，并将其指定给对象的 user.sayHi 属性。 随后我们调用它。用户现在可以说话了！ 作为对象属性的函数称之为方法。 那么，现在 user 对象有了一个 sayHi 方法。 当然我们也可以使用预先定义的函数作为方法，就像这样： run123456789101112131415let user = &#123; // ...&#125;;*!*// 首先声明function sayHi() &#123; alert(\"Hello!\");&#125;;// 然后将其作为一个方法user.sayHi = sayHi;*/!*user.sayHi(); // Hello! header123当我们在代码中用对象表示实体时，这就是所谓的[面向对象编程](https://en.wikipedia.org/wiki/Object-oriented_programming)，简称为 &quot;OOP&quot;。OOP 是一门很大的学问，也是一门有其本身乐趣的学问。怎样选择合适的实体？如何组织它们之间的交互？这就是架构，有很多关于此方面的书，例如 E.Gamma、R.Helm、R.Johnson 和 J.Vissides 所著的《设计模式：可复用面向对象软件的基础》、G.Booch 所著的《面向对象分析与设计》等等。在后面的 &lt;info:object-oriented-programming&gt; 一章中，我们将会触及这个主题的浅层内容。 方法简写在对象字面量中，有一种更短的（声明）方法的语法： 12345678910111213141516// 这些对象作用一样let user = &#123; sayHi: function() &#123; alert(\"Hello\"); &#125;&#125;;// 方法简写看起来更好，对吧？let user = &#123;*!* sayHi() &#123; // 与 \"sayHi: function()\" 一样*/!* alert(\"Hello\"); &#125;&#125;; 如所示，我们可以省略 &quot;function&quot; 只写了 sayHi()。 说实话，这种表示法还是有些不同。与对象集成有关的细微差别（稍后将会介绍），但现在它们无关紧要。在几乎所有的情况下，较短的语法是最好的。 方法中的 “this”对象方法需要访问对象中的存储的信息完成其工作是很常见的。 举个例子，user.sayHi() 中的代码可能需要用到 user 的 name 属性。 为了访问该对象，方法中可以使用 this 关键字。 this 的值就是在点之前的这个对象，即调用该方法的对象。 举个例子： run12345678910111213let user = &#123; name: \"John\", age: 30, sayHi() &#123;*!* alert(this.name);*/!* &#125;&#125;;user.sayHi(); // John 在这里 user.sayHi() 执行过程中，this 的值是 user。 技术上讲，也可以在不使用 this 的情况下，通过外部变量名来引用它： 1234567891011let user = &#123; name: \"John\", age: 30, sayHi() &#123;*!* alert(user.name); // \"user\" 替代 \"this\"*/!* &#125;&#125;; 但这样的代码是不可靠的。如果我们将 user 复制给另一个变量。例如 admin = user，并赋另外的值给 user，那么它将访问到错误的对象。 如下所示： run1234567891011121314151617let user = &#123; name: \"John\", age: 30, sayHi() &#123;*!* alert( user.name ); // 导致错误*/!* &#125;&#125;;let admin = user;user = null; // 覆盖让其更易懂admin.sayHi(); // 噢哟！在 sayHi() 使用了旧的变量名。错误！ 如果在 alert 中以 this.name 替换 user.name，那么代码就会正常运行。 “this” 不受限制在 JavaScript 中，”this” 关键字与大多数其他编程语言中的不同。首先，它可以用于任何函数。 这样的代码没有语法错误： 123function sayHi() &#123; alert( *!*this*/!*.name );&#125; this 是在运行时求值的。它可以是任何值。 例如，从不同的对象中调用同一个函数可能会有不同的 “this” 值： run12345678910111213141516171819let user = &#123; name: \"John\" &#125;;let admin = &#123; name: \"Admin\" &#125;;function sayHi() &#123; alert( this.name );&#125;*!*// 在两个对象中使用的是相同的函数user.f = sayHi;admin.f = sayHi;*/!*// 它们调用时有不同的 this 值。// 函数内部的 \"this\" 是点之前的这个对象。user.f(); // John (this == user)admin.f(); // Admin (this == admin)admin['f'](); // Admin（使用点或方括号语法来访问这个方法，都没有关系。） 实际上，我们可以在没有任何对象的情况下调用函数： run12345function sayHi() &#123; alert(this);&#125;sayHi(); // undefined 在这种情况下，严格模式下的 this 值为 undefined。如果我们尝试访问 this.name，将会出现错误。 在非严格模式（没有使用 use strict）的情况下，this 将会是全局对象（浏览器中的 window，我们稍后会进行讨论）。&quot;use strict&quot; 可以修复这个历史行为。 请注意，通常在没有对象的情况下使用 this 的函数调用是不常见的，会（导致）编程错误。如果函数中有 this，那么通常意味着它是在对象上下文环境中被调用的。 header1234567如果你来自其他的编程语言，那么你可能熟悉『绑定 `this`』的概念。在对象定义的方法中，`this` 总是指向该对象。在 JavaScript 中，`this` 是『自由』的，它的值是在调用时进行求值的，它的值并不取决于方法声明的位置，而是（取决）于在『点之前』的是什么对象。在运行时对 `this` 求值的这个想法有其优缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性给错误留下了余地。这里我们的立场并不是要评判编程语言的这个想法的好坏，而是要了解怎样使用它，如何趋利避害。 内部：引用类型​header123本文介绍一个进阶的主题，来更好地理解一些特殊情况。如果你想学得更快，这部分你可以跳过或过后来读。 『复杂』的方法调用可能会失去 this，比如： run123456789101112let user = &#123; name: \"John\", hi() &#123; alert(this.name); &#125;, bye() &#123; alert(\"Bye\"); &#125;&#125;;user.hi(); // John (the simple call works)*!*// 现在我们要判断 name 属性，来决定调用 user.hi 或是 user.bye。(user.name == \"John\" ? user.hi : user.bye)(); // Error!*/!* 最后一行中有一个三元运算符，它要判断是 user.hi 或 user.bye。在这种情况下，结果会是 user.hi。 该方法立即被括号 () 调用。但它无效。 你可以看到该调用导致了错误，因为调用中的 &quot;this&quot; 为 undefined。 这样是正确的（对象点方法）： 1user.hi(); 这样没有效果（对方法求值）： 1(user.name == \"John\" ? user.hi : user.bye)(); // 错误！ 原因是什么？如果我们想了解为什么会这样，那么我们要深入理解 obj.method() 调用的原理。 仔细看，我们可能注意到 obj.method() 语句中有两个操作符。 首先，点 &#39;.&#39; 取得这个 obj.method 属性。 其后的括号 () 调用它。 那么，this 是如何从第一部分传递到第二部分的呢？ 如果把这些操作分离开，那么 this 肯定会丢失： run12345678910let user = &#123; name: \"John\", hi() &#123; alert(this.name); &#125;&#125;*!*// 将赋值与方法调用拆分为两行let hi = user.hi;hi(); // 错误，因为 this 未定义*/!* 这里 hi = user.hi 把函数赋值给变量，其后的最后一行是完全独立的，所以它没有 this。 为了让 user.hi() 有效，JavaScript 用一个技巧 —— 这个 &#39;.&#39; 点返回的不是一个函数, 而是一种特殊的[引用类型]的值(https://tc39.github.io/ecma262/#sec-reference-specification-type). 引用类型是一种『规范中有的类型』。我们不能明确地指定它，但是可以在语言内部使用。 引用类型的值是三点的结合 (base, name, strict)，如下： base 是对象。 name 是属性。 当 use strict 生效，strict 为真。 user.hi 属性访问的值不是函数，而是引用类型的值。在严格模式下，user.hi 是： 12// 引用类型值(user, \"hi\", true) 当在引用类型上用 () 调用时，它们接收到这个对象和它的方法的所有信息，并且设定正确的 this 值（这里等于 user）。 hi = user.hi 赋值等其他的操作，将引用类型作为一个整体丢弃，只获取 user.hi（一个函数）的值进行传递。因此，进一步操作『失去』了 this（值）。 所以如果直接使用点 obj.method() 或方括号语法 obj[method]()（它们在这里并无差别）调用函数，那么作为结果，this 值会以正确的方式进行传递。 箭头函数没有自己的 “this”箭头函数有些特别：它们没有自己的 this。如果我们在这样的函数中引用 this，this 值取决于外部『正常的』函数。 举个例子，这里的 arrow() 使用的 this 来自外部的 user.sayHi() 方法： run123456789let user = &#123; firstName: \"Ilya\", sayHi() &#123; let arrow = () =&gt; alert(this.firstName); arrow(); &#125;&#125;;user.sayHi(); // Ilya 这是箭头函数的一个特征，当我们并不想要一个独立的 this 值，反而想从外部上下文中获取时，它很有用。在后面的章节 info:arrow-functions 中我们将更深入地介绍箭头函数。 总结 存储在对象中函数称之为『方法』。 对象执行方法进行『操作』，比如 object.doSomething()。 方法可以将该对象引用为 this。 this 的值是在运行时求值的。 函数声明使用的 this 只有等到调用时才会有值。 函数可以在对象之间进行共用。 当函数使用『方法』语法 object.method() 调用时，调用过程中的 this 总是指向 object。 请注意箭头函数有些特别：它们没有 this。在箭头函数内部访问的都是来自外部的 this 值。","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://meandni.com/tags/javascript/"},{"name":"读书","slug":"读书","permalink":"https://meandni.com/tags/读书/"}]},{"title":"《The Modern Javascript Tutorial》：javascript递归函数的分析","slug":"2018-12-25-javascript-recursion","date":"2018-09-07T03:25:47.000Z","updated":"2019-01-03T15:17:22.098Z","comments":true,"path":"2018/09/07/f1a1/","link":"","permalink":"https://meandni.com/2018/09/07/f1a1/","excerpt":"","text":"递归和堆栈 我们回到函数，深入研究一下。 我们的第一个主题是递归。 如果你不是刚接触编程，那么你可能已经很熟悉它，可以跳过这一章了。 递归是一种编程模式，用于一个任务可以被分割为多个相似的更简单的任务的场景。或者用于一个任务可以被简化为一个容易的行为加上更简单的任务变体。或者像我们随后会看到的，用来处理特定类型的数据结构。 当一个函数解决一个任务时，在该过程中它可以调用很多其它函数。那么当一个函数调用自身时，就称其为递归。 两种思考方式简单起见，我们写一个函数 pow(x, n)，它可以计算 x 的 n 次方，即用 x 乘以自身 n 次。 123pow(2, 2) = 4pow(2, 3) = 8pow(2, 4) = 16 有两种实现方式。 迭代思路：for 循环： run123456789101112function pow(x, n) &#123; let result = 1; // 在循环中用 x 乘以 result for (let i = 0; i &lt; n; i++) &#123; result *= x; &#125; return result;&#125;alert( pow(2, 3) ); // 8 递归思路：简化任务，调用自身： run123456789function pow(x, n) &#123; if (n == 1) &#123; return x; &#125; else &#123; return x * pow(x, n - 1); &#125;&#125;alert( pow(2, 3) ); // 8 注意递归方式完全不相同。 当 pow(x, n) 被调用时，执行分为两个分支： 12345 if n==1 = x /pow(x, n) = \\ else = x * pow(x, n - 1) 如果 n == 1，所有事情都会很简单，这叫做递归的基础，因为它立即得到显而易见的结果：pow(x, 1) 等于 x。 否则，我们可以用 x * pow(x, n - 1) 表示 pow(x, n)。在数学里，可能会这么写 xn = x * xn-1。这叫做一个递归步骤：我们将任务转变为更简单的行为（x 的乘法）和更简单的同类任务调用（更小的 n 给 pow）。后面步骤继续简化直到 n 等于 1。 我们也可以说 pow 递归的调用自身 直到 n == 1。","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://meandni.com/tags/javascript/"},{"name":"读书","slug":"读书","permalink":"https://meandni.com/tags/读书/"}]},{"title":"跨平台方案：Weex使用小记","slug":"2018-09-08-use-weex","date":"2018-08-22T03:25:47.000Z","updated":"2019-01-03T14:34:55.709Z","comments":true,"path":"2018/08/22/3a79/","link":"","permalink":"https://meandni.com/2018/08/22/3a79/","excerpt":"","text":"还记得刚接触ReactNative时有多激动，此前还没想过能有这么强大的框架，后来对看多了混合开发的资料发现这真的已经成了不许要学会的一个技能，于是招收学习起了React，效果不尽人意，可能是先接触了Vue，已经习惯了它的开放方式，对React总是用不习惯，有些知识点甚至不能掌握更别提做出格完整的项目了，于是就我而言React是没有Vue好用的，之前也在网上找过Vue有没有类似Native的框架，了解了NativeScript发现国内用的人比较少，文档都是全英文（虽并无大碍）但坑太多我自己安装起来也比较吃力，于是有放弃了对VueNative的探索，继续学习RN～～～还算入门了，但就是不习惯啊，偶然想到另一门技术Weex，之前看到过但并不知道它是基于Vue的跨平台框架于是没去学习，了解后发现它原来是阿里开发的，它原来是基于Vue的，虽然用的人还不多，但他原来有那么全的中文文档～～～卧槽。。。。 用所有的东西都是有坑的，但我坚信对我而言国内人开发的东西会极大的亲近我们，于是开始了搭建环境、学习的旅程。 环境搭建相比NativeScript，Weex简直是水到渠成，web端一下子就能运行起来，而且代码是那么的熟悉，Vue在心中已有一席之地，想想以后的混合开发会是如此的畅快！ 安装脚手架 npm install weex-toolkit -g 创建项目 weex create awesome-app 运行项目 123cd awesome-appnpm installnpm start Weex android端运行 添加特定平台的项目 12weex platform add iosweex platform add android 官网都说了： 由于网络环境的不同，安装过程可能需要一些时间，请耐心等待。如果安装失败，请确保自己的网络环境畅通。 所以昨晚在这一步发生的错误应该就是网络的原因，今天早上网络流畅点就好了 在本地机器上打开 Android 和 iOS 项目 123weex run iosweex run androidweex run web 下面是运行中遇到的一些问题： studio3.0对其的不兼容坑都在这里了，我想这些坑原因应该都来自于Android Studio 3.0新版特性 无法下载到版本所对应的gradle Error: Error: Command failed: ./gradlew assembleDebugException in thread “main” javax.net.ssl.SSLException: Connection has been shutdown: javax.net.ssl.SSLException: SSL peer shut down incorrectly 原因：由于网络被墙，无法下载到版本所对应的gradle。 解决：将app/platforms/android/gradle/wrapper下的distributionUrl改为本地对应的版本号 distributionUrl Gradle自定义apk名称报错 Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=debug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl. AS 3.0之前自定义apk名称： 12345678applicationVariants.all &#123; variant -&gt; variant.outputs.each &#123; output -&gt; def fileName = &quot;$&#123;variant.versionName&#125;_release.apk&quot; def outFile = output.outputFile if (outFile != null &amp;&amp; outFile.name.endsWith(&apos;.apk&apos;)) &#123; output.outputFile =newFile(outFile.parent, fileName) &#125; &#125; 修改为：12345678applicationVariants.all &#123; variant -&gt; variant.outputs.all &#123; output -&gt; // each 改为 all def fileName = &quot;$&#123;variant.versionName&#125;_release.apk&quot; def outFile = output.outputFile if (outFile != null &amp;&amp; outFile.name.endsWith(&apos;.apk&apos;)) &#123; outputFileName = fileName // output.outputFile 改为 outputFileName &#125; &#125; 把each修改为all，然后通过outputFileName修改生成apk的名称。此外，AS 3.0后打包完，除了apk包文件，还会多一个 output.json 参数文件。 /awesome-app/platforms/android/app 学习！下面就开始各种使用它了！","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"混合开发","slug":"混合开发","permalink":"https://meandni.com/tags/混合开发/"}]},{"title":"尝试翻译React英文文档","slug":"2018-07-17-tran-reactdoc","date":"2018-08-17T12:58:00.000Z","updated":"2019-01-03T13:37:29.684Z","comments":true,"path":"2018/08/17/react-tutorial/","link":"","permalink":"https://meandni.com/2018/08/17/react-tutorial/","excerpt":"","text":"虽然发现React是有中文网的，但是奈何一直打不开中文文档，即使我已经开了VPN，自己现在又习惯性的想看更专业的官方文档，国内的一些教程实在看不下去了，所以想着自己尝试翻译他的文档，帮助一些和我一样有强迫症患者的朋友。 官网就是官网，教程真的是牛逼，react教程分为两种，实践教程（practical tutorial）和概念教程（guide to main concepts），都很好，我这里就先翻译实践教程吧！ 实践教程(practical tutorial)在开始实践教程之前(Before We Start the Tutorial)在这个教程中，我们将做一个小游戏，你千万别被吓到，你怎么这么快就能做一个游戏了，我要说的是，你并不是在做一个很厉害的游戏，我们也只是给你一个这样的机会，在这个方法的教程中,你将会学习到用react构建基础的应用并且熟练地掌握它，它也将让你充分理解React。 建议这个教程被设计为那些想要通过亲自动手边做边学的人，如果你更喜欢去一步一步学习概念，你可以去另一套教程里，一会发现这两套教程可以互补的学习，大家可以取他们各自的长处！ 这个教程可以被分为下面几个部分 教程构建 将给你一个如何开始这个教程的指导 概述 将教你一些React的基础内容：components, props和state 小游戏项目 将教你一些在React开发过程中最通用的一些技能 历史回流 将让你对React有更深的理解，体会到React强大之处 你没必要立刻掌握以上所有的部分，你可以尝试先去学你能学会的部分，没必要纠结是否自己基础是否太薄弱。 有时跟着教程拷贝代码是好事，但我们还是建议你去一步一步的去手写，那将帮助你更好的记忆和更深的理解！ 我们在做什么（这部分可以不看吧，有点啰嗦了）在这个教程中，我们将为你展示如何去用React开发一个交互的小游戏。 你可以先看一下游戏做出后最后的成果，如果你不能理解代码，还不熟悉它如何做出来的，别担心，这个教程的目标就是教会你这些东西，不然你可以走了。 我们建议你继续教程之前先熟悉一下这个游戏，你可以注意到在游戏面板的右面有一个数字列表，他将记录你游戏的每一步，并且可以实时更新。 熟悉了之后就Ok了，下面我们一下来开发这个游戏！ 前提条件(Prerequisites)我们假设你已经熟练掌握了HTMl和JavaScript了，虽然有其他语言基础也可以，但那些基础还是要掌握的，我们也假设你熟悉了一些例如functions`objectsarrays这些Js里面的概念，并且有一些对classes`有一定的理解。 如果你需要去重新学习JavaScript，我们推荐阅读这个教程，注意：我们也使用一些ES6的语法，例如尖头函数、classes、let、const，你可以使用Babel REPL核实ES6代码规范。 教程构建(Setup for the Tutorial)有两个方法学习这个教程： 你可以在浏览器中再现编写代码 也可以搭建本地的开发环境 方法一：浏览器在线编写这是很快的入门方法 首先打开Starter Code,这里还没有把游戏显示出来，我们可以在这里在线编辑学习。 确定是痛这种方法的话，我们可以跳过下面第二种方法去看概述部分了 方法二： 搭建本地开发环境虽然我们这个教程中并不需要这种方法，但他也很重要！（This is completely optional and not required for this tutorial!，原文显得很不重要一样） 这个方法需要更大的工作量，但是可以在本地选择自己的编辑器来学习本套课程，下面是步骤： 确定你已经安装了Node.Js 跟着下面安装指导来创建新的工程 12npm install -g create-react-appcreate-react-app my-app 删除新项目中src/目录下所有的文件（文件夹保留） 12cd my-apprm -f src/* 在src/文件夹中新建一个名为index.css的文件，用于编写css代码 在src/文件夹中新建一个名为index.js的文件，用于编写js代码 在index.js中添加下面三行代码 123import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import &apos;./index.css&apos;; 现在你可以运行npm start，浏览器打开http://localhost:3000，你可以看见一个空的页面,这样，本地的开发环境就搭建好了。 寻求帮助如果你在构建环境的过程中有什么问题，可以直接找我～～～ 原文If you get stuck, check out the community support resources. In particular, Reactiflux Chat is a great way to get help quickly. If you don’t receive an answer, or if you remain stuck, please file an issue, and we’ll help you out. 概述(Overview)React是什么？(What Is React?)React是开源、高效、灵活的Js框架，它能够让你李用一个个脱离的片段（被叫做组件components）来构建出一个复杂的UI。 React有一部分不同种类的组件，但是它们都继承自React.Component 12345678910111213141516class ShoppingList extends React.Component &#123; render() &#123; return ( &lt;div className=\"shopping-list\"&gt; &lt;h1&gt;Shopping List for &#123;this.props.name&#125;&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Instagram&lt;/li&gt; &lt;li&gt;WhatsApp&lt;/li&gt; &lt;li&gt;Oculus&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ); &#125;&#125;// Example usage: &lt;ShoppingList name=\"Mark\" /&gt; 我们可以看到类似XML标签的代码，我们使用组件去告诉React我们将在屏幕中显示什么，当我们数据改变React也将高效的更新这个组件。 这里，ShoppingList是一个组件（ React component class, or React component type）,组件里包含一些参数，叫做props(propertie的缩写),并且通过render方法返回一个试图层（hierarchy of views）. render方法返回一个你想在网页中看到的“描述”，React拿到这个“描述”并且展示出来，大部分React开发者使用一种特殊的语法“JSX”来写render的内容，极其方便。在JSX语法中&lt;div /&gt;句式被转换成React.createElement(&#39;div&#39;)，这样我们可以在JS代码中方便的写入类似HTML标签的语法了。React.createElement(&#39;div&#39;)写render内容Example:1234return React.createElement('div', &#123;className: 'shopping-list'&#125;, React.createElement('h1', /* ... h1 children ... */), React.createElement('ul', /* ... ul children ... */)); 完整的例子（可见，很繁琐） 如果你想了解更多createElement()的内容，请查阅API文档，在实际开发中我们不常使用到它，而是用更为方便的JSX语法。 JSX自带Javascript的全部功能，你可以把任何JS表达式放在JSX的代码块中，每个React组件是一个Js对象，你可以在其中使用一些变量和函数。 上面的ShoppingList组件仅仅在DOM树中渲染了&lt;div /&gt;和&lt;li /&gt;，你也可以渲染出自定义的React组件。比如说，你可以通过写&lt;ShoppingList /&gt;来显示ShoppingList的全部内容，每个React组件被独立的分离，这样，你就可以通过简单的组件构建出一个复杂的UI界面。 浏览 the Starter Code（Inspecting the Starter Code）如果你是在线学习编写代码，打开这个代码页面：Starter Code,如果你是在本地编写代码，打开src/index.js 这个代码是你以后进行后续编写的基础，我们已经提供了CSS样式，你可以专注于学习React来开发这个游戏。 通过阅读这段代码，你会发现其中有三个组件： Square Board Game Square组件仅渲染了单个的&lt;button&gt;，Board组件渲染了9个Square组件，Game组件渲染了一个board组件和一个以后将要修改了占位代码，现在还没有能够交互的组件。 通过props传递数据(Passing Data Through Props)趁热打铁！让我们试着将数据从Board组件传递到Square组件。 在Board组件的renderSquare方法中，修改代码让一个叫做value的变量传递到Square组件。 1234class Board extends React.Component &#123; renderSquare(i) &#123; return &lt;Square value=&#123;i&#125; /&gt;; &#125; 将Squarerender方法中的{/* TODO */}修改为{this.props.value}：123456789class Square extends React.Component &#123; render() &#123; return ( &lt;button className=\"square\"&gt; &#123;this.props.value&#125; &lt;/button&gt; ); &#125;&#125; 修改之前界面是： 界面视图 修改之后，你将可以在每个Square组件中看见一个数字： 界面视图 看此部分完整代码 祝贺你！你已经成功将数据从Board组件(父zujian)传递到Square组件(子组件)，props传递是React中从父到子的数据流动的方式。 制作一个交互组件(Making an Interactive Component)功能：当我们点击时，能将Square组件中的值变为“X”。首先，改变组件中的render()方法：123456789class Square extends React.Component &#123; render() &#123; return ( &lt;button className=\"square\" onClick=&#123;function() &#123; alert('click'); &#125;&#125;&gt; &#123;this.props.value&#125; &lt;/button&gt; ); &#125;&#125; 现在点击一个Square组件，你将看到一个alert框。 Note为了保存类型并且避免对this不能理解，我们将使用尖头函数的句式（arrow function syntax）123456789class Square extends React.Component &#123; render() &#123; return ( &lt;button className=\"square\" onClick=&#123;() =&gt; alert('click')&#125;&gt; &#123;this.props.value&#125; &lt;/button&gt; ); &#125;&#125; 请看这边onClick={() =&gt; alert(&#39;click&#39;)}，我们传递一个函数作为onClick的参数，这个函数将在我们点击的时候执行，大家通常会忘了写() =&gt;而写成onClick={alert(&#39;click&#39;)}，如果这样的话，大家可以看看会发生什么。 下一步，我们想要让Square“记住”我们点击的行为，并且在其中放入一个“X”字符。要让组件“记住”，我们要用到state React组件可以通过在构造函数中设置this.state来定义state，this.state被认为是React组件中被私有的。让我们在this.state中储存当前Square的value，点击的时候能瘦改变。 首先，写一个构造函数去初始化state 12345678910111213141516class Square extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; value: null, &#125;; &#125; render() &#123; return ( &lt;button className=\"square\" onClick=&#123;() =&gt; alert('click')&#125;&gt; &#123;this.props.value&#125; &lt;/button&gt; ); &#125;&#125; Note在JavaScript classes中，当定义一个子类的时候，你需要去调用super方法。所有的React组件的类都应该有一个constructor并在其中调用super(props) 现在我们将改变Square的render方法去实现当我们点击时展示当前的state的值： 在&lt;button&gt;标签中用this.state.value替换this.props.value 用() =&gt; this.setState({value: &#39;X&#39;})替换() =&gt; alert() 将className和onClick各占一行以便更好的阅读 改变以后&lt;button&gt;标签应该是这样： 12345678910111213141516171819class Square extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; value: null, &#125;; &#125; render() &#123; return ( &lt;button className=\"square\" onClick=&#123;() =&gt; this.setState(&#123;value: 'X'&#125;)&#125; &gt; &#123;this.state.value&#125; &lt;/button&gt; ); &#125;&#125; 通过调用Square中的onClick方法执行this.setState方法，我们高速React去重新渲染这个组件。更新之后Square的this.state.value将变成X，这样，如果我们点击任何一个Square，将会在其中展示一个&#39;X&#39;。 当我们在组件中调用setState方法，React也将自动更新其中的子组件。 看此部分完整代码 开发工具(Developer Tools)这里介绍的是React在Chrome和Firefox的插件，先不翻译 完成小游戏项目有了这个游戏的基础框架，要完成这个游戏，我们需要去瓤“X”和“O”能够在游戏面板中交替下棋，并且需要一个方法去决定谁是赢家。 State目前，每个Square组件都有一个游戏的State，为了一决定谁是赢家，我们将在同一个地方构建每一个Square的value。 我们可以认为Board仅仅是询问了每一个Square的state，尽管在React中这种方法可以实现，我们也不将使用，因为它这样代码将相对难以理解，更容易产生bug并且难遇维护。储存游戏状态更好的方法是在父组件Board中储存，而不是在每一个Square中储存，Board组件通过传递props能够告诉每一个Square该去显示什么,就像我们之前用props传递数据一样。 去采集来自数个子组件的数据，或者让两个子组件相互通信交流，你需要去共享父组件的state，父组件可以用props向下传递state；这能让子组件随着父组件相互同步。 当React组件被复用时，将state拿到父组件中在React中是一个常见的方法，让我们把握这个机会试一下！我们在Board增加一个构造方法，并且初始化state，包含含有9个null的数组，这9个null分别对应9个方块： 12345678910111213141516171819202122232425262728293031323334353637class Board extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; squares: Array(9).fill(null), &#125;; &#125; renderSquare(i) &#123; return &lt;Square value=&#123;i&#125; /&gt;; &#125; render() &#123; const status = 'Next player: X'; return ( &lt;div&gt; &lt;div className=\"status\"&gt;&#123;status&#125;&lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(0)&#125; &#123;this.renderSquare(1)&#125; &#123;this.renderSquare(2)&#125; &lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(3)&#125; &#123;this.renderSquare(4)&#125; &#123;this.renderSquare(5)&#125; &lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(6)&#125; &#123;this.renderSquare(7)&#125; &#123;this.renderSquare(8)&#125; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125; 当我们以后填满棋盘，我们将看到类似： 12345[ &apos;O&apos;, null, &apos;X&apos;, &apos;X&apos;, &apos;X&apos;, &apos;O&apos;, &apos;O&apos;, null, null,] Board组件中的renderSquare方法现在是这样的；123renderSquare(i) &#123; return &lt;Square value=&#123;i&#125; /&gt;; &#125; 之前我们传递0-8九个数字给每一个方块，不同于之前的步骤，我们用Square中state中的值“X”代替数字，这是我们数字不能显示的原因。 我们现在将再次使用props传递机制。我们现在修改Board去指导每个独立的方块。我们已经定义了squares数组，然后我们将修改Board的renderSquare的方法去拿到它：123renderSquare(i) &#123; return &lt;Square value=&#123;this.state.squares[i]&#125; /&gt;; &#125; 看此部分完整代码 每个方块现在将接收到一个valueprop，它将是&#39;X&#39;,&#39;O&#39;,null其中一个值。 下一步，我们需要去对方块点击后发生的事件做改变，Board组件现在决定那写方块被填满，我们需要去用一个方法让Square组件能够更新Board的state，既然state对每个组件来说是私有的。我们不能直接在square组件中修改Board组件的state。 为了维持state的私有性，我们需要从Board向下传递一个方法，这个方法将被调用。下面我们改变Board组件中的renderSquare方法： 12345678renderSquare(i) &#123; return ( &lt;Square value=&#123;this.state.squares[i]&#125; onClick=&#123;() =&gt; this.handleClick(i)&#125; /&gt; );&#125; Note 为了更好的可读性，我们把元素分行，并且我们加了一个圆括号解决能让return之后架上分号，并且结束代码。 下载我们从Board传了两个props给Square:value和onClick. 这个onClick是一个Square组件被点击时可以调用的一个方法，我们对Square做如下的工作： 在Square的render方法中，用this.props.value替换this.state.value 在Square的render方法中，用this.props.onClick()替换this.setState() 删除Square的constructor，因为它不再用来跟踪游戏的状态了 改变之后的Square组件： 123456789101112 class Square extends React.Component &#123; render() &#123; return ( &lt;button className=&quot;square&quot; onClick=&#123;() =&gt; this.props.onClick()&#125; &gt; &#123;this.props.value&#125; &lt;/button&gt; ); &#125;&#125; 当一个方块被点击，Board传过来的onClick方法将被调用，下面来看看为什么： 在&lt;button&gt;组件中的onClick属性通知React创建了一个点击事件的监听事件 当按钮被点击，React将调用在Square组件的render()方法中的onClick事件处理器 这个事件处理器再调用this.props.onClick()，这个Square的onClick属性具体的内容在Board组件中 既然Board组件传递onClick={() =&gt; this.handleClick(i)}给Square，那个这个Square当被点击时调用的是this.handleClick(i) 我们还没定义handleClick()方法，那么我们就开始干咯。 NoteDOM下的&lt;button&gt;元素的onClick内置的组件. 对于像Square一样的自定义标签，命名是取决于你的, 我们完全可以将Square的onClick属性或者Board的handleClick方法命名成别的名字. 然而在React中为一些代表事件的属性使用on[Event]这样的命名格式是一种约定而成的习惯, handle[Event]作为处理方法的名称也是这个道理。 当我们试着去点击一个方块，应该会报一个error，因为我们还没定义handleClick方法，我们现在开始在Board class中写handleClick方法: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Board extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; squares: Array(9).fill(null), &#125;; &#125; handleClick(i) &#123; const squares = this.state.squares.slice(); squares[i] = 'X'; this.setState(&#123;squares: squares&#125;); &#125; renderSquare(i) &#123; return ( &lt;Square value=&#123;this.state.squares[i]&#125; onClick=&#123;() =&gt; this.handleClick(i)&#125; /&gt; ); &#125; render() &#123; const status = 'Next player: X'; return ( &lt;div&gt; &lt;div className=\"status\"&gt;&#123;status&#125;&lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(0)&#125; &#123;this.renderSquare(1)&#125; &#123;this.renderSquare(2)&#125; &lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(3)&#125; &#123;this.renderSquare(4)&#125; &#123;this.renderSquare(5)&#125; &lt;/div&gt; &lt;div className=\"board-row\"&gt; &#123;this.renderSquare(6)&#125; &#123;this.renderSquare(7)&#125; &#123;this.renderSquare(8)&#125; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125; 看此部分完整代码 这样之后，我们又能够点击且填满方块了，但是现在它们的状态state被储存在Board组件而不是每个独立的Square组件中。当我们Boare的state改变，Square组件将自动重新渲染，让所有方块的状态的状态state都放在Board组件中将让我们之后的开发中可以决定谁是赢家。 既然方块组件（Square components）不再有state，它仅仅做的是接收来自棋盘组件（Board component）的values值并且当被点击时通知棋盘组件。在React中，方块组件现在叫做被控制组件，棋盘完全控制着它们。 注意在handleClick中，我们调用了.slice()来创建一个squares数组的copy，然后修改它而不是直接修改之前就存在的，下面我们将解释我们为什么要这么做。 为什么不变性如此重要（Why Immutability Is Important） 在之前的代码中，我们推荐使用.slice()去创建squares数组的copy，然后修改它而不是直接修改之前就存在的。我们现在讨论为何不改变之前的数组，为何踏实重要的。 我们知道，改变数据有两个方法一个是直接改变数据的值，还有就是修改一个数据拷贝的副本。 直接改变数据 123 var player = &#123;score: 1, name: 'Jeff'&#125;;player.score = 2;// Now player is &#123;score: 2, name: 'Jeff'&#125; 间接得到改变的数据 1234567var player = &#123;score: 1, name: 'Jeff'&#125;;var newPlayer = Object.assign(&#123;&#125;, player, &#123;score: 2&#125;);// Now player is unchanged, but newPlayer is &#123;score: 2, name: 'Jeff'&#125;// Or if you are using object spread syntax proposal, you can write:// var newPlayer = &#123;...player, score: 2&#125;; 复杂的功能变简单 不可变性是复杂的功能实现起来变得更简单，在之后的教程中，我们将实现一个time travel的功能，可以允许我们玩游戏的过程中回顾之前的步骤，还有悔棋，这是这个游戏的普通需求，避免去直接改变数据让我们能够完好无损回到游戏游戏的历史界面。 观察变动 数据直接改变后想去观察是困难的，这种观察房需要可变的对象与之前他本身的的各种copy版本进行比较 观察改变在不变的对象的情况下是更容易的，如果当前的不变对象与之前的是不同的，那么说明已经改变。 决定何时重新加载 不可变的主要益处设市能够帮助我们构建一个pure components(纯净的组件？？)，不便数据可以是我们易于发现改变何时发生并且帮助我们决定何时重新加载。 你可以学习更多关于shouldComponentUpdate()并且通过阅读Optimizing Performance学习如何构建pure components 功能组件（Functional Components）我们现在让Square变成一个functional component. 在react中，功能组件（functional component）是一个写组件的简单方式，其中仅包含一个render方法，并且没有自己的state，代替定义一个继承自React.Component的类，我们可以写一个function，props作为参数，并且返回我们想要渲染的内容，比起组件类功能组件是单调的，许多简单的组件可以写成这样的形式： 1234567function Square(props) &#123; return ( &lt;button className=\"square\" onClick=&#123;props.onClick&#125;&gt; &#123;props.value&#125; &lt;/button&gt; );&#125; 我们将其中的两处this.props替换成this.props 看此部分完整代码 Note当我们将Square修改成功能组件时，我们也将onClick={() =&gt; this.props.onClick()}变为更简短的onClick={props.onClick}（不要缺少两边的括号），在类中我们需要用箭头函数去使用正确的this的值，但是在功能组件中我们无需担心this。 轮流下棋我们现在需要去改善游戏中一个明显的bug：“O”不能在标记在棋盘中 我们将默认第一步下“X”，我们可以在Board组件中修改这个默认值: 12345678class Board extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; squares: Array(9).fill(null), xIsNext: true, &#125;; &#125; 每次一个玩家移动完，xIsNext(boolean)将被迅速取反曲决定下一步的玩家，并且游戏的state将被保存，我们修改Board的handleClick方法，加入xIsNext：12345678handleClick(i) &#123; const squares = this.state.squares.slice(); squares[i] = this.state.xIsNext ? 'X' : 'O'; this.setState(&#123; squares: squares, xIsNext: !this.state.xIsNext, &#125;); &#125; 通过这个改变，“X”和“O”可轮流切换，让我们也改变在棋盘状态文本status去展示下一步的玩家： 12345render() &#123; const status = &apos;Next player: &apos; + (this.state.xIsNext ? &apos;X&apos; : &apos;O&apos;); return ( // the rest has not changed 做了这个改变之后，你的棋盘组件应该是这样的：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Board extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; squares: Array(9).fill(null), xIsNext: true, &#125;; &#125; handleClick(i) &#123; const squares = this.state.squares.slice(); squares[i] = this.state.xIsNext ? &apos;X&apos; : &apos;O&apos;; this.setState(&#123; squares: squares, xIsNext: !this.state.xIsNext, &#125;); &#125; renderSquare(i) &#123; return ( &lt;Square value=&#123;this.state.squares[i]&#125; onClick=&#123;() =&gt; this.handleClick(i)&#125; /&gt; ); &#125; render() &#123; const status = &apos;Next player: &apos; + (this.state.xIsNext ? &apos;X&apos; : &apos;O&apos;); return ( &lt;div&gt; &lt;div className=&quot;status&quot;&gt;&#123;status&#125;&lt;/div&gt; &lt;div className=&quot;board-row&quot;&gt; &#123;this.renderSquare(0)&#125; &#123;this.renderSquare(1)&#125; &#123;this.renderSquare(2)&#125; &lt;/div&gt; &lt;div className=&quot;board-row&quot;&gt; &#123;this.renderSquare(3)&#125; &#123;this.renderSquare(4)&#125; &#123;this.renderSquare(5)&#125; &lt;/div&gt; &lt;div className=&quot;board-row&quot;&gt; &#123;this.renderSquare(6)&#125; &#123;this.renderSquare(7)&#125; &#123;this.renderSquare(8)&#125; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125; 宣布赢家既然我们已经展示了下一步玩家是哪一位，我们也应当展示游戏何时分出胜负并且结束游戏，我们可以通过增加下面这个帮助函数放在文件尾部实现这个功:12345678910111213141516171819function calculateWinner(squares) &#123; const lines = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], ]; for (let i = 0; i &lt; lines.length; i++) &#123; const [a, b, c] = lines[i]; if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123; return squares[a]; &#125; &#125; return null;&#125; 我们将在Board的render中调用这个calculateWinner(squares)函数去何时游戏时候分出胜负，如果有玩家胜出了我们将展示出来，例如“Winner: X”，我们将在Board的render方法中替换status通过下面的代码： 1234567891011render() &#123; const winner = calculateWinner(this.state.squares); let status; if (winner) &#123; status = &apos;Winner: &apos; + winner; &#125; else &#123; status = &apos;Next player: &apos; + (this.state.xIsNext ? &apos;X&apos; : &apos;O&apos;); &#125; return ( // the rest has not changed 我们现在可以修改Board的handleClick函数，如果有玩家赢了游戏，去提前return去不响应点击事件。 1234567891011handleClick(i) &#123; const squares = this.state.squares.slice(); if (calculateWinner(squares) || squares[i]) &#123; return; &#125; squares[i] = this.state.xIsNext ? &apos;X&apos; : &apos;O&apos;; this.setState(&#123; squares: squares, xIsNext: !this.state.xIsNext, &#125;); &#125; [看此部分完整代码]看此部分完整代码 祝贺你！你现在已经差不多完成了这个游戏了，并且你也已经学习到了react的基础知识，到这里，你可能已经是一个真正的赢家了！！！","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"自学","slug":"自学","permalink":"https://meandni.com/tags/自学/"},{"name":"react","slug":"react","permalink":"https://meandni.com/tags/react/"},{"name":"翻译","slug":"翻译","permalink":"https://meandni.com/tags/翻译/"}]},{"title":"跨平台方案：将ReactNative集成到现有原生应用(Android)","slug":"2018-08-15-reactnative-android","date":"2018-08-15T11:59:00.000Z","updated":"2019-01-03T14:35:04.988Z","comments":true,"path":"2018/08/15/integration-with-existing-apps/","link":"","permalink":"https://meandni.com/2018/08/15/integration-with-existing-apps/","excerpt":"","text":"如果你正准备从头开始制作一个新的应用，那么 React Native 会是个非常好的选择。但如果你只想给现有的原生应用中添加一两个视图或是业务流程，React Native 也同样不在话下。只需简单几步，你就可以给原有应用加上新的基于 React Native 的特性、画面和视图等。 具体的步骤根据你所开发的目标平台不同而不同。 核心概念把 React Native 组件集成到 Android 应用中有如下几个主要步骤： 配置好 React Native 依赖和项目结构。 创建 js 文件，编写 React Native 组件的 js 代码。 在应用中添加一个RCTRootView。这个RCTRootView正是用来承载你的 React Native 组件的容器。 启动 React Native 的 Packager 服务，运行应用。 验证这部分组件是否正常工作。 开发环境准备首先按照开发环境搭建教程来安装 React Native 在 Android 平台上所需的一切依赖软件。 1. 配置项目目录结构首先创建一个空目录用于存放 React Native 项目，然后在其中创建一个/android子目录，把你现有的 Android 项目拷贝到/android子目录中。 2. 安装 JavaScript 依赖包在项目根目录下创建一个名为package.json的空文本文件，然后填入以下内容： 12345678&#123; &quot;name&quot;: &quot;MyReactNativeApp&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot; &#125;&#125; 示例中的version字段没有太大意义（除非你要把你的项目发布到 npm 仓库）。scripts中是用于启动 packager 服务的命令。 接下来我们使用 yarn 或 npm（两者都是 node 的包管理器）来安装 React 和 React Native 模块。请打开一个终端/命令提示行，进入到项目目录中（即包含有 package.json 文件的目录），然后运行下列命令来安装： 1$ yarn add react-native 或1$ npm install --save react-native 这样默认会安装最新版本的 React Native，同时会打印出类似下面的警告信息（你可能需要滚动屏幕才能注意到）： warning “react-native@0.52.2“ has unmet peer dependency “react@16.2.0“. 这是正常现象，意味着我们还需要安装指定版本的 React： 1$ yarn add react@16.2.0 或1$ npm install --save react 注意必须严格匹配警告信息中所列出的版本，高了或者低了都不可以。 如果你使用多个第三方依赖，可能这些第三方各自要求的 react 版本有所冲突，此时应优先满足react-native所需要的react版本。其他第三方能用则用，不能用则只能考虑选择其他库。 所有 JavaScript 依赖模块都会被安装到项目根目录下的node_modules/目录中（这个目录我们原则上不复制、不移动、不修改、不上传，随用随装）。 把node_modules/目录记录到.gitignore文件中（即不上传到版本控制系统，只保留在本地）。 把 React Native 添加到你的应用中配置 maven在你的 app 中 build.gradle 文件中添加 React Native 依赖: 12345dependencies &#123; compile &apos;com.android.support:appcompat-v7:23.0.1&apos; ... compile &quot;com.facebook.react:react-native:+&quot; // From node_modules&#125; 如果想要指定特定的 React Native 版本，可以用具体的版本号替换 +，当然前提是你从 npm 里下载的是这个版本。 在项目的 build.gradle 文件中为 React Native 添加一个 maven 依赖的入口，必须写在 “allprojects” 代码块中: 12345678910allprojects &#123; repositories &#123; maven &#123; // All of React Native (JS, Android binaries) is installed from npm url &quot;$rootDir/../node_modules/react-native/android&quot; &#125; ... &#125; ...&#125; 确保依赖路径的正确！以免在 Android Studio 运行 Gradle 同步构建时抛出 “Failed to resolve: com.facebook.react:react-native:0.x.x” 异常。 配置权限接着，在 AndroidManifest.xml 清单文件中声明网络权限: &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; 如果需要访问 DevSettingsActivity 界面（即开发者菜单），则还需要在 AndroidManifest.xml 中声明: &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt; 开发者菜单一般仅用于在开发时从 Packager 服务器刷新 JavaScript 代码，所以在正式发布时你可以去掉这一权限。 代码集成Now we will actually modify the native Android application to integrate React Native. React Native 组件我们首先要写的是”High Score”（得分排行榜）的 JavaScript 端的代码。 1. 创建一个index.js文件首先在项目根目录中创建一个空的index.js文件。(注意在 0.49 版本之前是 index.android.js 文件) index.js是 React Native 应用在 Android 上的入口文件。而且它是不可或缺的！它可以是个很简单的文件，简单到可以只包含一行require/import导入语句。本教程中为了简单示范，把全部的代码都写到了index.js里（当然实际开发中我们并不推荐这样做）。 2. 添加你自己的 React Native 代码在index.js中添加你自己的组件。这里我们只是简单的添加一个&lt;Text&gt;组件，然后用一个带有样式的&lt;View&gt;组件把它包起来。 12345678910111213141516171819202122232425import React from \"react\";import &#123; AppRegistry, StyleSheet, Text, View &#125; from \"react-native\";class HelloWorld extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;Hello, World&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;var styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: \"center\" &#125;, hello: &#123; fontSize: 20, textAlign: \"center\", margin: 10 &#125;&#125;);AppRegistry.registerComponent(\"MyReactNativeApp\", () =&gt; HelloWorld); 3. 配置权限以便开发中的红屏错误能正确显示如果你的应用会运行在 Android 6.0（API level 23）或更高版本，请确保你在开发版本中有打开悬浮窗(overlay)权限。你可以在代码中使用Settings.canDrawOverlays(this);来检查。之所以需要这一权限，是因为我们会把开发中的报错显示在悬浮窗中（仅在开发阶段需要）。在 Android 6.0（API level 23）中用户需要手动同意授权。具体请求授权的做法是在onCreate()中添加如下代码。其中OVERLAY_PERMISSION_REQ_CODE是用于回传授权结果的字段。 1234567891011private final int OVERLAY_PERMISSION_REQ_CODE = 1; // 任写一个值...if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123; if (!Settings.canDrawOverlays(this)) &#123; Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + getPackageName())); startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE); &#125;&#125; Finally, the onActivityResult() method (as shown in the code below) has to be overridden to handle the permission Accepted or Denied cases for consistent UX. 12345678910@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; if (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123; if (!Settings.canDrawOverlays(this)) &#123; // SYSTEM_ALERT_WINDOW permission not granted &#125; &#125; &#125;&#125; 掌握核心科技：ReactRootView我们还需要添加一些原生代码来启动 React Native 的运行时环境并让它开始渲染。首先需要在一个Activity中创建一个ReactRootView对象，然后在这个对象之中启动 React Native 应用，并将它设为界面的主视图。 如果你想在安卓 5.0 以下的系统上运行，请用 com.android.support:appcompat 包中的 AppCompatActivity 代替 Activity 。 1234567891011121314151617181920212223242526272829public class MyReactActivity extends Activity implements DefaultHardwareBackBtnHandler &#123; private ReactRootView mReactRootView; private ReactInstanceManager mReactInstanceManager; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mReactRootView = new ReactRootView(this); mReactInstanceManager = ReactInstanceManager.builder() .setApplication(getApplication()) .setBundleAssetName(\"index.android.bundle\") .setJSMainModulePath(\"index\") .addPackage(new MainReactPackage()) .setUseDeveloperSupport(BuildConfig.DEBUG) .setInitialLifecycleState(LifecycleState.RESUMED) .build(); // 注意这里的MyReactNativeApp必须对应“index.js”中的 // “AppRegistry.registerComponent()”的第一个参数 mReactRootView.startReactApplication(mReactInstanceManager, \"MyReactNativeApp\", null); setContentView(mReactRootView); &#125; @Override public void invokeDefaultOnBackPressed() &#123; super.onBackPressed(); &#125;&#125; If you are using a starter kit for React Native, replace the “HelloWorld” string with the one in your index.js file (it’s the first argument to the AppRegistry.registerComponent() method). 如果你使用的是 Android Studio , 可以使用Alt + Enter快捷键来自动为 MyReactActivity 类补上缺失的 import 语句。注意BuildConfig应该是在你自己的包中自动生成，无需额外引入。千万不要从com.facebook...的包中引入！ 我们需要把 MyReactActivity 的主题设定为 Theme.AppCompat.Light.NoActionBar ，因为里面有许多组件都使用了这一主题。 12345&lt;activity android:name=\".MyReactActivity\" android:label=\"@string/app_name\" android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\"&gt;&lt;/activity&gt; 一个ReactInstanceManager可以在多个 activities 或 fragments 间共享。 You will want to make your own ReactFragment or ReactActivity and have a singleton holder that holds a ReactInstanceManager. When you need the ReactInstanceManager (e.g., to hook up the ReactInstanceManager to the lifecycle of those Activities or Fragments) use the one provided by the singleton. 下一步我们需要把一些 activity 的生命周期回调传递给ReactInstanceManager： 1234567891011121314151617181920212223242526272829@Overrideprotected void onPause() &#123; super.onPause(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostPause(this); &#125;&#125;@Overrideprotected void onResume() &#123; super.onResume(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostResume(this, this); &#125;&#125;@Overrideprotected void onDestroy() &#123; super.onDestroy(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostDestroy(this); &#125; if (mReactRootView != null) &#123; mReactRootView.unmountReactApplication(); &#125;&#125; 我们还需要把后退按钮事件传递给 React Native： 12345678@Override public void onBackPressed() &#123; if (mReactInstanceManager != null) &#123; mReactInstanceManager.onBackPressed(); &#125; else &#123; super.onBackPressed(); &#125;&#125; This allows JavaScript to control what happens when the user presses the hardware back button (e.g. to implement navigation). When JavaScript doesn’t handle the back button press, your invokeDefaultOnBackPressed method will be called. By default this simply finishes your Activity. Finally, we need to hook up the dev menu. By default, this is activated by (rage) shaking the device, but this is not very useful in emulators. So we make it show when you press the hardware menu button (use Ctrl + M if you’re using Android Studio emulator): 12345678@Overridepublic boolean onKeyUp(int keyCode, KeyEvent event) &#123; if (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != null) &#123; mReactInstanceManager.showDevOptionsDialog(); return true; &#125; return super.onKeyUp(keyCode, event);&#125; 现在 activity 已就绪，可以运行一些 JavaScript 代码了。 测试集成结果You have now done all the basic steps to integrate React Native with your current application. Now we will start the React Native packager to build the index.bundle package and the server running on localhost to serve it. 1. 运行 Packager运行应用首先需要启动开发服务器（Packager）。你只需在项目根目录中执行以下命令即可： 1$ yarn start 2. 运行你的应用保持 packager 的窗口运行不要关闭，然后像往常一样编译运行你的 Android 应用(在命令行中执行./gradlew installDebug或是在 Android Studio 中编译运行)。 编译执行一切顺利进行之后，在进入到 MyReactActivity 时应该就能立刻从 packager 中读取 JavaScript 代码并执行和显示： Screenshot 在 Android Studio 中打包你也可以使用 Android Studio 来打 release 包！其步骤基本和原生应用一样，只是在每次编译打包之前需要先执行 js 文件的打包(即生成离线的 jsbundle 文件)。具体的 js 打包命令如下： 1$ react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/com/your-company-name/app-package-name/src/main/assets/index.android.bundle --assets-dest android/com/your-company-name/app-package-name/src/main/res/ 注意把上述命令中的路径替换为你实际项目的路径。如果 assets 目录不存在，则需要提前自己创建一个。 然后在 Android Studio 中正常生成 release 版本即可！ 我遇到的问题就是一进入ReactNative的Activity就闪退到前面的页面，后查看log发现1java.lang.UnsatisfiedLinkError: couldn&apos;t find DSO to load: libreactnativejni 解决方法在两处添加配置：app#build.gradle 123456defaultConfig &#123; //... ndk &#123; abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; &#125; &#125;","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"},{"name":"混合开发","slug":"混合开发","permalink":"https://meandni.com/tags/混合开发/"},{"name":"reactnative","slug":"reactnative","permalink":"https://meandni.com/tags/reactnative/"}]},{"title":"读《第一行代码》","slug":"2018-08-14-onecode","date":"2018-08-14T14:21:37.000Z","updated":"2019-01-03T13:34:01.652Z","comments":true,"path":"2018/08/14/0/","link":"","permalink":"https://meandni.com/2018/08/14/0/","excerpt":"","text":"读书感受本着查漏补缺的态度，刚来学校随手拿到一本书看了起来，就这么一下子看完了，有一个感觉，技术之类的书还要是有点基础看的，不仅效率高而且获益确实不少。 也没有都看，前面已经接触太多的东西就没去看了，大概以后还会当工具书来翻一翻，主要是从我之前没接触的广播看起，看着看着发现之前不会的东西居然掌握了，着实让我倍感自信，有了继续看的动力，加上手头正在做一个自己感觉还算比较满意的项目，一下子感觉自己离大神的距离又近了一点（😆）。我是真的极其讨厌“大神”这个词，第一个原因是看过太多所谓的大神其实只是貌似或者说是被别人吹出来的，再说这个领域本来就没有多少真正大神，我暂时是这么想的，可能因为我的眼界还太窄，你不可能什么都会，就算你会的很多你也应该谦虚一点，所以我要谦虚一点😀。 用我前阵子非常喜欢说的话，就是学习编程跟学习英语其实没什么两样，你学了你就会了，你看过一样东西并且去练习了你自然也就会了，没什么天赋之类的（这也是我暂时的想法），只有你有没有兴趣！ 我都不知道我要不要做这种程序员工作，兴趣我是有的，不然也不会投入到连吃饭上厕所的时间都忘记了，但有时真的是觉得我不想做这种办公室农民,极其违背我的本意～～我的本意其实可能是能有不劳而获，把梦里想的直接变现的东西。 知识点广播（Broadcast）接收广播（BroadReceiver）看前面两小节，通俗的理解也不过是监听了某某事件（比如网络是否连接），之后发生一个动作。 网络变化这个广播通过IntentFilter的addAction方法拿到，然后通过regosterReceiver方法将该广播和我们自定义的广播接收器绑定起来。 这里的广播界接收器regosterReceiver就是我们写的一个类，广播发出来之后，我们的类实例化出来的对象的onReceive方法会被自动调用，这里我们想干嘛就干嘛了。 发送广播方法类似于打开另一个Activity，用的是intent实例化的时候将自定义的广播传入参数，然后调用sendBroadcast方法。 其他的就是光波可以跨应用程序传播（当然，有时为了安全可以使用本地广播），有序广播可以设置优先权选择那个接收者先执行 最佳实践这本书比较好的就是每一个章节的最佳实践，知识点全面而且有点难度、实践性比较大。 这一章是实现App登陆后发送广播强制退出登陆的功能，这里不多说了～ 手机多媒体通知（Notification）","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://meandni.com/tags/Android/"},{"name":"读书","slug":"读书","permalink":"https://meandni.com/tags/读书/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-14T03:27:16.000Z","updated":"2018-09-02T06:16:39.000Z","comments":true,"path":"2018/08/14/3eeb/","link":"","permalink":"https://meandni.com/2018/08/14/3eeb/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 博客迁至Hexo，托管在GitHub上，以后可以开始舒适的学作之旅了～ Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"简单验证Adapter每次显示部分数据的原理","slug":"2018-04-16-verification-adapter","date":"2018-04-16T14:24:40.000Z","updated":"2019-01-03T13:42:25.238Z","comments":true,"path":"2018/04/16/2fd8/","link":"","permalink":"https://meandni.com/2018/04/16/2fd8/","excerpt":"","text":"在Adapter将数据转换成View时，加入日志的标志 Log.i(&quot;yangjiakang&quot;, &quot;yanhjiakang&quot;+position); 运行后查看日志只打印出8个数据 验证成功！这只是验证成功的结果，为了更好的理解Adapter的工作原理，接下来探究的是不用adapter只是动态在布局文件中添加View达到和Adapter一样的效果： 大致的想法是在java代码中准备一些数据填充到自己自定义的一个布局中并将这个布局转换成view然后Add到一个空的容器中，循环实现动态添加。 12345678910111213141516private void setupViews() &#123; LinearLayout xLayout = (LinearLayout) findViewById(R.id.list); educationsLayout.removeAllViews(); for (Object o : os) &#123; View view = getLayoutInflater().inflate(R.layout.item, null); setupView(view, o); xLayout.addView(view); &#125; &#125;private void setupView(View view, final Object o) &#123; ((TextView) view.findViewById(R.id.item1)) .setText(&quot;someText1&quot;）; ((TextView) educationView.findViewById(R.id.item2)) .setText(&quot;someText2&quot;）; &#125; 这种方法仅仅将需要显示的列表显示出来，数据基数不大时勉强可以使用，但是如果","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"}]},{"title":"java中的Json数据格式的使用——Gson","slug":"2018-04-16-java-gson","date":"2018-04-16T07:07:32.000Z","updated":"2019-01-03T13:47:29.653Z","comments":true,"path":"2018/04/16/2c96/","link":"","permalink":"https://meandni.com/2018/04/16/2c96/","excerpt":"","text":"基本使用：1234567891011public static void public static void main(String\\[\\] args) &#123; Project project; Gson gson = new Gson(); String jsonString = gson.toJson(project); //将对象转换成Json字符串 //使用jsonString Type type new TypeToken&lt;Project&gt;()&#123;&#125;.getType; //保存对象类型 project projectFromJson = gson.fromJson(jsonString, type) //使用projectFromJson&#125; 在android中使用Json转换的封装类（将数据放在SharedPreferences中）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ModelUtils &#123; private static Gson gsonForSerialization = new GsonBuilder() .registerTypeAdapter(Uri.class, new UriSerializer()) .create(); private static Gson gsonForDeserialization = new GsonBuilder() .registerTypeAdapter(Uri.class, new UriDeserializer()) .create(); private static String PREF_NAME = \"models\"; public static void save(Context context, String key, Object object) &#123; SharedPreferences sp = context.getApplicationContext().getSharedPreferences( PREF\\_NAME, Context.MODE\\_PRIVATE); String jsonString = gsonForSerialization.toJson(object); sp.edit().putString(key, jsonString).apply(); &#125; public static &lt;T&gt; T read(Context context, String key, TypeToken&lt;T&gt; typeToken) &#123; SharedPreferences sp = context.getApplicationContext().getSharedPreferences( PREF\\_NAME, Context.MODE\\_PRIVATE); try &#123; return gsonForDeserialization.fromJson(sp.getString(key, \"\"), typeToken.getType()); &#125; catch (JsonSyntaxException e) &#123; e.printStackTrace(); return null; &#125; &#125; private static class UriSerializer implements JsonSerializer&lt;Uri&gt; &#123; @Override public JsonElement serialize(Uri src, Type typeOfSrc, JsonSerializationContext context) &#123; return new JsonPrimitive(src.toString()); &#125; &#125; private static class UriDeserializer implements JsonDeserializer&lt;Uri&gt; &#123; @Override public Uri deserialize(JsonElement src, Type srcType, JsonDeserializationContext context) throws JsonParseException &#123; return Uri.parse(src.getAsString()); &#125; &#125;&#125; SharedPreferences基本：1234567891011What’s Shared Preferences? - It’s basically a key-value storage 写：// How to write to Shared Preferences// How to write to Shared PreferencesSharedPreferences sp = context.getSharedPreferences(PREF\\_NAME, Context.MODE\\_PRIVATE);// We need an Editor object to make preference changes.SharedPreferences.Editor editor = sp.edit();editor.putString(\"key\", \"value\");editor.putInt(\"int\", 10);// Save the edits!editor.apply(); 读：12345// How to read from Shared PreferencesSharedPreferences sp = context.getSharedPreferences(PREF\\_NAME, Context.MODE\\_PRIVATE);// It’s like a hash map! Easy!String value = sp.getString(\"key\", \"\");int intValue = sp.getInt(\"int\", 0);","categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"},{"name":"java","slug":"java","permalink":"https://meandni.com/tags/java/"},{"name":"gson","slug":"gson","permalink":"https://meandni.com/tags/gson/"}]},{"title":"每天的新东西（Android篇）","slug":"2018-04-15-android-newthings","date":"2018-04-15T07:00:57.000Z","updated":"2019-01-03T13:43:32.494Z","comments":true,"path":"2018/04/15/1a8e/","link":"","permalink":"https://meandni.com/2018/04/15/1a8e/","excerpt":"","text":"没有知道新东西，知道再多也没用！ 之前学的《零基础入门Android语法与界面》之后的效果是做成了一个跑步App的UI项目，没有一丝自豪感，知道自己真的只是入门而已，做项目的过程属于盲目的复制粘贴，甚至连Adapter、listview等基础控件的概念都不了解，导致根本没有一点成就感，同时也给我一种毫无意义的感觉。 但我也感动欣慰，就是在做这个UI项目的时候遇到的各种问题都解决了，该实现的功能页也都实现了，之前一直以为会做不出来，最后也呈现出一个满意的结果～～就是说，好歹吧东西做出来了！ 现在开这篇文章就是要即娘做点有意义的事情了，不能迷茫，先把大方向把握住，一个Android、一个Web、还有就是算法，说来清晰，却也很杂，但目前能做到的就是不要有急功近利的想法，那样真的毫无意义！ 给自己的具体任务： 1、大二把寒假里用php写了博客写好2、学完android数据写出一个写文章、类似博客的App3、复习软考资料～～～ 2018/4/15Android上常见度量单位px（像素）：屏幕上的点，绝对长度，与硬件相关。in（英寸）：长度单位。mm（毫米）：长度单位。pt（磅）：1/72英寸，point。dp（与密度无关的像素）：一种基于屏幕密度的抽象单位。在每英寸160点的显示器上，1dp = 1px。 dip：Density-independent pixel,同dp相同。sp：在dp的基础上，还与比例无关，个人理解为是一个矢量图形单位。 用sp设置文字大小。Then what’s “hdpi”, “xhdpi”, etc? ldpi (low) ~120dpi mdpi (medium) ~160dpi hdpi (high) ~240dpi xhdpi (extra-high) ~320dpi xxhdpi (extra-extra-high) ~480dpi xxxhdpi (extra-extra-extra-high) ~640dpi 安卓中一个图片由多个版本，在不同屏幕像素密集程度给到不同的图片，也可以用矢量图表示图片。 将布局文件转换成View将layout转换成树给view；View view = getLayoutInflater().inflate(R.layout.layout, null); 创建菜单时渲染xmlgetMenuInflater().inflate(R.menu.menu\\_edit, menu); 给actionbar加后退按键getSupportActionBar().setDisplayHomeAsUpEnabled(true); 点击后退功能：12345678public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case android.R.id.home: finish(); return true; &#125; return super.onOptionsItemSelected(item); &#125; 进入activity后获得结果123protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); &#125; 1startActivityForResult(intent, REQ\\_CODE\\_EDUCATION_EDIT); 将数据传送给另一个Activity，将数据放在intent中发送Intent resultIntent = new Intent(); resultIntent.putExtra(KEY_EDUCATION, education);putExtra方法不能保存java本身没有的数据类型（如：education）Why do we need to use Intent to carry the Education object?Let’s first see how does Intent carry the Education object. 方法： 类实现Parcelable接口setResult(Activity.RESULT_OK, resultIntent); java：日期与可传递字符串的互相转换：1234567891011121314151617public class DateUtils &#123; private static SimpleDateFormat sdf = new SimpleDateFormat(\"MM/yyyy\", Locale.getDefault()); public static String dateToString(Date date) &#123; return sdf.format(date); &#125; public static Date stringToDate(String dateString) &#123; try &#123; return sdf.parse(dateString); &#125; catch (ParseException e) &#123; e.printStackTrace(); return new Date(0); &#125; &#125;&#125;","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"},{"name":"java","slug":"java","permalink":"https://meandni.com/tags/java/"}]},{"title":"我做第一个Android项目的过程！","slug":"2018-03-25-first-android","date":"2018-03-25T06:06:02.000Z","updated":"2019-01-03T13:45:18.016Z","comments":true,"path":"2018/03/25/d89c/","link":"","permalink":"https://meandni.com/2018/03/25/d89c/","excerpt":"","text":"","categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"}]},{"title":"JQuery定时自动消失提示框/弹出框(转)","slug":"2018-03-02-jquery-use","date":"2018-03-02T05:43:08.000Z","updated":"2019-01-03T15:20:02.193Z","comments":true,"path":"2018/03/02/3079/","link":"","permalink":"https://meandni.com/2018/03/02/3079/","excerpt":"","text":"在表单提交中，不论成功与否，好的体验都应该有弹出提示，效果： 在页面中央显示提示，1.5秒后消失，不影响页面的正常布局。 1 HTML代码HTML代码显示提示内容，放在页面中任何位置。 &lt;div class=&quot;alert&quot;&gt;&lt;/div&gt; 2 CSS代码弹出框参考了 Bootstrap 的样式：123456789101112131415161718192021222324252627282930313233343536.alert &#123; display: none; position: fixed; top: 50%; left: 50%; min-width: 200px; margin-left: -100px; z-index: 99999; padding: 15px; border: 1px solid transparent; border-radius: 4px;&#125;.alert-success &#123; color: #3c763d; background-color: #dff0d8; border-color: #d6e9c6;&#125;.alert-info &#123; color: #31708f; background-color: #d9edf7; border-color: #bce8f1;&#125;.alert-warning &#123; color: #8a6d3b; background-color: #fcf8e3; border-color: #faebcc;&#125;.alert-danger &#123; color: #a94442; background-color: #f2dede; border-color: #ebccd1;&#125; 3 Javascript代码首先，加载JQuery，然后用下面代码实现1.5秒后淡出效果： $(&#39;.alert&#39;).html(&#39;操作成功&#39;).addClass(&#39;alert-success&#39;).show().delay(1500).fadeOut(); 如果不想在HTML中加DIV，可以直接用JS把DIV添加到页面中，如下： $(&#39;&lt;div&gt;&#39;).appendTo(&#39;body&#39;).addClass(&#39;alert alert-success&#39;).html(&#39;操作成功&#39;).show().delay(1500).fadeOut(); 一般情况下，如果这个方式使用得很频繁，写成函数可以提高复用： /** * 弹出式提示框，默认1.2秒自动消失 * @param message 提示信息 * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info * @param time 消失时间 */123456789101112var prompt = function (message, style, time)&#123; style = (style === undefined) ? 'alert-success' : style; time = (time === undefined) ? 1200 : time; $('&lt;div&gt;') .appendTo('body') .addClass('alert ' + style) .html(message) .show() .delay(time) .fadeOut();&#125;; // 成功提示1234var success_prompt = function(message, time)&#123; prompt(message, 'alert-success', time);&#125;; // 失败提示1234var fail_prompt = function(message, time)&#123; prompt(message, 'alert-danger', time);&#125;; // 提醒1234var warning_prompt = function(message, time)&#123; prompt(message, 'alert-warning', time);&#125;; // 信息提示1234var info_prompt = function(message, time)&#123; prompt(message, 'alert-info', time);&#125;; 此文章为转载！ 正好现在想提升JS和JQuery 转自：https://www.awaimai.com/1627.html","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://meandni.com/tags/javascript/"},{"name":"JQuery","slug":"JQuery","permalink":"https://meandni.com/tags/JQuery/"},{"name":"Web","slug":"Web","permalink":"https://meandni.com/tags/Web/"}]},{"title":"Android Studio 使用方法总结（不定期更新）","slug":"2018-03-01-android-studio","date":"2018-03-01T06:32:04.000Z","updated":"2019-01-03T13:46:29.065Z","comments":true,"path":"2018/03/01/d010/","link":"","permalink":"https://meandni.com/2018/03/01/d010/","excerpt":"","text":"代码格式化Windows: Ctrl + Alt +L (Ctrl +Shift+F 无效) (亲测,和qq热键冲突,我的解决方式是把qq除捕获屏幕外的热键全部设置为无) Mac: option+command+L 自动将字符串加入String.xml Windows:Alt+Enter Mac:option+Enter 提取临时变量 快捷键： Mac：option+command+V 非快捷键： 右击 -&gt; refator -&gt; Extract -&gt; variable 变量重构，即转换为常量快捷键： Mac：COM+OPT+C 进入指定文件、父类 Mac：按住COM 鼠标点击相应文件！ 捕获异常及其他句型Mac：opt+command+T","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"Android Studio","slug":"Android-Studio","permalink":"https://meandni.com/tags/Android-Studio/"},{"name":"Android","slug":"Android","permalink":"https://meandni.com/tags/Android/"},{"name":"软件使用","slug":"软件使用","permalink":"https://meandni.com/tags/软件使用/"}]},{"title":"自学Php+jquery框架+bootstrap框架搭建博客！","slug":"2018-02-27-php-blog","date":"2018-02-27T15:45:48.000Z","updated":"2019-01-03T13:45:32.943Z","comments":true,"path":"2018/02/27/dfa1/","link":"","permalink":"https://meandni.com/2018/02/27/dfa1/","excerpt":"","text":"自己的水平还是有限，回头看看代码，根本没多少是自己写的，大多用的是bootstrap框架的例子！ 本想着自己要把功能搞好就行，却被bootstrap的各种组件爱不释手！死活也要把界面弄的美观一点！（如果能像昨晚想的那样～～就好～～～了）。这下好了一弄就是一夜没睡！一弄就是昼夜颠倒！ 关于心情和过程以后再补，因为现在真的太累了，一天一夜就在边学边做这个，根本没做别的，哎～～苦恼，现直接分析代码！ index.php12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Bootstrap 模板&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;!\\-\\- 引入 Bootstrap --&gt; &lt;link href=\"//apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;script src=\"https://v3.bootcss.com/assets/js/ie-emulation-modes-warning.js\"&gt;&lt;/script&gt; &lt;!\\-\\- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt; &lt;!\\-\\- 注意： 如果通过 file:// 引入 Respond.js 文件，则该文件无法起效果 --&gt; &lt;!--\\[if lt IE 9\\]&gt; &lt;script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"&gt;&lt;/script&gt; &lt;script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"&gt;&lt;/script&gt; &lt;!\\[endif\\]--&gt; &lt;script src=\"//libs.baidu.com/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt; &lt;!\\-\\- 登陆样式 --&gt; &lt;link href=\"css/signin.css\" rel=\"stylesheet\"&gt; &lt;script&gt; $(document).ready(function() &#123; $(\".signin\").click(function() &#123; $(\".form-signin\").fadeIn(); &#125;); $(\".joinin\").click(function() &#123; $(\".form-joinin\").fadeIn(); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\" role=\"navigation\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#example-navbar-collapse\"&gt; &lt;span class=\"sr-only\"&gt;切换导航&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"index.php\"&gt;MEandNI&lt;/a&gt; &lt;/div&gt; &lt;div class=\"collapse navbar-collapse\" id=\"example-navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"joinin\"&gt;&lt;a href=\"joinin.php\"&gt;注册模块&lt;/a&gt;&lt;/li&gt; &lt;li class=\"signin\"&gt;&lt;a href=\"loginin.php\"&gt;登录模块&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;发表模块&lt;/a&gt;&lt;/li&gt; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt; Java &lt;b class=\"caret\"&gt;&lt;/b&gt; &lt;/a&gt; &lt;ul class=\"dropdown-menu\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;jmeter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;EJB&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Jasper Report&lt;/a&gt;&lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;分离的链接&lt;/a&gt;&lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;另一个分离的链接&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=\"container\"&gt; &lt;/div&gt; &lt;!-- /container --&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js \"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js \"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 呃～～～就加了一个表格～～～ join.php123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Bootstrap 模板&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;!\\-\\- 引入 Bootstrap --&gt; &lt;link href=\"//apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;script src=\"https://v3.bootcss.com/assets/js/ie-emulation-modes-warning.js\"&gt;&lt;/script&gt; &lt;script src=\"//libs.baidu.com/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt; &lt;!\\-\\- 登陆样式 --&gt; &lt;link href=\"css/signin.css\" rel=\"stylesheet\"&gt; &lt;script&gt; $(document).ready(function() &#123; $(\".startjoin\").click(function()&#123; var div=$(\".form-joinin\"); div.fadeIn(); div.animate(&#123;width:'500px',opacity:'1'&#125;); div.animate(&#123;width:'330px',opacity:'1'&#125;); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\" role=\"navigation\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#example-navbar-collapse\"&gt; &lt;span class=\"sr-only\"&gt;切换导航&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"index.php\"&gt;MEandNI&lt;/a&gt; &lt;/div&gt; &lt;div class=\"collapse navbar-collapse\" id=\"example-navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active joinin\"&gt;&lt;a href=\"#\"&gt;注册模块&lt;/a&gt;&lt;/li&gt; &lt;li class=\"signin\"&gt;&lt;a href=\"loginin.php\"&gt;登录模块&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;发表模块&lt;/a&gt;&lt;/li&gt; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt; Java &lt;b class=\"caret\"&gt;&lt;/b&gt; &lt;/a&gt; &lt;ul class=\"dropdown-menu\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;jmeter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;EJB&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Jasper Report&lt;/a&gt;&lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;分离的链接&lt;/a&gt;&lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;另一个分离的链接&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=\"startjoin\"&gt; &lt;button type=\"button\" id=\"loadingButton\" class=\"btn btn-primary\" autocomplete=\"off\"&gt;点击唤出注册页面&lt;/button&gt; &lt;/div&gt; &lt;div class=\"container\"&gt; &lt;form id=\"defaultForm\" class=\"form-joinin\" style=\"display: none;\" method=\"POST\" action=\"checkjoin.php\"&gt; &lt;h2 class=\"form-signin-heading\"&gt;Join in&lt;/h2&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"username\" class=\"sr-only\"&gt;UserName&lt;/label&gt; &lt;input type=\"text\" id=\"username\" class=\"form-control\" placeholder=\"输入用户名\" name=\"username\" required &gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"email\" class=\"sr-only\"&gt;Email address&lt;/label&gt; &lt;input type=\"email\" id=\"email\" class=\"form-control\" placeholder=\"输入邮箱地址\" name=\"email\" required&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"password \" class=\"sr-only\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"输入密码\" name=\"password\" required&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"confirmPassword\" class=\"sr-only \"&gt;Password Again&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"confirmPassword\" placeholder=\"输 again \" name=\"confirmPassword\" required&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;div class=\"checkbox\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" value=\"agree\"&gt;同意搞基。 &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;button id=\"#validateBtn\" class=\"btn btn-primary btn-block\" type=\"submit \" onclick=\"checkForm\"&gt;Join in&lt;/button&gt; &lt;/form&gt; &lt;div id=\"checkerror\"&gt; &lt;button type=\"button\" class=\"btn btn-primary\" data-toggle=\"button\"&gt; &lt;?php $err = isset($\\_GET\\['err'\\])?$\\_GET\\['err'\\]:\"\"; switch ($err) &#123; case '1': echo \"用户名已存在！\"; break; case '2': echo \"用户名长度应该在3-30之间！\"; break; case '3': echo \"两次密码不一致！\"; break; case '4': echo \"此邮箱已被注册！\"; break; case '5': echo \"注册成功！\"; break; default: echo \"你看看这里\"; break; &#125; ?&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- /container --&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js \"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js \"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 我都不想吐槽写的过程了！早知道表单验证就用php写的！ 上验证代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?php$username = $_POST\\['username'\\];$email = $_POST\\['email'\\];$password = $_POST\\['password'\\];$confirmpassword = $_POST\\['confirmPassword'\\];if($password != $confirmpassword)&#123; header(\"Location:joinin.php?err=3\");&#125;else&#123; if (strlen($username) &lt; 3 || strlen($username) &gt; 30) &#123; header(\"Location:joinin.php?err=2\"); &#125; else&#123; $host = 'localhost'; $db_user = 'root'; $db_pass = '4688128yang#@!'; $conn = mysql\\_connect($host, $db\\_user, $db_pass); if(! $conn)&#123; die(\"数据库连接失败：\".mysql_error()); &#125; mysql\\_select\\_db(\"meandni\"); $sql_name = \"SELECT UserName FROM users WHERE username = '$username'\"; $sql_email = \"SELECT UserName FROM users WHERE email = '$email'\"; $result\\_name = mysql\\_query($sql\\_name) OR die(\"&lt;br&gt;ERROE:\".mysql\\_error().'语块:'.$sql_name); $result\\_email = mysql\\_query($sql\\_email) OR die(\"&lt;br&gt;ERROE:\".mysql\\_error().'语块:'.$sql_email); if(mysql\\_num\\_rows($result_name))&#123; header(\"Location:joinin.php?err=1\"); &#125;else if (mysql\\_num\\_rows($result_email)) &#123; header(\"Location:joinin.php?err=4\"); &#125;else&#123; $sql_insert =\"insert into users set UserName = '$username', email = '$email', password = '$password'\"; mysql\\_query($sql\\_insert) OR die(\"&lt;br&gt;ERROE:\".mysql\\_error().'语块'.$sql\\_insert); mysql_close(); header(\"Location:joinin.php?err=5\"); &#125; &#125;&#125; ?&gt; 好了、登陆模块和发表模块以后加吧！","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"jqurey","slug":"jqurey","permalink":"https://meandni.com/tags/jqurey/"},{"name":"php","slug":"php","permalink":"https://meandni.com/tags/php/"},{"name":"昼夜颠倒","slug":"昼夜颠倒","permalink":"https://meandni.com/tags/昼夜颠倒/"},{"name":"自学","slug":"自学","permalink":"https://meandni.com/tags/自学/"}]},{"title":"大二寒假、总结！","slug":"2018-02-26-summary","date":"2018-02-26T12:05:17.000Z","updated":"2019-01-03T13:37:47.553Z","comments":true,"path":"2018/02/26/82e4/","link":"","permalink":"https://meandni.com/2018/02/26/82e4/","excerpt":"","text":"占着","categories":[],"tags":[{"name":"寒假","slug":"寒假","permalink":"https://meandni.com/tags/寒假/"},{"name":"总结","slug":"总结","permalink":"https://meandni.com/tags/总结/"}]}]}