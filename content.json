{"meta":{"title":"Joker's Blog","subtitle":null,"description":"个人分享博客","author":"Joker","url":"https://meandni.com"},"pages":[{"title":"About","date":"2018-08-14T06:25:14.000Z","updated":"2018-08-14T06:26:37.000Z","comments":true,"path":"about/index.html","permalink":"https://meandni.com/about/index.html","excerpt":"","text":"个人分享博客介绍页面"},{"title":"","date":"2018-08-14T06:24:40.000Z","updated":"2018-08-14T06:24:40.000Z","comments":true,"path":"categories/index.html","permalink":"https://meandni.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-08-14T06:22:53.000Z","updated":"2018-08-14T06:22:53.000Z","comments":true,"path":"tags/index.html","permalink":"https://meandni.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"将ReactNative集成到现有原生应用(Android)","slug":"integration-with-existing-apps","date":"2018-08-15T11:59:00.000Z","updated":"2018-08-16T09:55:46.000Z","comments":true,"path":"2018/08/15/integration-with-existing-apps/","link":"","permalink":"https://meandni.com/2018/08/15/integration-with-existing-apps/","excerpt":"","text":"如果你正准备从头开始制作一个新的应用，那么 React Native 会是个非常好的选择。但如果你只想给现有的原生应用中添加一两个视图或是业务流程，React Native 也同样不在话下。只需简单几步，你就可以给原有应用加上新的基于 React Native 的特性、画面和视图等。 具体的步骤根据你所开发的目标平台不同而不同。 核心概念把 React Native 组件集成到 Android 应用中有如下几个主要步骤： 配置好 React Native 依赖和项目结构。 创建 js 文件，编写 React Native 组件的 js 代码。 在应用中添加一个RCTRootView。这个RCTRootView正是用来承载你的 React Native 组件的容器。 启动 React Native 的 Packager 服务，运行应用。 验证这部分组件是否正常工作。 开发环境准备首先按照开发环境搭建教程来安装 React Native 在 Android 平台上所需的一切依赖软件。 1. 配置项目目录结构首先创建一个空目录用于存放 React Native 项目，然后在其中创建一个/android子目录，把你现有的 Android 项目拷贝到/android子目录中。 2. 安装 JavaScript 依赖包在项目根目录下创建一个名为package.json的空文本文件，然后填入以下内容： 12345678&#123; &quot;name&quot;: &quot;MyReactNativeApp&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot; &#125;&#125; 示例中的version字段没有太大意义（除非你要把你的项目发布到 npm 仓库）。scripts中是用于启动 packager 服务的命令。 接下来我们使用 yarn 或 npm（两者都是 node 的包管理器）来安装 React 和 React Native 模块。请打开一个终端/命令提示行，进入到项目目录中（即包含有 package.json 文件的目录），然后运行下列命令来安装： 1$ yarn add react-native 这样默认会安装最新版本的 React Native，同时会打印出类似下面的警告信息（你可能需要滚动屏幕才能注意到）： warning “react-native@0.52.2“ has unmet peer dependency “react@16.2.0“. 这是正常现象，意味着我们还需要安装指定版本的 React： 1$ yarn add react@16.2.0 注意必须严格匹配警告信息中所列出的版本，高了或者低了都不可以。 如果你使用多个第三方依赖，可能这些第三方各自要求的 react 版本有所冲突，此时应优先满足react-native所需要的react版本。其他第三方能用则用，不能用则只能考虑选择其他库。 所有 JavaScript 依赖模块都会被安装到项目根目录下的node_modules/目录中（这个目录我们原则上不复制、不移动、不修改、不上传，随用随装）。 把node_modules/目录记录到.gitignore文件中（即不上传到版本控制系统，只保留在本地）。 把 React Native 添加到你的应用中配置 maven在你的 app 中 build.gradle 文件中添加 React Native 依赖: 12345dependencies &#123; compile &apos;com.android.support:appcompat-v7:23.0.1&apos; ... compile &quot;com.facebook.react:react-native:+&quot; // From node_modules&#125; 如果想要指定特定的 React Native 版本，可以用具体的版本号替换 +，当然前提是你从 npm 里下载的是这个版本。 在项目的 build.gradle 文件中为 React Native 添加一个 maven 依赖的入口，必须写在 “allprojects” 代码块中: 12345678910allprojects &#123; repositories &#123; maven &#123; // All of React Native (JS, Android binaries) is installed from npm url &quot;$rootDir/../node_modules/react-native/android&quot; &#125; ... &#125; ...&#125; 确保依赖路径的正确！以免在 Android Studio 运行 Gradle 同步构建时抛出 “Failed to resolve: com.facebook.react:react-native:0.x.x” 异常。 配置权限接着，在 AndroidManifest.xml 清单文件中声明网络权限: &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; 如果需要访问 DevSettingsActivity 界面（即开发者菜单），则还需要在 AndroidManifest.xml 中声明: &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt; 开发者菜单一般仅用于在开发时从 Packager 服务器刷新 JavaScript 代码，所以在正式发布时你可以去掉这一权限。 代码集成Now we will actually modify the native Android application to integrate React Native. React Native 组件我们首先要写的是”High Score”（得分排行榜）的 JavaScript 端的代码。 1. 创建一个index.js文件首先在项目根目录中创建一个空的index.js文件。(注意在 0.49 版本之前是 index.android.js 文件) index.js是 React Native 应用在 Android 上的入口文件。而且它是不可或缺的！它可以是个很简单的文件，简单到可以只包含一行require/import导入语句。本教程中为了简单示范，把全部的代码都写到了index.js里（当然实际开发中我们并不推荐这样做）。 2. 添加你自己的 React Native 代码在index.js中添加你自己的组件。这里我们只是简单的添加一个&lt;Text&gt;组件，然后用一个带有样式的&lt;View&gt;组件把它包起来。 12345678910111213141516171819202122232425import React from \"react\";import &#123; AppRegistry, StyleSheet, Text, View &#125; from \"react-native\";class HelloWorld extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;Hello, World&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;var styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: \"center\" &#125;, hello: &#123; fontSize: 20, textAlign: \"center\", margin: 10 &#125;&#125;);AppRegistry.registerComponent(\"MyReactNativeApp\", () =&gt; HelloWorld); 3. 配置权限以便开发中的红屏错误能正确显示如果你的应用会运行在 Android 6.0（API level 23）或更高版本，请确保你在开发版本中有打开悬浮窗(overlay)权限。你可以在代码中使用Settings.canDrawOverlays(this);来检查。之所以需要这一权限，是因为我们会把开发中的报错显示在悬浮窗中（仅在开发阶段需要）。在 Android 6.0（API level 23）中用户需要手动同意授权。具体请求授权的做法是在onCreate()中添加如下代码。其中OVERLAY_PERMISSION_REQ_CODE是用于回传授权结果的字段。 1234567891011private final int OVERLAY_PERMISSION_REQ_CODE = 1; // 任写一个值...if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123; if (!Settings.canDrawOverlays(this)) &#123; Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + getPackageName())); startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE); &#125;&#125; Finally, the onActivityResult() method (as shown in the code below) has to be overridden to handle the permission Accepted or Denied cases for consistent UX. 12345678910@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; if (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123; if (!Settings.canDrawOverlays(this)) &#123; // SYSTEM_ALERT_WINDOW permission not granted &#125; &#125; &#125;&#125; 掌握核心科技：ReactRootView我们还需要添加一些原生代码来启动 React Native 的运行时环境并让它开始渲染。首先需要在一个Activity中创建一个ReactRootView对象，然后在这个对象之中启动 React Native 应用，并将它设为界面的主视图。 如果你想在安卓 5.0 以下的系统上运行，请用 com.android.support:appcompat 包中的 AppCompatActivity 代替 Activity 。 1234567891011121314151617181920212223242526272829public class MyReactActivity extends Activity implements DefaultHardwareBackBtnHandler &#123; private ReactRootView mReactRootView; private ReactInstanceManager mReactInstanceManager; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mReactRootView = new ReactRootView(this); mReactInstanceManager = ReactInstanceManager.builder() .setApplication(getApplication()) .setBundleAssetName(\"index.android.bundle\") .setJSMainModulePath(\"index\") .addPackage(new MainReactPackage()) .setUseDeveloperSupport(BuildConfig.DEBUG) .setInitialLifecycleState(LifecycleState.RESUMED) .build(); // 注意这里的MyReactNativeApp必须对应“index.js”中的 // “AppRegistry.registerComponent()”的第一个参数 mReactRootView.startReactApplication(mReactInstanceManager, \"MyReactNativeApp\", null); setContentView(mReactRootView); &#125; @Override public void invokeDefaultOnBackPressed() &#123; super.onBackPressed(); &#125;&#125; If you are using a starter kit for React Native, replace the “HelloWorld” string with the one in your index.js file (it’s the first argument to the AppRegistry.registerComponent() method). 如果你使用的是 Android Studio , 可以使用Alt + Enter快捷键来自动为 MyReactActivity 类补上缺失的 import 语句。注意BuildConfig应该是在你自己的包中自动生成，无需额外引入。千万不要从com.facebook...的包中引入！ 我们需要把 MyReactActivity 的主题设定为 Theme.AppCompat.Light.NoActionBar ，因为里面有许多组件都使用了这一主题。 12345&lt;activity android:name=\".MyReactActivity\" android:label=\"@string/app_name\" android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\"&gt;&lt;/activity&gt; 一个ReactInstanceManager可以在多个 activities 或 fragments 间共享。 You will want to make your own ReactFragment or ReactActivity and have a singleton holder that holds a ReactInstanceManager. When you need the ReactInstanceManager (e.g., to hook up the ReactInstanceManager to the lifecycle of those Activities or Fragments) use the one provided by the singleton. 下一步我们需要把一些 activity 的生命周期回调传递给ReactInstanceManager： 1234567891011121314151617181920212223242526272829@Overrideprotected void onPause() &#123; super.onPause(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostPause(this); &#125;&#125;@Overrideprotected void onResume() &#123; super.onResume(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostResume(this, this); &#125;&#125;@Overrideprotected void onDestroy() &#123; super.onDestroy(); if (mReactInstanceManager != null) &#123; mReactInstanceManager.onHostDestroy(this); &#125; if (mReactRootView != null) &#123; mReactRootView.unmountReactApplication(); &#125;&#125; 我们还需要把后退按钮事件传递给 React Native： 12345678@Override public void onBackPressed() &#123; if (mReactInstanceManager != null) &#123; mReactInstanceManager.onBackPressed(); &#125; else &#123; super.onBackPressed(); &#125;&#125; This allows JavaScript to control what happens when the user presses the hardware back button (e.g. to implement navigation). When JavaScript doesn’t handle the back button press, your invokeDefaultOnBackPressed method will be called. By default this simply finishes your Activity. Finally, we need to hook up the dev menu. By default, this is activated by (rage) shaking the device, but this is not very useful in emulators. So we make it show when you press the hardware menu button (use Ctrl + M if you’re using Android Studio emulator): 12345678@Overridepublic boolean onKeyUp(int keyCode, KeyEvent event) &#123; if (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != null) &#123; mReactInstanceManager.showDevOptionsDialog(); return true; &#125; return super.onKeyUp(keyCode, event);&#125; 现在 activity 已就绪，可以运行一些 JavaScript 代码了。 测试集成结果You have now done all the basic steps to integrate React Native with your current application. Now we will start the React Native packager to build the index.bundle package and the server running on localhost to serve it. 1. 运行 Packager运行应用首先需要启动开发服务器（Packager）。你只需在项目根目录中执行以下命令即可： 1$ yarn start 2. 运行你的应用保持 packager 的窗口运行不要关闭，然后像往常一样编译运行你的 Android 应用(在命令行中执行./gradlew installDebug或是在 Android Studio 中编译运行)。 编译执行一切顺利进行之后，在进入到 MyReactActivity 时应该就能立刻从 packager 中读取 JavaScript 代码并执行和显示： Screenshot 在 Android Studio 中打包你也可以使用 Android Studio 来打 release 包！其步骤基本和原生应用一样，只是在每次编译打包之前需要先执行 js 文件的打包(即生成离线的 jsbundle 文件)。具体的 js 打包命令如下： 1$ react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/com/your-company-name/app-package-name/src/main/assets/index.android.bundle --assets-dest android/com/your-company-name/app-package-name/src/main/res/ 注意把上述命令中的路径替换为你实际项目的路径。如果 assets 目录不存在，则需要提前自己创建一个。 然后在 Android Studio 中正常生成 release 版本即可！ 我遇到的问题就是一进入ReactNative的Activity就闪退到前面的页面，后查看log发现1java.lang.UnsatisfiedLinkError: couldn&apos;t find DSO to load: libreactnativejni 解决方法在两处添加配置：app#build.gradle 123456defaultConfig &#123; //... ndk &#123; abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; &#125; &#125;","categories":[{"name":"非原创","slug":"非原创","permalink":"https://meandni.com/categories/非原创/"}],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"},{"name":"混合开发","slug":"混合开发","permalink":"https://meandni.com/tags/混合开发/"},{"name":"reactnative","slug":"reactnative","permalink":"https://meandni.com/tags/reactnative/"}]},{"title":"看《第一行代码》(Androud)","slug":"《第一行代码》","date":"2018-08-14T14:21:00.000Z","updated":"2018-08-16T05:21:20.000Z","comments":true,"path":"2018/08/14/b62/","link":"","permalink":"https://meandni.com/2018/08/14/b62/","excerpt":"","text":"读书感受本着查漏补缺的态度，刚来学校随手拿到一本书看了起来，就这么一下子看完了，有一个感觉，技术之类的书还要是有点基础看的，不仅效率高而且获益确实不少。 也没有都看，前面已经接触太多的东西就没去看了，大概以后还会当工具书来翻一翻，主要是从我之前没接触的广播看起，看着看着发现之前不会的东西居然掌握了，着实让我倍感自信，有了继续看的动力，加上手头正在做一个自己感觉还算比较满意的项目，一下子感觉自己离大神的距离又近了一点（😆）。我是真的极其讨厌“大神”这个词，第一个原因是看过太多所谓的大神其实只是貌似或者说是被别人吹出来的，再说这个领域本来就没有多少真正大神，我暂时是这么想的，可能因为我的眼界还太窄，你不可能什么都会，就算你会的很多你也应该谦虚一点，所以我要谦虚一点😀。 用我前阵子非常喜欢说的话，就是学习编程跟学习英语其实没什么两样，你学了你就会了，你看过一样东西并且去练习了你自然也就会了，没什么天赋之类的（这也是我暂时的想法），只有你有没有兴趣！ 我都不知道我要不要做这种程序员工作，兴趣我是有的，不然也不会投入到连吃饭上厕所的时间都忘记了，但有时真的是觉得我不想做这种办公室农民,极其违背我的本意～～我的本意其实可能是能有不劳而获，把梦里想的直接变现的东西。 知识点广播（Broadcast）接收广播（BroadReceiver）看前面两小节，通俗的理解也不过是监听了某某事件（比如网络是否连接），之后发生一个动作。 网络变化这个广播通过IntentFilter的addAction方法拿到，然后通过regosterReceiver方法将该广播和我们自定义的广播接收器绑定起来。 这里的广播界接收器regosterReceiver就是我们写的一个类，广播发出来之后，我们的类实例化出来的对象的onReceive方法会被自动调用，这里我们想干嘛就干嘛了。 发送广播方法类似于打开另一个Activity，用的是intent实例化的时候将自定义的广播传入参数，然后调用sendBroadcast方法。 其他的就是光波可以跨应用程序传播（当然，有时为了安全可以使用本地广播），有序广播可以设置优先权选择那个接收者先执行 最佳实践这本书比较好的就是每一个章节的最佳实践，知识点全面而且有点难度、实践性比较大。 这一章是实现App登陆后发送广播强制退出登陆的功能，这里不多说了～ 手机多媒体通知（Notification）","categories":[{"name":"原创","slug":"原创","permalink":"https://meandni.com/categories/原创/"}],"tags":[{"name":"android","slug":"android","permalink":"https://meandni.com/tags/android/"},{"name":"读书","slug":"读书","permalink":"https://meandni.com/tags/读书/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-14T03:27:16.000Z","updated":"2018-08-15T01:02:49.000Z","comments":true,"path":"2018/08/14/3eeb/","link":"","permalink":"https://meandni.com/2018/08/14/3eeb/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 博客迁至Hexo，托管在GitHub上，以后可以开始舒适的学作之旅了～ Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}