<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1964 年，空指针崩溃的源头，以及 Dart 最新的空安全特性！</title>
      <link href="/2020/10/09/null-references-and-dart210/"/>
      <url>/2020/10/09/null-references-and-dart210/</url>
      
        <content type="html"><![CDATA[<p>2009 年，<strong>快排算法的作者、1980 年图灵奖的得主</strong> Tony Hoare 在伦敦的 QCon 大会上发表了一场主题为《Null References: The Billion Dollar Mistake》的演讲，这场本该积极活跃的分享会<strong>全程却充满了懊悔和歉意</strong>，因为他认为正是自己在 1964 年将 null 指针引入编程语言的原因而导致了后来很多无法估量的损失。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-09-2020-10-08-1*4Utp7w7cM7wu1ipsfc6RDQ.jpeg" alt="托尼·霍尔（Tony Hoare）（右），1960 年在莫斯科国立大学作为交换生"></p><p>按 Hoare 自己的描述，当时将 null 指针引入的 ALGO（Hoare 发明的语言）的<strong>原因是非常容易实现</strong>，而 Null 后来却也造成了 innerable errors, vulnerabilities 和 system crash 等等异常，也间接导致了<strong>几十年数十亿美元的损失</strong>。</p><blockquote><p>“我把 Null 引用称为自己的十亿美元错误。它的发明是在 1965 年，那时我用一个面向对象语言 ( ALGOL W ) 设计了第一个全面的引用类型系统。我的目的是确保所有引用的使用都是绝对安全的，编译器会自动进行检查。但是我未能抵御住诱惑，加入了Null引用，仅仅是因为实现起来非常容易。”</p></blockquote><p>据调查，Javascript 中<strong>最常出现的 10 异常中有 8 个是由  <code>null</code> 和 <code>undefined</code> 引起</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-09-javascript-error-graph.png" alt="Javascript 最常见的错误排名"></p><p>因此，这也算是一个语言设计者的锅了，关于对空指针的看法，现在的工程师们也各执己见，有人认为 null 指针反倒应当成为了程序语言必不可少的一部分，认为大师做的没错，而 Hoare 的好朋友 Edsger Dijkstra 后来却把 null 比作通奸犯，认为对象里的每个值为 null 的属性都是被 null XX 的 XX，<strong>笔者在这里不予评论</strong>。</p><p>同时，现代很多高级语言，如 Kotlin, Swift, Rust，也已经有意识的来规避空指针这个特性了，今天我要说的 Dart，也在今年初开始重构类型体系支持这种<strong>在编译阶段就能发现空指针错误的 null-safe（空安全） 特性，也就是说今后我们将不再会因为空指针错误而导致 Flutter 应用程序崩溃啦！</strong>。</p><h3 id="Dart-2-10-的空安全特性"><a href="#Dart-2-10-的空安全特性" class="headerlink" title="Dart 2.10 的空安全特性"></a>Dart 2.10 的空安全特性</h3><p>在 Dart 2.10 以前，我们就常常会犯如下的错误：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Without null safety:</span></span><br><span class="line"><span class="built_in">bool</span> isEmpty(<span class="built_in">String</span> string) =&gt; string.length == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  isEmpty(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，因为这里的 null 属于 Null 类型，其中也并没有 length 属性的 getter 方法，因此会抛出 NoSuchMethodError 异常，这对我们这种底层的客户端开发者就是致命的错误。</p><p>强类型的语言的优势就在于能够在编译器就能立即发现程序的 bug，然后我们随之解决，开张大吉，但空指针错误却不在他的检查范围内，因此，Dart 在 2.10 引入 null-safe 特性后，<strong>我们在 IDE 内的编译期间就能不放过任何一个可能发生空指针错误的地方了</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-09-2020-10-08-dartpad-snippet.png" alt="空安全语法错误提示"></p><p><strong>Google 官方表示， Dart 语言 null-safe 特性目前已经在做第二阶段的测试了，下个月将该特性合并入 Flutter 内测，在此之前我们可以在 <a href="https://nullsafety.dartpad.dev/" target="_blank" rel="noopener">DartPad</a> 中尝尝鲜。</strong></p><p>另外，空安全特性的引入直接要求我们写出没有空指针的代码，因此 Dart  编译器和运行时<strong>可以省去优化内部的空检查</strong>，应用程序会就变得更轻量、速度也会更快。</p><blockquote><p>因为 Dart 目前也在预览阶段，暂时也不能投入生产，因此如果你在测试阶段遇到技术问题，随时可以<a href="https://github.com/dart-lang/sdk/issues/new?title=Null%20safety%20feedback:%20%5Bissue%20summary%5D&amp;labels=NNBD&amp;body=Describe%20the%20issue%20or%20potential%20improvement%20in%20detail%20here" target="_blank" rel="noopener">向官方提出反馈</a>。</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>null-safe 引入的新操作符和关键字包括 <code>？</code>，<code>!</code> 和 <code>late</code>，使用过 Kotlin，TypeScript 或 C# 的读者，应该已经已经很熟悉这个特性了，下面我就介绍一下 Dart 语言中的使用方法。</p><p>此时，默认情况下，代码中写的所有变量默认都不为空：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这些变量都不为空，直接初始化</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="built_in">String</span> name = getFileName();</span><br><span class="line"><span class="keyword">final</span> b = Foo();</span><br></pre></td></tr></table></figure><p>如果希望某个变量可以为空，可以使用 <code>?</code> 操作符声明一个<strong>可空变量</strong>，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? aNullableInt = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>如果你确定变量在使用之前一定会被初始化，可以使用 late 关键词延迟该操作：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntProvider</span> </span>&#123;</span><br><span class="line">  late <span class="built_in">int</span> aRealInt;</span><br><span class="line">  </span><br><span class="line">  IntProvider() &#123;</span><br><span class="line">    aRealInt = calculate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，Dart analyzer 就不会要求 aRealInt 变量马上给一个指定的值，我们可以称这种变量为 <strong>late 变量</strong>。</p><p>使用可控变量时，必须使用 <code>??</code> 或 <code>if</code> 语句做判空处理：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> value = aNullableInt ?? <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> definitelyInt(<span class="built_in">int</span>? aNullableInt) &#123;</span><br><span class="line">  <span class="keyword">if</span> (aNullableInt == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> aNullableInt; <span class="comment">// Can't be null!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你能保证一个 可空变量在使用时一定不为空，使用 <code>!</code> 关键词声明：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? aNullableInt = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> value = aNullableInt!; <span class="comment">// `aNullableInt!` 确定为 int .</span></span><br></pre></td></tr></table></figure><p>如果你想要改变可空变量的类型，除了可以使用 <code>！</code> 操作符外，也可以使用 <code>as</code> ：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> maybeNum() <span class="keyword">as</span> <span class="built_in">int</span>;</span><br></pre></td></tr></table></figure><p>最后，如果引入空安全特性，也不能对可空变量直接使用 <code>.</code> 操作符调用方法，需要使用 <code>?.</code>：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span>? d;  </span><br><span class="line"><span class="built_in">print</span>(d?.floor()); <span class="comment">// 使用 .? 代替 .</span></span><br></pre></td></tr></table></figure><h3 id="时机合适后引入"><a href="#时机合适后引入" class="headerlink" title="时机合适后引入"></a>时机合适后引入</h3><p>因为引入null-safe 特性被声明的变量都将默认不为空，会影响到整个 Dart 类型系统的改动，所以，直接使用这一特性可能会对项目具有较大的侵略性，因此官方将 null-safe 暂时当做<strong>可选特性</strong>，建议我们找个恰当的时机再做这个比较冒险的操作。</p><h3 id="逐步引入"><a href="#逐步引入" class="headerlink" title="逐步引入"></a>逐步引入</h3><p>官方也建议我们按照特定顺序来重构代码，<strong>先在独立模块的项目中引入该特性</strong>。如，如果 C 依赖于 B，而 B 又依赖于 A，那么先将 A 重构到空安全，然后再重构 B，再重构 C，无论 A、B、C 是库、包还是应用应当遵循这个重构顺序。</p><p><strong>为什么按这个次序重构代码？</strong>，虽然我们可以直接重构项目代码，但如果依赖项在重构过程中改变了它们的 API，就有可能还要进行二次重构，官方也将提供一系列开发工具来帮助开发者找出哪些依赖库已经迁移，<strong>开源项目的作者注意了，为了避免发生意外错误，请等到你所有的依赖项都重构了之后再发布空安全版本。</strong></p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p>依赖项都重构完成时，可以使用官方的迁移工具进行项目代码重构，开发工具通过分析所有现有代码，查找哪些声明可以为非空（保持不变），哪些声明必须为可空（使用可空标记 “？” 可空标记）。</p><p>迁移工具是界面交互式的，因此我们可以直接查看该工具推断出来的具有可空性的属性，<strong>如果不想重构检查结果中的代码，也可以使用 ? 符标记为可空</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-09-2020-10-09-0*wqrweNI-0SK9DB0z.png" alt=""></p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>官方在会之后几个月中同步更多关于 Dart 空安全特性的进展和动态，届时也会请 Flutter 团队的开发者配合引入到框架中，关于空安全的具体用法可以参照 <a href="https://dart.dev/null-safety" target="_blank" rel="noopener">官方文档</a>，如果想要更深入去理解，可以参考 <a href="https://dart.dev/null-safety/understanding-null-safety#reachability-analysis" target="_blank" rel="noopener">Understanding null safety</a>，里面详细介绍了 Dart 官方的设计动机和理念，我后期也会跟国内的读者做最新的同步，大家敬请期待。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p><a href="https://medium.com/dartlang/announcing-dart-2-10-350823952bd5" target="_blank" rel="noopener">https://medium.com/dartlang/announcing-dart-2-10-350823952bd5</a></p><p><a href="https://blog.maxkit.com.tw/2015/08/null-null-reference-is-billion-dollar.html?m=1" target="_blank" rel="noopener">https://blog.maxkit.com.tw/2015/08/null-null-reference-is-billion-dollar.html?m=1</a></p><p><a href="https://blog.csdn.net/turingbook/article/details/3954798" target="_blank" rel="noopener">https://blog.csdn.net/turingbook/article/details/3954798</a></p><p><a href="https://dev.to/joelnet/null-the-billion-dollar-mistake-maybe-just-nothing-1cak" target="_blank" rel="noopener">https://dev.to/joelnet/null-the-billion-dollar-mistake-maybe-just-nothing-1cak</a></p><p>关注公众号「Meandni」，及时阅读最新技术动态。</p><p><img src="/images/qrcode_for_small.jpg" alt="扫一扫，Meandni"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Navigator 2.0 全面解析</title>
      <link href="/2020/10/05/flutter-navigator2-and-router/"/>
      <url>/2020/10/05/flutter-navigator2-and-router/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-Navigator-2-0-全面解析"><a href="#Flutter-Navigator-2-0-全面解析" class="headerlink" title="Flutter Navigator 2.0 全面解析"></a>Flutter Navigator 2.0 全面解析</h2><p>随着最新版本的的发布，<a href="https://mp.weixin.qq.com/s/ea4O4pJ1vzUfqv3j3aMqCQ" target="_blank" rel="noopener">Flutter 1.22</a> 中各个全新的功能映入了我们的眼帘，可以发现本次对路由相关 API 的改动最大，官方的设计文档中表示，由于传统的命令式并<strong>没有给开发者一种灵活的方式去直接管理路由栈</strong>，甚至觉得已经过时了，一点也不 Flutter。</p><blockquote><p>As mentioned by a participant in one of Flutter’s user studies, the API also feels outdated and not very Flutter-y.</p><p>—— <a href="https://docs.google.com/document/d/1Q0jx0l4-xymph9O6zLaOY4d_f7YFpNWX_eGbzYxr9wY/edit" target="_blank" rel="noopener">Flutter Navigator 2.0 and Router</a></p></blockquote><p>而 Navigator 2.0 引入了一套全新的声明式 API，与以往不同，这类 API 可以实现<strong>用一组声明式的不可变的 Page 页面列表表示应用中的历史路由页面</strong>，从而转换成实际代码中 Navigator 的 Routes，这<strong>与 Flutter 中将不可变的 Widgets 解析成 Elements 并在页面中渲染的原理不谋而合</strong>，倒是 Flutter 十足。本文，我们就先从 Navigator 1.0 讲起逐步了解 Navigator 2.0 的实现方式。 </p><h3 id="Navigator-1-0"><a href="#Navigator-1-0" class="headerlink" title="Navigator 1.0"></a>Navigator 1.0</h3><p>在  Navigator 2.0 推出之前，我们在应用中通常使用下面这两个类来管理各个页面：</p><ul><li><strong>Navigator</strong>，管理一组 <code>Route</code> 对象。</li><li><strong>Route</strong>，一个 <code>Route</code> 通常可以表示一个页面，被 <code>Navigator</code> 持有，常用的两个实现类是  <code>MaterialPageRoute</code> 和 <code>CupertinoPageRoute</code> 。</li></ul><p><code>Route</code> 可以通过命名路由和组件路由（匿名路由）的方式被 push 进或者 pop 出 <code>Navigator</code> 的路由栈。我们先来简单回顾一下之前的传统用法。</p><h4 id="组件路由"><a href="#组件路由" class="headerlink" title="组件路由"></a>组件路由</h4><p>传统路由的实现中，Flutter 的各个页面由 <code>Navigator</code> 组织，彼此叠放成一个 “路由栈”，常用的根组件 <code>MaterialApp</code>和<code>CupertinoApp</code> 底层就是通过 <code>Navigator</code> 来实现全局路由的管理的，我们可以通过 <code>Navigator.of()</code> 或者 <code>Navigator.push()</code>、<code>Navigator.pop()</code> 等接口实现多个页面之间的导航，具体做法如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(Nav2App());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nav2App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: HomeScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">'View Details'</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="comment">// 打开页面</span></span><br><span class="line">            Navigator.push(</span><br><span class="line">              context,</span><br><span class="line">              MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">                <span class="keyword">return</span> DetailScreen();</span><br><span class="line">              &#125;),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">'Pop!'</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="comment">// 弹出页面</span></span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用 <code>push()</code> 方法时，<code>DetailScreen</code> 组件就会被放置在 <code>HomeScreen</code> 的顶部，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-05-1*v77nG0BRIWrOghj8fCq_EA-20201005211028004.png" alt=""></p><p>此时，上一个页面（<code>HomeScreen</code>）仍在组件树中，因此当 <code>DetailScreen</code>  打开时它的状态依旧会被保留。</p><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>Flutter 还支持通过命名路由的方式打开页面，各个页面的名称组成 “路由表” 通过参数（routes）传递给  <code>MaterialApp</code>、<code>CupertinoApp</code>，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(Nav2App());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nav2App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      <span class="comment">// 路由表</span></span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">'/'</span>: (context) =&gt; HomeScreen(),</span><br><span class="line">        <span class="string">'/details'</span>: (context) =&gt; DetailScreen(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">'View Details'</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pushNamed(</span><br><span class="line">              context,</span><br><span class="line">              <span class="string">'/details'</span>,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">'Pop!'</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命名路由时都需要预先定义好需要打开的页面，尽管我们也可以在各个页面之间传递数据，但这种方式原生并不支持直接解析路由参数，如不能使用 Web 应用中的链接形式 <code>/details/:id</code> 的路由名称。</p><h4 id="onGenerateRoute"><a href="#onGenerateRoute" class="headerlink" title="onGenerateRoute"></a>onGenerateRoute</h4><p>当然，我们可以使用 <code>onGenerateRoute</code> 来接受路由的完整路径，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">onGenerateRoute: (settings) &#123;</span><br><span class="line">  <span class="comment">// Handle '/'</span></span><br><span class="line">  <span class="keyword">if</span> (settings.name == <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; HomeScreen());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Handle '/details/:id'</span></span><br><span class="line">  <span class="keyword">var</span> uri = <span class="built_in">Uri</span>.parse(settings.name);</span><br><span class="line">  <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">2</span> &amp;&amp;</span><br><span class="line">      uri.pathSegments.first == <span class="string">'details'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> id = uri.pathSegments[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; DetailScreen(id: id));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; UnknownScreen());</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(Nav2App());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nav2App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      onGenerateRoute: (settings) &#123;</span><br><span class="line">        <span class="comment">// Handle '/'</span></span><br><span class="line">        <span class="keyword">if</span> (settings.name == <span class="string">'/'</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; HomeScreen());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle '/details/:id'</span></span><br><span class="line">        <span class="keyword">var</span> uri = <span class="built_in">Uri</span>.parse(settings.name);</span><br><span class="line">        <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">2</span> &amp;&amp;</span><br><span class="line">            uri.pathSegments.first == <span class="string">'details'</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> id = uri.pathSegments[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; DetailScreen(id: id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MaterialPageRoute(builder: (context) =&gt; UnknownScreen());</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: FlatButton(</span><br><span class="line">          child: Text(<span class="string">'View Details'</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pushNamed(</span><br><span class="line">              context,</span><br><span class="line">              <span class="string">'/details/1'</span>,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> id;</span><br><span class="line"></span><br><span class="line">  DetailScreen(&#123;</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            Text(<span class="string">'Viewing details for item <span class="subst">$id</span>'</span>),</span><br><span class="line">            FlatButton(</span><br><span class="line">              child: Text(<span class="string">'Pop!'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnknownScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">'404!'</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我们可以通过 <code>RouteSettings</code> 类型的对象  <code>settings</code>  可以拿到 <code>Navigator.pushNamed</code> 调用时传入的参数。</p><h3 id="Navigator-2-0"><a href="#Navigator-2-0" class="headerlink" title="Navigator 2.0"></a>Navigator 2.0</h3><p>Navigator 2.0 提供了一系列全新的接口，可以实现将路由状态成为应用状态的一部分，并能够通过底层 API 实现参数解析的功能，新增的 API 如下：</p><p>Navigator 2.0 API 向框架添加了新类，以使应用程序的屏幕成为应用程序状态的功能，并提供解析来自底层平台（如 Web URL）的路由的功能。以下是新功能概述：</p><ul><li><strong>Page</strong>，用来表示 <code>Navigator</code> 路由栈中各个页面的配置信息。</li><li><strong>Router</strong>，用来制定要由 <code>Navigator</code> 展示的页面列表，通常，该页面列表会根据系统或应用程序的状态改变而改变。</li><li><p><strong>RouteInformationParser</strong>，持有 <code>RouteInformationProvider</code> 提供的  <code>RouteInformation</code>  ，可以将其解析为我们定义的数据类型。</p></li><li><p><strong>RouterDelegate</strong>，定义应用程序中的路由行为，例如 Router 如何知道应用程序状态的变化以及如何响应。主要的工作就是监听  <code>RouteInformationParser</code> 和应用状态并通过当前页面列表构建 ·。</p></li><li><strong>BackButtonDispatcher</strong>，响应后退按钮，并通知 <code>Router</code></li></ul><p>下图展示了 <code>RouterDelegate</code> 与 <code>Router</code>、<code>RouteInformationParser</code> 以及用用状态的交互原理，</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-05-1*hNt4Bc8FZBp_Gqh7iED3FA-20201005211116296.png" alt=""></p><p>大致流程如下：</p><ol><li>当系统打开新页面（如 <code>“books / 2”</code>）时，<code>RouteInformationParser</code> 会将其转换为应用中的具体数据类型 T（如 <code>BooksRoutePath</code>）。</li><li>该数据类型会被传递给 <code>RouterDelegate</code> 的 <code>setNewRoutePath</code> 方法，我们可以在这里更新路由状态（如通过设置 <code>selectedBookId</code>）并调用 <code>notifyListeners</code> 响应该操作。</li><li><code>notifyListeners</code> 会通知 <code>Router</code> 重建 <code>RouterDelegate</code>（通过 <code>build()</code> 方法）.</li><li><code>RouterDelegate.build()</code> 返回一个新的 <code>Navigator</code> 实例，并最终展示出我们想要打开的页面（如 <code>selectedBookId</code>）。</li></ol><h3 id="Navigator-2-0-实战"><a href="#Navigator-2-0-实战" class="headerlink" title="Navigator 2.0 实战"></a>Navigator 2.0 实战</h3><p>下面，我们就来使用 Navigator 2.0 做一个小小练习，我们将实现一个 Flutter 应用，该应用作用在 Web 上时路由状态会与浏览器中的 URL 连接保持一致，而且也能够处理浏览器的回退按钮，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-05-1*PYHrYurwAGyQC8vsnAaWiA-20201005211118238.gif" alt=""></p><p>接下来，使用 <code>flutter channel master</code> 将 Flutter 切换到 master 版本，<a href="https://flutter.dev/docs/get-started/web#create-a-new-project-with-web-support" target="_blank" rel="noopener">创建一个支持 Web 应用的 Flutter 项目</a>，<code>lib/main.dart</code> 中的代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(BooksApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> author;</span><br><span class="line"></span><br><span class="line">  Book(<span class="keyword">this</span>.title, <span class="keyword">this</span>.author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _BooksAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BooksAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BooksApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Books App'</span>,</span><br><span class="line">      home: Navigator(</span><br><span class="line">        pages: [</span><br><span class="line">          MaterialPage(</span><br><span class="line">            key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">            child: Scaffold(),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">        onPopPage: (route, result) =&gt; route.didPop(result),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h4><p><code>Navigator</code> 接受一个 <code>pages</code> 参数，如果 Page 列表发生变化，<code>Navigator</code> 也需要更新当前路由栈来保持同步，下面我们就来使用该性质，在新建的项目中开发一个可以展示书单列表的应用</p><p><code>_BooksAppState</code> 中持有两个状态参数：书单列表和当前所选书籍：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BooksAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BooksApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// New:</span></span><br><span class="line">  Book _selectedBook;</span><br><span class="line">  <span class="built_in">bool</span> show404 = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;Book&gt; books = [</span><br><span class="line">    Book(<span class="string">'Stranger in a Strange Land'</span>, <span class="string">'Robert A. Heinlein'</span>),</span><br><span class="line">    Book(<span class="string">'Foundation'</span>, <span class="string">'Isaac Asimov'</span>),</span><br><span class="line">    Book(<span class="string">'Fahrenheit 451'</span>, <span class="string">'Ray Bradbury'</span>),</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>然后，在中<code>_BooksAppState</code>，返回一个带有 <code>Page</code> 对象列表的 <code>Navigator</code> ：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title: <span class="string">'Books App'</span>,</span><br><span class="line">    home: Navigator(</span><br><span class="line">      pages: [</span><br><span class="line">        MaterialPage(</span><br><span class="line">          key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">          child: BooksListScreen(</span><br><span class="line">            books: books,</span><br><span class="line">            onTapped: _handleBookTapped,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _handleBookTapped(Book book) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _selectedBook = book;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksListScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Book&gt; books;</span><br><span class="line">  <span class="keyword">final</span> ValueChanged&lt;Book&gt; onTapped;</span><br><span class="line">BooksListScreen(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.books,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onTapped,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: [</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> book <span class="keyword">in</span> books)</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(book.title),</span><br><span class="line">              subtitle: Text(book.author),</span><br><span class="line">              onTap: () =&gt; onTapped(book),</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此应用会有两个页面（一个书单列表也和一个详情的页面），如果选择了某本书（使用 <a href="https://dart.dev/guides/language/language-tour#collection-operators" target="_blank" rel="noopener">collection if</a>），则会加入详细页：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">pages: [</span><br><span class="line">  MaterialPage(</span><br><span class="line">    key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">    child: BooksListScreen(</span><br><span class="line">      books: books,</span><br><span class="line">      onTapped: _handleBookTapped,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line"><span class="comment">// New:</span></span><br><span class="line">  <span class="keyword">if</span> (show404)</span><br><span class="line">    MaterialPage(key: ValueKey(<span class="string">'UnknownPage'</span>), child: UnknownScreen())</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (_selectedBook != <span class="keyword">null</span>)</span><br><span class="line">    MaterialPage(</span><br><span class="line">        key: ValueKey(_selectedBook),</span><br><span class="line">        child: BookDetailsScreen(book: _selectedBook))</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>注意，这里的 key 会由 book 对象中的值定义作为 <code>MaterialPage</code> 的唯一标识，也就是说，book 对象不同这里的 <code>MaterialPage</code> 就不同。没有唯一的 key，框架就无法确定何时显示不同 Page 之间的过渡动画。</p><p>我们还可以继承 <code>Page</code> 来实现自定义行为，例如，在该页面添加了自定义过渡动画：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailsPage</span> <span class="keyword">extends</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Book book;</span><br><span class="line">  </span><br><span class="line">  BookDetailsPage(&#123;</span><br><span class="line">    <span class="keyword">this</span>.book,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: ValueKey(book));</span><br><span class="line">  </span><br><span class="line">  Route createRoute(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> PageRouteBuilder(</span><br><span class="line">      settings: <span class="keyword">this</span>,</span><br><span class="line">      pageBuilder: (context, animation, animation2) &#123;</span><br><span class="line">        <span class="keyword">final</span> tween = Tween(begin: Offset(<span class="number">0.0</span>, <span class="number">1.0</span>), end: Offset.zero);</span><br><span class="line">        <span class="keyword">final</span> curveTween = CurveTween(curve: Curves.easeInOut);</span><br><span class="line">        <span class="keyword">return</span> SlideTransition(</span><br><span class="line">          position: animation.drive(curveTween).drive(tween),</span><br><span class="line">          child: BookDetailsScreen(</span><br><span class="line">            key: ValueKey(book),</span><br><span class="line">            book: book,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要注意的是，只传入 pages 参数而不传入 <code>onPopPage</code> 也会报错，他接受一个回调函数，每次 <code>Navigator.pop()</code> 被调用时就会出发这个函数，我们可以在其中更新路由状态</p><p>最后，在<code>pages</code>不提供<code>onPopPage</code>回调的情况下提供参数是错误的。每次调用时都会<code>Navigator.pop()</code>调用此函数。应该使用它来更新状态（修改页面列表），这里我们需要调用 <code>didPop</code> 方法确定是否 pop 成功：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">onPopPage: (route, result) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!route.didPop(result)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update the list of pages by setting _selectedBook to null</span></span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们还必须在更新应用程序状态之前检查是否 pop 失败。这里，我们使用了 <code>setState</code> 方法来通知 Flutter 调用 <code>build()</code> 方法，该方法 <code>_selectedBook</code> 为 null 表示展示书单列表页。</p><p>完整代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(BooksApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> author;</span><br><span class="line"></span><br><span class="line">  Book(<span class="keyword">this</span>.title, <span class="keyword">this</span>.author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _BooksAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BooksAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BooksApp</span>&gt; </span>&#123;</span><br><span class="line">  Book _selectedBook;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Book&gt; books = [</span><br><span class="line">    Book(<span class="string">'Stranger in a Strange Land'</span>, <span class="string">'Robert A. Heinlein'</span>),</span><br><span class="line">    Book(<span class="string">'Foundation'</span>, <span class="string">'Isaac Asimov'</span>),</span><br><span class="line">    Book(<span class="string">'Fahrenheit 451'</span>, <span class="string">'Ray Bradbury'</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Books App'</span>,</span><br><span class="line">      home: Navigator(</span><br><span class="line">        pages: [</span><br><span class="line">          MaterialPage(</span><br><span class="line">            key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">            child: BooksListScreen(</span><br><span class="line">              books: books,</span><br><span class="line">              onTapped: _handleBookTapped,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">if</span> (_selectedBook != <span class="keyword">null</span>) BookDetailsPage(book: _selectedBook)</span><br><span class="line">        ],</span><br><span class="line">        onPopPage: (route, result) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!route.didPop(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Update the list of pages by setting _selectedBook to null</span></span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleBookTapped(Book book) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _selectedBook = book;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailsPage</span> <span class="keyword">extends</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Book book;</span><br><span class="line"></span><br><span class="line">  BookDetailsPage(&#123;</span><br><span class="line">    <span class="keyword">this</span>.book,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: ValueKey(book));</span><br><span class="line"></span><br><span class="line">  Route createRoute(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(</span><br><span class="line">      settings: <span class="keyword">this</span>,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> BookDetailsScreen(book: book);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksListScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Book&gt; books;</span><br><span class="line">  <span class="keyword">final</span> ValueChanged&lt;Book&gt; onTapped;</span><br><span class="line"></span><br><span class="line">  BooksListScreen(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.books,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onTapped,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: [</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> book <span class="keyword">in</span> books)</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(book.title),</span><br><span class="line">              subtitle: Text(book.author),</span><br><span class="line">              onTap: () =&gt; onTapped(book),</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailsScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Book book;</span><br><span class="line"></span><br><span class="line">  BookDetailsScreen(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.book,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="keyword">if</span> (book != <span class="keyword">null</span>) ...[</span><br><span class="line">              Text(book.title, style: Theme.of(context).textTheme.headline6),</span><br><span class="line">              Text(book.author, style: Theme.of(context).textTheme.subtitle1),</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，我们就实现了声明式的路由管理，单此时我们还无法处理浏览器的后退按钮，也不能同步浏览器地址拦中的链接。</p><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p>本节，我们来实现通过  <code>RouteInformationParser</code>, <code>RouterDelegate</code> 更新路由状态，实现与浏览器地址拦中的链接同步</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>首先，我们需要通过 <code>RouteInformationParser</code> 将路由信息解析为指定的数据类型：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRoutePath</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isUnknown;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.home()</span><br><span class="line">      : id = <span class="keyword">null</span>,</span><br><span class="line">        isUnknown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.details(<span class="keyword">this</span>.id) : isUnknown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.unknown()</span><br><span class="line">      : id = <span class="keyword">null</span>,</span><br><span class="line">        isUnknown = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isHomePage =&gt; id == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isDetailsPage =&gt; id != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该应用程序中，可以使用 <code>BookRoutePath</code> 类来表示应用程序中的路由路径，我们也可以实现父子类来关系其他各类型的路由信息。</p><h4 id="RouterDelegate"><a href="#RouterDelegate" class="headerlink" title="RouterDelegate"></a>RouterDelegate</h4><p>接下来，我们实现一个 <code>RouterDelegate</code> 的子类 <code>BookRouterDelegate</code>：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRouterDelegate</span> <span class="keyword">extends</span> <span class="title">RouterDelegate</span>&lt;<span class="title">BookRoutePath</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">ChangeNotifier</span>, <span class="title">PopNavigatorRouterDelegateMixin</span>&lt;<span class="title">BookRoutePath</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">  GlobalKey&lt;NavigatorState&gt; <span class="keyword">get</span> navigatorKey =&gt; <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; setNewRoutePath(BookRoutePath configuration) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>BookRouterDelegate</code> 的泛型为 <code>BookRoutePath</code>，其中包含了决定显示哪个页面所需的所有状态。</p><p>此时，我们就可以将 <code>_BooksAppState</code> 中的路由相关的逻辑放到 <code>BookRouterDelegate</code> 中，这里，我们创建了一个 <code>GlobalKey</code> 对象，其他各个状态也都保存在这里面： </p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRouterDelegate</span> <span class="keyword">extends</span> <span class="title">RouterDelegate</span>&lt;<span class="title">BookRoutePath</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">ChangeNotifier</span>, <span class="title">PopNavigatorRouterDelegateMixin</span>&lt;<span class="title">BookRoutePath</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;NavigatorState&gt; navigatorKey;</span><br><span class="line"></span><br><span class="line">  Book _selectedBook;</span><br><span class="line">  <span class="built_in">bool</span> show404 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Book&gt; books = [</span><br><span class="line">    Book(<span class="string">'Stranger in a Strange Land'</span>, <span class="string">'Robert A. Heinlein'</span>),</span><br><span class="line">    Book(<span class="string">'Foundation'</span>, <span class="string">'Isaac Asimov'</span>),</span><br><span class="line">    Book(<span class="string">'Fahrenheit 451'</span>, <span class="string">'Ray Bradbury'</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  BookRouterDelegate() : navigatorKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>为了能在 URL 中显示正确的路径，我们也需要根据应用程序的当前状态返回一个  <code>BookRoutePath</code>  对象：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">BookRoutePath <span class="keyword">get</span> currentConfiguration &#123;</span><br><span class="line">  <span class="keyword">if</span> (show404) &#123;</span><br><span class="line">    <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _selectedBook == <span class="keyword">null</span></span><br><span class="line">      ? BookRoutePath.home()</span><br><span class="line">      : BookRoutePath.details(books.indexOf(_selectedBook));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，<code>build</code> 方法返回一个 <code>Navigator</code> 组件：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator(</span><br><span class="line">    key: navigatorKey,</span><br><span class="line">    pages: [</span><br><span class="line">      MaterialPage(</span><br><span class="line">        key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">        child: BooksListScreen(</span><br><span class="line">          books: books,</span><br><span class="line">          onTapped: _handleBookTapped,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">if</span> (show404)</span><br><span class="line">        MaterialPage(key: ValueKey(<span class="string">'UnknownPage'</span>), child: UnknownScreen())</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (_selectedBook != <span class="keyword">null</span>)</span><br><span class="line">        BookDetailsPage(book: _selectedBook)</span><br><span class="line">    ],</span><br><span class="line">    onPopPage: (route, result) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!route.didPop(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Update the list of pages by setting _selectedBook to null</span></span><br><span class="line">      _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">      show404 = <span class="keyword">false</span>;</span><br><span class="line">      notifyListeners();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为该类并不是组件，而是由 <code>ChangeNotifier</code> 实现，因此这里的 <code>onPopPage</code> 方法需要使用 <code>notifyListeners</code> 替代 <code>setState</code> 来改变状态，当 <code>RouterDelegate</code> 触发状态更新时，<code>Router</code> 同样会触发 <code>RouterDelegate</code> 的 <code>currentConfiguration</code> 方法并调用 <code>build</code> 方法创建出一个新的 <code>Navigator</code> 组件。</p><p><code>_handleBookTapped</code>方法也需要使用 <code>notifyListeners</code> 代替 <code>setState</code>：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _handleBookTapped(Book book) &#123;</span><br><span class="line">  _selectedBook = book;</span><br><span class="line">  notifyListeners();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新页面打开后，<code>Router</code> 会调用<code>setNewRoutePath</code> 方法来更新应用程序的路由状态：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; setNewRoutePath(BookRoutePath path) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (path.isUnknown) &#123;</span><br><span class="line">    _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">    show404 = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (path.isDetailsPage) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.id &lt; <span class="number">0</span> || path.id &gt; books.length - <span class="number">1</span>) &#123;</span><br><span class="line">      show404 = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _selectedBook = books[path.id];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  show404 = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RouteInformationParser"><a href="#RouteInformationParser" class="headerlink" title="RouteInformationParser"></a>RouteInformationParser</h4><p><code>RouteInformationParser</code> 内部含有一个钩子函数，接受路由信息（<code>RouteInformation</code>），我们可以在这里将它转换成指定的数据类型（<code>BookRoutePath</code>）并使用 Uri 解析：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRouteInformationParser</span> <span class="keyword">extends</span> <span class="title">RouteInformationParser</span>&lt;<span class="title">BookRoutePath</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;BookRoutePath&gt; parseRouteInformation(</span><br><span class="line">      RouteInformation routeInformation) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> uri = <span class="built_in">Uri</span>.parse(routeInformation.location);</span><br><span class="line">    <span class="comment">// Handle '/'</span></span><br><span class="line">    <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> BookRoutePath.home();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle '/book/:id'</span></span><br><span class="line">    <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (uri.pathSegments[<span class="number">0</span>] != <span class="string">'book'</span>) <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">      <span class="keyword">var</span> remaining = uri.pathSegments[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> id = <span class="built_in">int</span>.tryParse(remaining);</span><br><span class="line">      <span class="keyword">if</span> (id == <span class="keyword">null</span>) <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">      <span class="keyword">return</span> BookRoutePath.details(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle unknown routes</span></span><br><span class="line">    <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RouteInformation restoreRouteInformation(BookRoutePath path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isUnknown) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/404'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path.isHomePage) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path.isDetailsPage) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/book/<span class="subst">$&#123;path.id&#125;</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现仅针对此应用，并不是常规的路由解析解决方案，具体原理，我们以后再详细了解。最后，要使用这些定义好的类，我们还需要使用全新的 <code>MaterialApp.router</code> 构造函数并传入它们各自的实现：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp.router(</span><br><span class="line">  title: <span class="string">'Books App'</span>,</span><br><span class="line">  routerDelegate: _routerDelegate,</span><br><span class="line">  routeInformationParser: _routeInformationParser,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(BooksApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> author;</span><br><span class="line"></span><br><span class="line">  Book(<span class="keyword">this</span>.title, <span class="keyword">this</span>.author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _BooksAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BooksAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BooksApp</span>&gt; </span>&#123;</span><br><span class="line">  BookRouterDelegate _routerDelegate = BookRouterDelegate();</span><br><span class="line">  BookRouteInformationParser _routeInformationParser =</span><br><span class="line">      BookRouteInformationParser();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp.router(</span><br><span class="line">      title: <span class="string">'Books App'</span>,</span><br><span class="line">      routerDelegate: _routerDelegate,</span><br><span class="line">      routeInformationParser: _routeInformationParser,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRouteInformationParser</span> <span class="keyword">extends</span> <span class="title">RouteInformationParser</span>&lt;<span class="title">BookRoutePath</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;BookRoutePath&gt; parseRouteInformation(</span><br><span class="line">      RouteInformation routeInformation) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> uri = <span class="built_in">Uri</span>.parse(routeInformation.location);</span><br><span class="line">    <span class="comment">// Handle '/'</span></span><br><span class="line">    <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> BookRoutePath.home();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle '/book/:id'</span></span><br><span class="line">    <span class="keyword">if</span> (uri.pathSegments.length == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (uri.pathSegments[<span class="number">0</span>] != <span class="string">'book'</span>) <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">      <span class="keyword">var</span> remaining = uri.pathSegments[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> id = <span class="built_in">int</span>.tryParse(remaining);</span><br><span class="line">      <span class="keyword">if</span> (id == <span class="keyword">null</span>) <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">      <span class="keyword">return</span> BookRoutePath.details(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle unknown routes</span></span><br><span class="line">    <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RouteInformation restoreRouteInformation(BookRoutePath path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isUnknown) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/404'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path.isHomePage) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path.isDetailsPage) &#123;</span><br><span class="line">      <span class="keyword">return</span> RouteInformation(location: <span class="string">'/book/<span class="subst">$&#123;path.id&#125;</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRouterDelegate</span> <span class="keyword">extends</span> <span class="title">RouterDelegate</span>&lt;<span class="title">BookRoutePath</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">ChangeNotifier</span>, <span class="title">PopNavigatorRouterDelegateMixin</span>&lt;<span class="title">BookRoutePath</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;NavigatorState&gt; navigatorKey;</span><br><span class="line"></span><br><span class="line">  Book _selectedBook;</span><br><span class="line">  <span class="built_in">bool</span> show404 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Book&gt; books = [</span><br><span class="line">    Book(<span class="string">'Stranger in a Strange Land'</span>, <span class="string">'Robert A. Heinlein'</span>),</span><br><span class="line">    Book(<span class="string">'Foundation'</span>, <span class="string">'Isaac Asimov'</span>),</span><br><span class="line">    Book(<span class="string">'Fahrenheit 451'</span>, <span class="string">'Ray Bradbury'</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  BookRouterDelegate() : navigatorKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line"></span><br><span class="line">  BookRoutePath <span class="keyword">get</span> currentConfiguration &#123;</span><br><span class="line">    <span class="keyword">if</span> (show404) &#123;</span><br><span class="line">      <span class="keyword">return</span> BookRoutePath.unknown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _selectedBook == <span class="keyword">null</span></span><br><span class="line">        ? BookRoutePath.home()</span><br><span class="line">        : BookRoutePath.details(books.indexOf(_selectedBook));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Navigator(</span><br><span class="line">      key: navigatorKey,</span><br><span class="line">      pages: [</span><br><span class="line">        MaterialPage(</span><br><span class="line">          key: ValueKey(<span class="string">'BooksListPage'</span>),</span><br><span class="line">          child: BooksListScreen(</span><br><span class="line">            books: books,</span><br><span class="line">            onTapped: _handleBookTapped,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">if</span> (show404)</span><br><span class="line">          MaterialPage(key: ValueKey(<span class="string">'UnknownPage'</span>), child: UnknownScreen())</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (_selectedBook != <span class="keyword">null</span>)</span><br><span class="line">          BookDetailsPage(book: _selectedBook)</span><br><span class="line">      ],</span><br><span class="line">      onPopPage: (route, result) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!route.didPop(result)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the list of pages by setting _selectedBook to null</span></span><br><span class="line">        _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">        show404 = <span class="keyword">false</span>;</span><br><span class="line">        notifyListeners();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; setNewRoutePath(BookRoutePath path) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isUnknown) &#123;</span><br><span class="line">      _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">      show404 = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path.isDetailsPage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.id &lt; <span class="number">0</span> || path.id &gt; books.length - <span class="number">1</span>) &#123;</span><br><span class="line">        show404 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      _selectedBook = books[path.id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _selectedBook = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show404 = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleBookTapped(Book book) &#123;</span><br><span class="line">    _selectedBook = book;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailsPage</span> <span class="keyword">extends</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Book book;</span><br><span class="line"></span><br><span class="line">  BookDetailsPage(&#123;</span><br><span class="line">    <span class="keyword">this</span>.book,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: ValueKey(book));</span><br><span class="line"></span><br><span class="line">  Route createRoute(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialPageRoute(</span><br><span class="line">      settings: <span class="keyword">this</span>,</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> BookDetailsScreen(book: book);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRoutePath</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isUnknown;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.home()</span><br><span class="line">      : id = <span class="keyword">null</span>,</span><br><span class="line">        isUnknown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.details(<span class="keyword">this</span>.id) : isUnknown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  BookRoutePath.unknown()</span><br><span class="line">      : id = <span class="keyword">null</span>,</span><br><span class="line">        isUnknown = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isHomePage =&gt; id == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isDetailsPage =&gt; id != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksListScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Book&gt; books;</span><br><span class="line">  <span class="keyword">final</span> ValueChanged&lt;Book&gt; onTapped;</span><br><span class="line"></span><br><span class="line">  BooksListScreen(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.books,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onTapped,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: [</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> book <span class="keyword">in</span> books)</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(book.title),</span><br><span class="line">              subtitle: Text(book.author),</span><br><span class="line">              onTap: () =&gt; onTapped(book),</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailsScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Book book;</span><br><span class="line"></span><br><span class="line">  BookDetailsScreen(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.book,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="keyword">if</span> (book != <span class="keyword">null</span>) ...[</span><br><span class="line">              Text(book.title, style: Theme.of(context).textTheme.headline6),</span><br><span class="line">              Text(book.author, style: Theme.of(context).textTheme.subtitle1),</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnknownScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">'404!'</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，在 Chrome 中运行该示例就会展示当前访问链接的路由页面，并在手动修改 URL 后也会导航到正确的页面。</p><h4 id="TransitionDelegate"><a href="#TransitionDelegate" class="headerlink" title="TransitionDelegate"></a>TransitionDelegate</h4><p>我们也可以通过 <code>TransitionDelegate</code> 实现自定义的路由动画。</p><p>首先，向 <code>Navigator</code> 传入一个自定义 <code>TransitionDelegate</code> 对象：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New:</span></span><br><span class="line">TransitionDelegate transitionDelegate = NoAnimationTransitionDelegate();</span><br><span class="line"></span><br><span class="line">      child: Navigator(</span><br><span class="line">        key: navigatorKey,</span><br><span class="line">        <span class="comment">// New:</span></span><br><span class="line">        transitionDelegate: transitionDelegate,</span><br></pre></td></tr></table></figure><p>例如，以下实现回关闭所有路由过渡动画：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoAnimationTransitionDelegate</span> <span class="keyword">extends</span> <span class="title">TransitionDelegate</span>&lt;<span class="title">void</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">Iterable</span>&lt;RouteTransitionRecord&gt; resolve(&#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;RouteTransitionRecord&gt; newPageRouteHistory,</span><br><span class="line">    <span class="built_in">Map</span>&lt;RouteTransitionRecord, RouteTransitionRecord&gt;</span><br><span class="line">        locationToExitingPageRoute,</span><br><span class="line">    <span class="built_in">Map</span>&lt;RouteTransitionRecord, <span class="built_in">List</span>&lt;RouteTransitionRecord&gt;&gt;</span><br><span class="line">        pageRouteToPagelessRoutes,</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="keyword">final</span> results = &lt;RouteTransitionRecord&gt;[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> pageRoute <span class="keyword">in</span> newPageRouteHistory) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pageRoute.isWaitingForEnteringDecision) &#123;</span><br><span class="line">        pageRoute.markForAdd();</span><br><span class="line">      &#125;</span><br><span class="line">      results.add(pageRoute);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> exitingPageRoute <span class="keyword">in</span> locationToExitingPageRoute.values) &#123;</span><br><span class="line">      <span class="keyword">if</span> (exitingPageRoute.isWaitingForExitingDecision) &#123;</span><br><span class="line">        exitingPageRoute.markForRemove();</span><br><span class="line">        <span class="keyword">final</span> pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];</span><br><span class="line">        <span class="keyword">if</span> (pagelessRoutes != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">final</span> pagelessRoute <span class="keyword">in</span> pagelessRoutes) &#123;</span><br><span class="line">            pagelessRoute.markForRemove();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      results.add(exitingPageRoute);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>NoAnimationTransitionDelegate</code> 重写了 <code>TransitionDelegate</code> 的 <code>resolve()</code> 方法，该方法可以指定各种路由页面过渡动画是否展示，有如下几个方法：</p><ul><li><p><code>markForPush</code> ，打开页面时使用过渡动画。</p></li><li><p><code>markForAdd</code>，打开页面时不使用过渡动画。</p></li><li><p><code>markForPop</code>，弹出页面时使用动画，并通知应用，即将该事件传递给 <code>AppRouterDelegate</code> 的 <code>onPopPage</code> 函数。</p></li><li><p><code>markForComplete</code> ，弹出页面时不使用过渡动画，同样会通知应用。</p></li><li><code>markForRemove</code> ，弹出页面时不使用过渡动画，不会通知应用。</li></ul><p>该类仅影响最新的声明式 API，因此后退按钮仍显示过渡动画。</p><p>大致流程如下：这里遍历了所有声明的页面，包括新页面（<code>newPageRouteHistory</code>）和已存在的页面（<code>locationToExitingPageRoute</code>），使用上述几个方法标记它们。在新页面中使用 <code>markForAdd</code> 去除打开的过渡动画，<code>locationToExitingPageRoute</code> 中则使用 <code>markForRemove</code> 不展示过渡动画，并不会通知应用。<a href="http://gist.github.com/5ce79aee5b5f83cfababa97c9cf0a204" target="_blank" rel="noopener">查看完整示例</a>。</p><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>我们也提供了嵌套路由的示例，可以实现 <code>BottomAppBar</code> 中为每个 Tab 中的组件实现各自的路由栈，<a href="http://gist.github.com/bbca91e23bbb4d39247fa922533be7c9" target="_blank" rel="noopener">查看具体代码</a>。</p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>本文，我们主要探讨了如何针对这个特定的应用使用这些新的路由 API，大家可以以此为基础构建出更高级的实现，在后续的文章中我也会更深入的讨论关于 Navigator 2.0 的更多话题，欢迎关注公众号「MeandNi」。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p><a href="https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade" target="_blank" rel="noopener">https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade</a></p><p><a href="https://github.com/flutter/flutter/issues/12146" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/12146</a></p><p>关注公众号「Meandni」，及时阅读最新技术动态。</p><p><img src="/images/qrcode_for_small.jpg" alt="扫一扫，Meandni"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择合适的数据库（缓存、对象存储、SQL、NoSQL等）</title>
      <link href="/2020/10/04/how-to-choose-database/"/>
      <url>/2020/10/04/how-to-choose-database/</url>
      
        <content type="html"><![CDATA[<h3 id="如何为项目选择合适的数据库（缓存、对象存储、SQL、NoSQL等）"><a href="#如何为项目选择合适的数据库（缓存、对象存储、SQL、NoSQL等）" class="headerlink" title="如何为项目选择合适的数据库（缓存、对象存储、SQL、NoSQL等）"></a>如何为项目选择合适的数据库（缓存、对象存储、SQL、NoSQL等）</h3><p>数据库本身功能非常单一，仅可作为数据的存储介质，但错误的数据库选型带来的代价可能就是项目<strong>性能的大幅下降</strong>，对于很多企业应用来说这也是致命的伤害，另外，选择不同数据库类型同样会决定系统中其他模块的设计，因此，数据库选型对于整个项目非常重要，我们通常也称这种需求为<strong>非功能性需求（NFRs，non-functional requirements）</strong>，对于数据库，主要需要考虑如下三点因素：</p><ul><li><strong>数据结构</strong></li><li><strong>查询模式</strong></li><li><strong>数据规模</strong></li></ul><p>目前，市面上已经有各类存储解决方案了，本文我们就来讨论一下如何在这些方案中选择最适合自己的方案。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>如果项目需要<strong>频繁调用数据库 API 或者一些高延迟的远程服务</strong>，那么可能需要最先考虑在客户端和数据库之间使用缓存来降低延迟。目前，常用的缓存方案有 Memcached，Hazelcast，Redis，这些方案大同小异，但 Redis 使用最广泛且稳定，是目前国内最常用的数据库缓存解决方案。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-word-image-86.png" alt="缓存图示"></p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>如果需要开发一款抖音、B 站之类的产品，就<strong>需要存储大量图像、视频等数据</strong>，仅仅一个数据库可能并不能满足我们的需求，因为这时需要存储的是文件而非一般的数据信息，数据库本质依然只能用来查询信息数据而已，而文件本身也并不用“查询”，只需要按需拿到这整个文件即可，这种情况下，符合项目要求的解决方案就是<strong>对象（Blob）存储方案</strong>，如 Amazon S3，通常，Blob 存储方案还可以与 CDN 结合使用来减少延迟，这样就可以实现无地理位置差异提供内容服务。</p><h3 id="提供文本搜索功能"><a href="#提供文本搜索功能" class="headerlink" title="提供文本搜索功能"></a>提供文本搜索功能</h3><p>淘宝、京东这些大型应用都会提供内容的搜索功能，这样就可以方便用户按照商品类型、品牌对数据进行分类搜索，这种功能通常会使用 <strong>Solr</strong> 或 <strong>Elasticsearch</strong> 之类的搜索引擎服务，这类搜索服务通常也会支持<strong>模糊搜索</strong>，例如会考虑到用户拼写错误的情况，这会很大程度上提升用户体验。</p><p>但是，搜索引擎不是是数据库，并不能保证我们的数据不会丢失，因此我们不能使用 Elasticsearch 这类搜索引擎作为数据源，这里就需要我们配合两者使用，将数据库中的内容加载到 Elasticsearch 中来降低搜索延迟，然后在以此为基础提供搜索功能。</p><h3 id="时序数据库（TSDB，Time-series-database）"><a href="#时序数据库（TSDB，Time-series-database）" class="headerlink" title="时序数据库（TSDB，Time series database）"></a>时序数据库（TSDB，Time series database）</h3><p>时序数据库全称为时间序列数据库（Time series database），是关系型数据库的一种，<strong>主要用于处理带时间标签（按照时间的顺序变化，即时间序列化）的数据，带时间标签的数据也称为时间序列数据</strong>。</p><p>如果我们要开发的系统对时间特别敏感，如股票交易、财务分析系统，此时就需要经常对一定时间的内数据分析，如过去 1周，10天，1个月，1 年等等，TSDB 会以毫秒级的速度给出这些我们需要的数据，传统数据库很难做到这一点。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-2020-10-04-2020-10-04-downsample.png" alt=""></p><p>目前，市面上常用的时序数据库有 <strong>OpenTSDB、InfluxDB</strong> 等。</p><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>很多项目也会需要一类能够<strong>存储巨量数据的数据库</strong>，如滴滴需要存储所有订单信息来分析哪个城市、那个时间段为使用率最高，这些系统通常和常规用户可感知的交易不同，可以使用脱机类型的数据仓库。<strong>Hadoop</strong> 是目前主流的数据仓库解决方案。</p><h3 id="SQL-OR-NoSQL"><a href="#SQL-OR-NoSQL" class="headerlink" title="SQL OR NoSQL"></a>SQL OR NoSQL</h3><p>如文章开头所述，数据结构是我们用来做数据库选型时的重要因素之一，如果我们要存储结构化或者可以表格形式表示的数据，则可以使用关系型数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-2020-10-04-2020-10-04-2020-10-04-2020-10-04-1*xtPrVMwIcya4ObgwTeg9GA-20201004224940857.jpeg" alt="关系型数据库"></p><p>同时，我们还将考虑数据库是否需要拥有 <strong>ACID</strong> 性质，即原子性（Atomicity），一致性（Consistency），隔离型（Isolation），持久性（Durability）四大性质。</p><ul><li><p><strong>原子性</strong>，保证所有操作要么全有要么全无。</p></li><li><p><strong>一致性</strong>，保证操作前后数据库状态一致。</p></li><li><strong>隔离性</strong>，意味着多个事务单独进行，一个事务将不受另一正在进行的并行事务的影响。这能保证数据库应该能够处理并发事务而不会导致数据不一致的情况。</li><li><strong>持久性</strong>，保证一旦事务完成，更改将被永久写入磁盘，并且不会因系统故障而丢失。</li></ul><p>如果我们的项目需要 ACID，则需要使用关系数据库（RDBMS），如 MySQL，Oracle，Postgres 等，但是，如果不需要 ACID，那么也可以<strong>非关系性数据库</strong>。</p><p>例如，项目中需要为商品建立目录索引，每个商品通常会有不同的属性和信息，如药品有保质期，冰箱有节能等级等等，再例如我们的用户表单中每位用户也可能会有不同的属性值，在这种情况下我们的数据就不能够以表格形式表示，可以选择使用 <strong>NoSQL</strong> 数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-2020-10-04-2020-10-04-2020-10-04-1*--zqXFzt3rNFLF4hvkgX7Q-20201004224936367.jpeg" alt="文档型数据库"></p><p>另外，除了储存，我们通常还需要查询这些类型的得到数据，这就需要考虑<strong>查询模式</strong>这个要素，我们会根据存储的数据类型和查询类型来决定最终使用哪种数据库。如果项目中会含有大量数据，包括各种各样的属性和各种各种的查询请求，就需要使用文档型数据库（<strong>Document DB</strong>），如 <strong>Couchbase、MongoDB</strong>。</p><blockquote><p>Elasticsearch 和 Solr 也是特殊文档型数据库。</p></blockquote><p>如果我们的数据并没有各种各样的属性，查询类型也很有限，简单增删改查足以，但是数据库的存储量很大，如滴滴司机的位置，这类数据每时每刻都会增加，这种情况下，我们通常会使用柱状存储模型的数据库，也称<strong>列型（Columnar DBs）数据库</strong>，如 <strong>Cassandra、HBase</strong>。这类数据库每个列都有一个 column key 标识，每个 column key下对应若干 value，可以很轻松的获得包含某个列的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-2020-10-04-2020-10-04-1*4qcFp6XOvQj3_uf4_Jx-VA-20201004224928382.jpeg" alt="关系型中的行型数据库与列型数据库"></p><p>在个人的小型项目我们通常会选择 Cassandra，因为非常轻量而且部署起来非常方便，性能也完全不亚于 HBase，而 HBase 基于 Hadoop 显得过于臃肿。因此，我们可以说在数据查询时可以直接通过 where 语句指定 key 查询时，可以选择 Cassandra。</p><p>如果我们将滴滴中与打车相关的订单数据存储在 Cassandra 后，司机的 id 可以作为每个列分区的 column key，当我们想要查询特定时间段内该司机的路程，Cassandra 就可以立即帮我们在对应列中查询到这些数据，但这时，当我们想要查询某个日期内乘客的乘车记录，由于客户 ID 并不是分区 column key，因此 Cassandra 就需要查询整个分区，这时 Cassandra 性能就会大打折扣！</p><p>这种情况下，我们可以使用不同的分区 key 将相同的数据复制到另一个表或列中，这时，当我们收到有关客户 ID 和日期的查询时，我们可以将其直接定向到分区 kay 为客户 ID 的表中，这就是<strong>查询的种类少但数据量大</strong>的意思，只要查询的类型相似，Cassandra（和 HBase）就可以无限扩展，但如果查询的种类非常多的话，我们就必须为每个分区 key 一次又一次地复制，直到达到一定的限制。</p><p>如果我们不能控制查询的类型，还是选择采用 MongoDB 之类的方案，但是，如果我们只需要针对少数几种查询的大规模扩展，那么 Cassandra 就是完美的解决方案。</p><p><img src="https://cdn.jsdelivr.net/gh/meandni/blogimg@main/img/2020-10-04-2020-10-04-2020-10-04-2020-10-04-2020-10-04-choose-database.jpg" alt="数据库选择流程图"></p><p>现在，我们大概知道了基本的方向了，如果存储结构化数据并且需要 ACID 性质，则使用关系数据库（如 MySQL），如果存储具有许多属性的海量数据，则可以使用文档数据库（如 Mongo DB），如果数据非常简单，查询种类较少，则使用列式数据库（如 Cassandra），但是实际项目中，还并不这么简单。</p><h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>我们再以淘宝为例，对于一个商品来说，库存中只有一件，但是很多用户想要买，那么最终应该只能卖给一个用户，这就需要我们的数据库拥有 ACID 性质，因此，需要 MySql 这类关系型数据库，但是淘宝中的商品数据也在不断增加，属性也多种多样，我们也需要使用 Cassandra 这种列存储模型的 NoSQL 数据库。我们应该选择哪一种？在实际项目中，我们通常会混合使用这两种数据库，例如，将尚未交付的订单数据存储在 MySQL 数据库中，一旦订单完成，我们就可以将其移至 Cassandra 进行永久存储。</p><p>我们的需求还会变得更复杂，假如我们需要为购买商品的客户构建一个报告系统，淘宝上的商品通常会由不同品牌、不同版本向不同的客户出售，因此，报告也不能针对单个产品，而应针对产品的子集，这类需求可以使用 Cassandra 或 MySQL 实现，但是更好的方案是使用 Mongo DB 这类文档型数据库，我们可以将订单数据的子集保存在 MongoDB 中，这些数据可以告诉我们哪些用户在什么时候，什么日期购买了某种商品的数量。因此，如果我们要查询有多少人在上个月购买了 MacBook，我们可以从 MongoDB 中获得订单 ID，并使用此订单 ID 来从 Cassandra 或 MySQL 中查询其他的数据。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p><a href="https://www.influxdata.com/time-series-database/" target="_blank" rel="noopener">https://www.influxdata.com/time-series-database/</a></p><p><a href="https://en.wikipedia.org/wiki/Column-oriented_DBMS" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Column-oriented_DBMS</a></p><p>关注公众号「Meandni」，及时阅读最新技术动态。</p><p><img src="/images/qrcode_for_small.jpg" alt="扫一扫，Meandni"></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 技术选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观摩！Flutter 1.22 正式发布</title>
      <link href="/2020/10/02/d81/"/>
      <url>/2020/10/02/d81/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-1-22-正式发布！"><a href="#Flutter-1-22-正式发布！" class="headerlink" title="Flutter 1.22 正式发布！"></a>Flutter 1.22 正式发布！</h2><blockquote><p>继 9 月 23 号发布 <a href="https://mp.weixin.qq.com/s?__biz=MzIzMjYyNzQ2Ng==&amp;mid=2247483816&amp;idx=1&amp;sn=84b9a7cc09253e621632bfcbccf3ea70&amp;chksm=e8934dcddfe4c4dbe0d13f818558098506a7999c19bc2d775cdc937e25cd1fbca2c1f56d3dd1&amp;token=1919414612&amp;lang=zh_CN#rd" target="_blank" rel="noopener">Flutter Windows 内测版</a> 之后刚过几天，Flutter 官方在昨夜凌晨正式发布了 Flutter 1.22。</p><p>本次版本的升级又带来了新一轮地功能发布，性能改进和问题修复。恰逢移动平台新版本（iOS 14/Android 11）的发布季，此次的版本更新保证了 Flutter 应用在 Android 11 和 iOS 14 上的兼容性，面向 iOS 14，本次更新包括了对 Xcode 12，新 Icon 的更新以及 App Clips 功能的预览。对于Android 11，此次更新包括了多种屏幕适配以及软键盘动画的流畅性优化。</p><p>距离上个版本发布刚刚两个月，此次版本的更新最为快速，但质量却依然没有下降，Github 数据显示此次更新共解决了 3,024 个 issue，合并了 197 个贡献者的 1,944 个PR，而在这些贡献者中有 114 位（58％）来自社区的支持，他们共提交了 271 个PR，贡献量最大的是 <a href="https://github.com/a14n" target="_blank" rel="noopener">a14n</a>，共提交了 20 个 PR，</p><p>除了对新平台的全力支持外，Flutter 的本次更新也迎来了很多值得分享的话题，包括社区讨论最为热烈的 Android 状态恢复，新的 Material 按钮组件以及国际化和本地化支持与热重载并用等功能。此次更新也包括了全新的导航器（Navigator），稳定版 Platform Views （支持 Google Maps 和 WebView 插件）以及高频率设备下滚动性能的优化，同时，开发工具的更新也迎来了另一番景象，具体读者们详见正文。</p></blockquote><h3 id="新平台适配"><a href="#新平台适配" class="headerlink" title="新平台适配"></a>新平台适配</h3><h4 id="iOS-14"><a href="#iOS-14" class="headerlink" title="iOS 14"></a>iOS 14</h4><p>每当 Android/iOS 等平台推出系统的新版本时，Flutter 都会进行全面的整改来避免出现不兼容的现象。因此，iOS 14 的发布也推动了 Flutter 的新一轮更新，主要包括如下几点：</p><ul><li>XCode 12 仅支持 iOS 9.0 以上的版本，因此 Flutter 项目已将默认支持的版本从 8.0 更新到了 9.0。</li><li>Flutter 1.22 修复了在 iOS 14 系统下的的闪退和字体渲染的问题。</li><li>自 Flutter 1.20.4 起也已完全解决了部署到真机设备上出现的各种问题。</li><li>当应用程序访问其剪贴板时，会导致 Flutter 应用程序弹出错误通知，该问题也已在 1.20.4 中解决。</li><li>iOS 14 上存在禁止在设备上运行 debug 应用程序的限制（实际开发调试过程除外）。</li><li>考虑到网络安全性的问题，本地调试的 Flutter 应用程序会在 iOS 14 上显示一次性确认对话框（仅开发期间）。</li></ul><blockquote><p>如果你的 Flutter 应用程序需要运行在 iOS 14 系统上，我们强烈建议你将 Flutter 版本更新到 1.22 并立即部署到 App Store 中，这样可以确保你的 iOS 14 用户获得最佳体验。</p></blockquote><p>有关 Flutter 如何适配 iOS 14 的更多信息，包括如何添加到原生应用、deep linking 等问题，可以参阅官网 <a href="https://flutter.dev/docs/development/ios-14" target="_blank" rel="noopener">iOS 14文档</a>。</p><p>我们的目标一直是希望开发者们能完全脱离所有工具和 SDK 的更新而者专注于应用本身的业务逻辑，这就要求我们需要充分支持 iOS 14 的各种新的特性。</p><p>本次，我们就针对  iOS 新发布的 SF Symbols 字体做了更新支持，对 <a href="https://pub.dev/packages/cupertino_icons" target="_blank" rel="noopener">cupertino_icon</a> 库做了一系列的更新，现在只需要将 cupertino_icon 更新到最新的 1.0 版本，就能自动将 CupertinoIcons 映射成新样式的图标，Flutter 1.22 后，CupertinoIcons 也额外提供了 900 个新图标。</p><p><img src="/images/0*ZGKu3IhnPNp6fS_e-20201002011622288.png" alt=""></p><p>读者们可以在 <code>cupertino_icons</code> 预览页面上看到完整的图标列表，详情参见<a href="https://flutter.dev/docs/release/breaking-changes/cupertino-icons-1.0.0" target="_blank" rel="noopener">迁移详细信息页面</a>。</p><p>开发者可以在 iOS 14上 尝试使用 Flutter 的另一个功能就是 <a href="https://developer.apple.com/app-clips/" target="_blank" rel="noopener">App Clips</a>（轻应用），这是 iOS 14 推出的一项新功能，它支持 10MB 以下轻量级应用程序的快速，免安装打开，而在 1.22 版中，我们就可以试一下 Flutter 在 iOS 上支持的 App Clip 功能了。</p><p><img src="/images/0*8MER4IM-IEt2ye2a-20201002011623364.png" alt="Flutter App Clip"></p><p>有关如何使用 Flutter 构建 App Clip 的更多详细信息，参见<a href="https://flutter.dev/docs/development/platform-integration/ios-app-clip" target="_blank" rel="noopener">官方文档</a>，也可以参考这个<a href="https://github.com/flutter/samples/tree/master/ios_app_clip" target="_blank" rel="noopener">简单的示例项目</a>。</p><h4 id="Android-11"><a href="#Android-11" class="headerlink" title="Android 11"></a>Android 11</h4><p>Flutter 的此次更新也同样同步了本月发布的 Android 11。为了支持 Android 11 中引入的两个新功能，Flutter 框架层和引擎层都已做了相应的更新。首先，Flutter 现在已经<strong>支持多种全新 Android 屏幕的适配</strong>，如下图：</p><p><img src="/images/0*lPO4ueKwxvV0QP_I-20201002011622857.png" alt=""></p><p>通过使用 <code>MediaQuery</code> 和 <code>SafeArea</code> 这两个组件，开发者就可以确保将展示的 UI 和交互式组件放置在设备显示屏的无障碍区域中。另外，目前我们需要尽量避免在瀑布屏边缘区域使用手势检测器，因为这些手势检测器可能会导致意外触摸。</p><p>其次，显示软件键盘时的动画也已经与 Android 11 同步。</p><p><img src="/images/0*DFRjYzbqIc5kOoDm-20201002011623193.gif" alt=""></p><p>此前， Flutter 一直存在 <a href="https://github.com/flutter/flutter/issues/19279" target="_blank" rel="noopener">#19279</a> 这个问题，其中系统键盘的显示/隐藏动画与 Flutter 并不同步，这个问题也已经在此次更新中被修复。</p><p>关于 Android 插件 API。去年，Flutter 1.12 退出了一套全新的 Flutter 插件 API，我们开发了 v2 API 使开发者们能够更好的将 Flutter 嵌入到已有的原生应用中。据我们统计，到目前为止已经有超过 80％ 的 Android 插件使用了新的 Android API 了，因此，从本次发布 1.22 开后，我们便不再维护旧的 v1 API。</p><p>如果仍在使用 Android v1 API，可能会导致如下问题：</p><ul><li>无法使用新开发的插件</li><li>Flutter工具的 <code>—no-enable-android-embedding-v2</code>config 标志已被默认删除</li><li>仍在使用 v1 API 的旧版应用程序在构建期间会显示弃用警告，并指向<a href="https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration" target="_blank" rel="noopener">支持新的Android插件API</a>文档</li></ul><p>同时，如果你仍然有基于 v1 Android API 的 Flutter 应用程序，它虽然能够正常运行，但是很可能会使用遇到仅支持 v2 API 的新插件，而这些插件不能被 v1 Android API 使用。更多详细信息，请参见<a href="https://flutter.dev/docs/release/breaking-changes/android-v1-embedding-create-deprecation" target="_blank" rel="noopener">重大更改文档</a>。</p><h3 id="全新的-Button-组件"><a href="#全新的-Button-组件" class="headerlink" title="全新的 Button 组件"></a>全新的 Button 组件</h3><p><img src="/images/1*crNLxg7CCtlQkB4mLI_ErA-20201002011622976.png" alt=""></p><p>之前的版本中，Flutter 已经有了一套完备的按钮组件，但使用起来却很麻烦，Material 规范也增加了多个新样式的按钮。所以，为了使 Flutter 保持与 Material 的同步，我们正式地宣布 Flutter 1.22 将引入全新的 “Button” 按钮。</p><p>新的 Button 组件的命名规范也与 <a href="https://material.io/components/buttons/" target="_blank" rel="noopener">Material Design 规范</a>，如下。</p><p><img src="/images/1*di6uPEKEsRHoFtRryHeWPg-20201002011623006.png" alt=""></p><p>DartPad 上有一个非常好的<a href="https://dartpad.dev/e560e1c2e4455ad53aac245079ccdcf2" target="_blank" rel="noopener">在线演示示例</a>，同时，之前的 <code>FlatButton</code>，<code>OutlineButton</code>，<code>RaisedButton</code>，<code>ButtonBar</code>，<code>ButtonBarTheme</code> 并不会被弃用，开发者可以按照需求混合使用旧按钮与新按钮。</p><h3 id="全新的国际化和本地化的支持"><a href="#全新的国际化和本地化的支持" class="headerlink" title="全新的国际化和本地化的支持"></a>全新的国际化和本地化的支持</h3><p>自 Flutter 发布以来，已经为应用提供了较好的国际化（i18n）和本地化（l10n）所需的核心功能的支持，而在此次的新版本中，我们也将该功能的最佳实践纳入了我们的开发工具中，并且，在添加新的 l10n 信息时启用了热重装支持来直接更新应用程序。</p><p><img src="/images/0*UBVlGmhw5NUWbg5I.gif" alt=""></p><p>如果你想了解有关 Flutter  l10n 的更多信息，包括本地化消息，带有参数，日期，数字和货币的消息，请参见 <a href="http://flutter.dev/go/i18n-user-guide" target="_blank" rel="noopener">Flutter Internationalization 用户指南</a>。</p><p>此外，如果你对 i18n 和 l10n 感兴趣，你可能还对那些字符串不包含在普通 ASCII 字符的字符串，例如 Unicode 和 emoji 的问题比较惯性。本次，Dart 团队也发布了 <a href="https://pub.dev/packages/characters" target="_blank" rel="noopener">characters</a> 软件包可以帮助开发人员处理 Unicode（扩展）字符簇。该库可以帮助开发者们解决诸如如何正确地将字符串（如“ A 🇬🇧 text in English”）缩写为前 15 个字符的问题，使用 <code>String</code> 类，该字符串可以缩写为 “ A 🇬🇧 text in”，它仅是 12 个用户可感知的字符。另一方面，使用 <code>characters</code> 也可以生成 “A 🇬🇧 text in Eng” 的正确缩写。</p><p><a href="https://github.com/flutter/flutter/pull/59267" target="_blank" rel="noopener">此PR</a> 使用 <code>characters</code> 完美的处理了这些复杂的字符，例如，当 <code>TextField</code> 带有最大长度 <code>maxLength</code> 限制时，像 👨‍👩‍👦 这样的字符现在可以正确地算作单个字符，另外，<a href="https://github.com/flutter/flutter/pull/59620" target="_blank" rel="noopener">此PR</a>，在Flutter所在的项目中，字符包均可自动在项目中使用，而无需手动添加。希望这使得处理来自所有语言环境的各种字符串变得更加容易。有关 character 包的更多详细信息，请查看文章 <a href="https://medium.com/dartlang/dart-string-manipulation-done-right-5abd0668ba3e" target="_blank" rel="noopener">Dart string manipulation done right 👉</a>。</p><h3 id="Google-Maps-和-WebView-插件准备投入生产"><a href="#Google-Maps-和-WebView-插件准备投入生产" class="headerlink" title="Google Maps 和 WebView 插件准备投入生产"></a>Google Maps 和 WebView 插件准备投入生产</h3><p>Flutter 团队通常会经过仔细考虑后才会将某些标签标记为 “production ready”，在此之前，我们通常都会对其进行了全面测试。对于<code>google_maps_flutter</code> 和 <code>webview_flutter</code>  这两个插件底层都是使用 <a href="http://flutter.dev/docs/development/platform-integration/platform-views" target="_blank" rel="noopener">Platform Views</a> 实现，从而允许将 Android 和 iOS 的原生 UI 组件嵌入在 Flutter 应用程序中。在此次的 Flutter 版本中，我们欣然宣布，我们已经对框架层进行了强化，完全能够将这两个插件都声明为可投入生产（即 “production ready”）。</p><p><img src="/images/0*luz0EiazQQqsAEC4-20201002011629493.gif" alt=""></p><p>在 Flutter 1.22 中，我们添加了一个可替代 Platform Views 的方案，该方案修复了<a href="https://github.com/flutter/flutter/issues/61133" target="_blank" rel="noopener">所有已知的键盘以及 Android 视图的可访问性问题</a>。此外，它还适用于 19 级及以上的 Android API（以前要求 20 级）。我们还对 iOS 上的线程进行了改进，使平台视图更高效，更可靠（并且不再需要你将 <code>io.flutter.embedded_views_preview</code> 标志添加到 iOS 中 <code>Info.plist</code>）<em>。</em></p><p>该 <code>webview_flutter</code> 插件支持新的 Android Platform Views 模式，但当前需要手动启用，今后在社区中得到广泛应用后，我们会默认开启该功能</p><p>Google Maps 和 WebView 插件已经从 Platform Views 的改进中受益。如果你想使用平台视图在 iOS 或 Android 上<a href="https://flutter.dev/docs/development/platform-integration/platform-views" target="_blank" rel="noopener">嵌入</a>自己的原生 UI 组件，可以参阅 <a href="https://flutter.dev/docs/development/platform-integration/platform-views" target="_blank" rel="noopener">Hosting native Android and iOS views in your Flutter app with Platform Views</a>。</p><h3 id="Navigator-2-0"><a href="#Navigator-2-0" class="headerlink" title="Navigator 2.0"></a>Navigator 2.0</h3><p>如果你之前在 Flutter 应用程序中使用过 Navigator，则可能已经注意到核心数据结构（用户正在浏览的页面路由栈）对你是不可见的。每次要进行管理时，需要调用  <code>Navigator.pop()</code>  或 <code>Navigator.push()</code>。例如，假设你要在主页上显示一系列组件，并允许用户点击一个组件以进入该颜色的详细信息页面，如下图。</p><p><img src="/images/0*OVbaUaMkAXrpLQCy-20201002011624819.png" alt=""></p><p>我们可以使用下面这种方式实现这两个简单的 UI 页面：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorListScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">List</span>&lt;Color&gt; colors;</span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">void</span> <span class="built_in">Function</span>(Color color) onTapped;</span><br><span class="line"> ColorListScreen(&#123;<span class="keyword">this</span>.colors, <span class="keyword">this</span>.onTapped&#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">       appBar: AppBar(title: Text(<span class="string">'Colors'</span>)),</span><br><span class="line">       body: Column(</span><br><span class="line">         children: [</span><br><span class="line">           <span class="comment">// you can see and decide on every color in this list</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">final</span> color <span class="keyword">in</span> colors)</span><br><span class="line">             Expanded(</span><br><span class="line">               child: GestureDetector(</span><br><span class="line">                 child: Container(color: color),</span><br><span class="line">                 onTap: () =&gt; onTapped(color),</span><br><span class="line">               ),</span><br><span class="line">             )</span><br><span class="line">         ],</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> Color color;</span><br><span class="line"> <span class="keyword">const</span> ColorScreen(&#123;<span class="keyword">this</span>.color&#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">       appBar: AppBar(title: Text(<span class="string">'Color'</span>)),</span><br><span class="line">       body: Container(color: color),</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面这种 Navigator 1. 0 方式，可以非常简单地实现在这两个页面之间的导航：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ColorAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ColorApp</span>&gt; </span>&#123;</span><br><span class="line"> <span class="built_in">List</span>&lt;Color&gt; _colors = [Colors.red, Colors.green, Colors.blue];</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) =&gt; MaterialApp(</span><br><span class="line">       title: <span class="string">'Color App'</span>,</span><br><span class="line">       home: Builder(</span><br><span class="line">         builder: (context) =&gt; ColorListScreen(</span><br><span class="line">           colors: _colors,</span><br><span class="line">           <span class="comment">// the Navigator manages the list of pages itself; you can only push and pop</span></span><br><span class="line">           onTapped: (color) =&gt; Navigator.push(</span><br><span class="line">             context,</span><br><span class="line">             MaterialPageRoute(builder: (context) =&gt; ColorScreen(color: color)),</span><br><span class="line">           ),</span><br><span class="line">         ),</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需调用  <code>Navigator.push()</code> ，即可在第一个页面打开第二个页面，从而在路由栈中创建两个页面的实例，但是，和在 ColorListScreen 中的 build 方法中显式地创建 Containers 列表不同，该路由栈并不可见，因此很难管理一些特殊情况，如处理由原生嵌入提供的初始路由的 deep linking，或者来自 Web 的 URL 或来自 Android 的 intent，管理同一页面的不同顺序之间的嵌套路由也极其困难。</p><p>Navigator 2.0 通过使页面堆栈可见解决了这些问题，甚至更多。下面这段代码是在 <code>ColorListScreen</code> 和 <code>ColorScreen</code> 之间的另一个版本 ：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ColorAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ColorApp</span>&gt; </span>&#123;</span><br><span class="line"> Color _selectedColor;</span><br><span class="line"> <span class="built_in">List</span>&lt;Color&gt; _colors = [Colors.red, Colors.green, Colors.blue];</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) =&gt; MaterialApp(</span><br><span class="line">       title: <span class="string">'Color App'</span>,</span><br><span class="line">       home: Navigator(</span><br><span class="line">         <span class="comment">// you can see and decide on every page in this list</span></span><br><span class="line">         pages: [</span><br><span class="line">           MaterialPage(</span><br><span class="line">             child: ColorListScreen(</span><br><span class="line">               colors: _colors,</span><br><span class="line">               onTapped: (color) =&gt; setState(() =&gt; _selectedColor = color),</span><br><span class="line">             ),</span><br><span class="line">           ),</span><br><span class="line">           <span class="keyword">if</span> (_selectedColor != <span class="keyword">null</span>) MaterialPage(child: ColorScreen(color: _selectedColor)),</span><br><span class="line">         ],</span><br><span class="line">         onPopPage: (route, result) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!route.didPop(result)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           setState(() =&gt; _selectedColor = <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里显式地创建了一个 <code>Navigator</code>，并为其提供代表完整堆栈的页面列表，我们创建一个空 <code>_selectedColor</code> 变量来表示尚未选择任何颜色，因此默认不显示 <code>ColorScreen</code>。当用户选择一种颜色时，我们调用  <code>setState()</code> 更新状态，Flutter 会重新调用 build() 方法，然后就会在 <code>ColorScreen</code> 顶部创建一个 ColorScreen 页面。</p><p>你可以在 <code>OnPopPage</code> 回调函数中更新返回的状态，例如，如果用户回退，则表示他们 “取消选择” 了当前颜色，从而 _<code>selectedColor = null</code> 表示不再希望显示该页面。</p><p>Navigator 2.0 看起来像 Flutter 的其余部分，那正是她的意图，它是声明性的，与 Navigator 1.0 势在必行，这个想法是要在导航和Flutter 的其余部分之间统一模型，同时解决许多问题并添加功能。实际上，这个小例子几乎还不涉及 Navigator 2.0 的内容。有关详细信息，推荐阅读 <a href="https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade" target="_blank" rel="noopener"> Declarative navigation and routing in Flutter</a></p><p>另外，Navigator 1.0 依然可以继续使用，短期内也不会失效，如果你已经喜欢这种路由模式，完全可以继续使用它。但是，如果你尝试使用 Navigator 2.0，我们认为你会喜欢的。</p><h3 id="预览功能"><a href="#预览功能" class="headerlink" title="预览功能"></a>预览功能</h3><h4 id="Android-的状态还原"><a href="#Android-的状态还原" class="headerlink" title="Android 的状态还原"></a>Android 的状态还原</h4><p>在此次的新版本中还能够试用的新功能是 <a href="https://developer.android.com/topic/libraries/architecture/saving-states" target="_blank" rel="noopener">对Android的状态还原的</a> 支持。这是我们在 <a href="https://github.com/flutter/flutter/issues/6827" target="_blank" rel="noopener">Github</a> 上最受欢迎的功能之一，拥有 217 个点赞！</p><p><strong>考虑到读者们可能不熟悉状态还原这个需求</strong>。移动操作系统可能会杀死后台的应用程序，以回收前台应用程序的资源。发生这种情况时，操作系统会通知该应用已经被终止，这样开发者就可以快速保存当前 UI 状态，以便在用户再次回到该应用时可以将其恢复。如果该功能完善，就可以为用户提供无缝的体验了，同时也可以更好地利用设备的资源。目前，Flutter 还病不支持状态还原，如果没有框架层的支持，也很难自行地进行状态地还原，因此，在 Flutter 1.22 中我们也宣布推出该功能的基础实现。</p><p>下面是一个用于恢复默认 Flutter Counter 应用状态的简单示例：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RestorableCounter</span>&gt; <span class="title">with</span> <span class="title">RestorationMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> restorationId =&gt; widget.restorationId;</span><br><span class="line"></span><br><span class="line">  RestorableInt _counter = RestorableInt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> restoreState(RestorationBucket oldBucket) =&gt; registerForRestoration(_counter, <span class="string">'count'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() =&gt; setState(() =&gt; _counter.value++);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">      body: Center(child: Text(<span class="string">'<span class="subst">$&#123;_counter.value&#125;</span>'</span>)),</span><br><span class="line">      floatingActionButton: FloatingActionButton(onPressed: _incrementCounter),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简要地说，每个组件都有一个存储桶（storage bucket），<code>RestorationMixin</code> 使用唯一的 ID 向其注册。通过使用一种<code>RestorableProperty</code> 类型（如这里的 <code>RestorableInt</code>）来存储特定于 UI 数据，并使用状态恢复功能注册该数据，该数据将在 Android 终止该应用程序之前自动保存，并在其再正常运行时进行恢复。就是这样，<code>Restoration*</code> 可以储任何类型的数据，如<code>RestorableInt</code>，<code>RestorableString</code> 和 <code>RestorableTextEditingController</code>（等等）都将可以被恢复。</p><p>如果系统内置没有涵盖你要还原的数据类型，也可以通过 <code>RestorableProperty&lt;T&gt;</code> 创建自己的类型 。</p><p>为了实现状态恢复的自动测试，我们也向 WidgetTester 增加了全新的 <a href="https://api.flutter.dev/flutter/flutter_test/WidgetTester/restartAndRestore.html" target="_blank" rel="noopener">restartAndRestore API</a>。如果想要手动测试，最简单的方法就是在 Android 设备上打开已经启用状态恢复的 Flutter 应用，在 Android 开发人员设置中启用“不要保留活动”（如下图），然后运行 Flutter 应用，将其置于后台，之后再返回。此时，Android 系统就会先终止再恢复你的应用程序了，你可以查看一切是否按预期工作。</p><p><img src="/images/0*1298qhTKz_FjPuRN-20201002011902051.png" alt="图片发布"></p><p>虽然我们已经推出了状态恢复的预览版，但还有很多其他的工作要做。例如，状态恢复不仅需要适用于 Android，iOS 应用程序也应当及时同步。此外，我们也正着手优化自己的内置组件，以在恢复过程中默认保持其状态。我们已经在 <code>ListView</code> 和 <code>SingleChildScrollView</code>（记住用户的滚动位置）和 <code>TextFields</code> （恢复他们输入的文本）类中提供了该功能支持，我们也正计划将其扩展到其他组件中。</p><p>然而，由于 navigation（1.0 或 2.0）的原因，该功能目前也才出狱预览版，，也就是说，你的用户还不能体验该功能，我们即将会在 Beta 中发布，并在 Flutter 的下一个稳定版本中正式发布。</p><h4 id="滚动性能优化"><a href="#滚动性能优化" class="headerlink" title="滚动性能优化"></a>滚动性能优化</h4><p>由于存在输入和显示频率不同步的情况，Flutter 团队也与 Google 内核部门合作，极大地提高了页面滚动性能。例如，Pixel 4 输入的运行频率为 120hz，而显示屏的运行频率为 90hz，滚动时，这种不匹配会导致性能下降。使用新的 <code>resamplingEnabled</code> 标志，你就可以解决此问题，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  GestureBinding.instance.resamplingEnabled = <span class="keyword">true</span>;</span><br><span class="line">  run(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据所涉及的频率差异，启用此标志可以使滚动时的颤动减少到 97％，当我们确定这已经是最好的体验时，我们会计划在以后的版本中默认启用此功能。</p><h3 id="工具更新"><a href="#工具更新" class="headerlink" title="工具更新"></a>工具更新</h3><h4 id="统一的-Dart-开发者工具"><a href="#统一的-Dart-开发者工具" class="headerlink" title="统一的 Dart 开发者工具"></a>统一的 Dart 开发者工具</h4><p>与往常的版本一样，对 Flutter 的更新不仅在于引擎和框架层，还包括工具。Flutter 1.22 包括 Dart（2.10）的新版本，还有一个新的dart CLI工具，你可能也会想要其中的新功能。</p><p>Dart 已经存在许多小的开发者工具（例如格式化 <code>dartfmt</code> 和代码分析 <code>dartanalyzer</code> ）。Dart 2.10 中的新功能是 <code>dart</code> 统一了开发者工具，和我们常用的 Flutter tool 类似。</p><p><img src="/images/1*9pvyafhpaMEMhJfLVsz1JQ-20201002012011846.png" alt="“dart help”输出的屏幕截图。"></p><p>从 Flutter 1.22 SDK 开始，你就会发现 <flutter-sdk> / bin 文件夹会同时包含 flutter 和 dart 命令，有关更多详细信息，参见 <a href="https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f" target="_blank" rel="noopener">Dart 2.10博客文章</a>。</p><h4 id="应用程序大小分析工具"><a href="#应用程序大小分析工具" class="headerlink" title="应用程序大小分析工具"></a>应用程序大小分析工具</h4><p>Flutter 1.22 也发布了一款<strong>输出大小分析工具</strong>，该工具可帮助诊断你的 Flutter 应用各部分大小是否发生了变化。</p><p>你可以通过在一下命令中使用 <code>--analyze-size</code> 参数来使用该工具收集分析所需的数据：</p><ul><li><code>flutter build apk</code></li><li><code>flutter build appbundle</code></li><li><code>flutter build ios</code></li><li><code>flutter build linux</code></li><li><code>flutter build macos</code></li><li><code>flutter build windows</code></li></ul><p>使用该参数构建 Flutter 输出 artifact 时可以打印 artifact 尺寸和组成的信息，包括本机原生代码，资源，甚至是已编译 Dart 代码的程序包级的细分。</p><p><img src="/images/0*vfMD0AQZUOUwzfZ4-20201002012034092.png" alt="Flutter Gallery realse APK 包大小分析"></p><p>该信息有助于快速识别应用程序的程序包大小使用中的关键点。此外，收集的数据也可以作为使用 JSON 文件中 Dart DevTools，这允许你能够进一步探索应用的内容，解决包大小大小的问题，如下，通过 flutter.dev 的<a href="https://flutter.dev/docs/development/tools/devtools/app-size" target="_blank" rel="noopener">说明</a>，可以观察两个不同的 JSON 文件之间的变化。加载 JSON 文件后，你将看到一个界面，该界面会提供应用大小的树状图。</p><p><img src="/images/0*gA2waLDAyITCzD7K-20201002012033652.png" alt="Dart DevTools 中的 APK 故障示例"></p><p>关于“应用大小”工具执行的操作的更多详细信息，可以阅读 <a href="https://flutter.dev/docs/development/tools/devtools/app-size" target="_blank" rel="noopener">the Using the app size tool docs</a> </p><h4 id="DevTools-网络页面"><a href="#DevTools-网络页面" class="headerlink" title="DevTools - 网络页面"></a>DevTools - 网络页面</h4><p>此版本中的另一个 DevTools 更新是能够将 HTTP 和 HTTPS 的响应（Response）主体作为 “网络“ tab 中的一部分。</p><p><img src="/images/0*-FukCwELl9DLlefP.png" alt="图片发布"></p><p>此外，对于具有大量网络交互的应用程序，我们也提供了搜索和过滤的功能。</p><p><img src="/images/0*k-fEpOpbV_MiX9Fn-20201002012033617.png" alt="图片发布"></p><p>有关该 “网络” tab 的文档，可以参阅 <a href="https://flutter.dev/docs/development/tools/devtools/network" target="_blank" rel="noopener">Using the Network View</a>。</p><h4 id="DevTools-Inspector"><a href="#DevTools-Inspector" class="headerlink" title="DevTools - Inspector"></a>DevTools - Inspector</h4><p>一直以来，我们一直在维护着两款 Flutter 工具，例如 IntelliJ 中的 <strong>Inspector</strong> 和 Dart DevTools 中的 <strong>Inspector</strong>。这不仅放慢了我们的速度，因为我们必须维护两个代码库，而且某些功能也尚未纳入 IntelliJ 插件中，例如布局资源管理器。因此，为了解决这两个问题，我们启用了直接从 IntelliJ 内部的 Dart DevTools 托管 <strong>Inspector</strong> 选项卡的功能。</p><p><img src="/images/0*RQZ-EVyFP1-BqBIX-20201002012034281.png" alt="图片发布"></p><p>值得关注的是这里添加了 Layout Explorer，你可以在代码旁边即刻使用它。要开启此功能，可以选择菜单 <strong>Preferences</strong> &gt; <strong>Languages &amp; Frameworks</strong> &gt; <strong>Flutter</strong> &gt; <strong>Enable embedded DevTools inspector</strong>。</p><h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>所有 Flutter 开发人员都需要面临的一个场景是从终端或堆栈跟踪中查找错误输出。在 Visual Studio Code 的 Flutter 最新版扩展程序中，现在可以正确解析这些链接，你可以直接从输出中打开链接。</p><p><img src="/images/0*prigrwpp7gE6ChCE-20201002012034600.png" alt=""></p><p>虽然看着这是一件小事，但我们已经收到了很多积极的反馈。</p><p>与往常一样，此处的工具更改项太多，可以从以下公告中了解详细信息：</p><ul><li><a href="https://groups.google.com/g/flutter-announce/c/UxMv8MzE_uo/m/ED539pi2AAAJ" target="_blank" rel="noopener">Dart DevTools — 0.9.0</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/y27h86ATFJM" target="_blank" rel="noopener">Dart DevTools — 0.9.1</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/24LppkXdMtM" target="_blank" rel="noopener">Dart DevTools — 0.9.3</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/nvgDi3RLAUE/m/Fx4Ze0vrBAAJ" target="_blank" rel="noopener">Flutter IntelliJ插件M48.1发行</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/-ZMKRIBRtGU" target="_blank" rel="noopener">Flutter IntelliJ插件M49发布</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/u0zU6zv3o44/m/2y0JsX1_AwAJ" target="_blank" rel="noopener">Flutter IntelliJ插件M50发布</a></li><li><a href="https://groups.google.com/g/flutter-announce/c/8e8e-ZrgySY" target="_blank" rel="noopener">VS Code扩展v3.14.0</a></li><li><a href="https://dartcode.org/releases/v3-15/" target="_blank" rel="noopener">VS Code扩展v3.15.0</a></li></ul><h3 id="优秀案例：EasyA"><a href="#优秀案例：EasyA" class="headerlink" title="优秀案例：EasyA"></a>优秀案例：EasyA</h3><p>EasyA 是一款可订阅应用，旨在帮助适龄学生通过即时消息与优秀的导师联系，该应用使用 Flutter 开发，最近，它被 Apple 推荐为了 <a href="https://apps.apple.com/gb/story/id1527472788" target="_blank" rel="noopener">their App of the Day</a>。</p><p><img src="/images/0*yLWTxV_YTJ2HKhuz.png" alt=""></p><blockquote><p>“当学校在今年初开始网上授课时，我们知道我们需要快速开发一个辅导应用程序来帮助学生。Flutter 的惊人发展速度意味着我们能够为 iOS 和 Android 实施各种优秀的设计，并且还可以发布到 Web 上！通常，这实际上是不可能的。但是，由于 Flutter 允许我们同时针对所有三个平台，因此我们能够高效地复用代码，并充分利用我们的小型开发人员团队。”</p><p><em>—</em> <a href="https://easya.io/" target="_blank" rel="noopener"><em>EasyA</em></a> <em>联合创始人</em> <a href="https://easya.io/" target="_blank" rel="noopener"><em>Phil Kwok</em></a></p></blockquote><h3 id="重大更新"><a href="#重大更新" class="headerlink" title="重大更新"></a>重大更新</h3><p>与往常一样，我们会尽量保有较少的重大更新。这是 Flutter 1.22 发行版中的列表。</p><ul><li><a href="https://github.com/flutter/flutter/pull/56413" target="_blank" rel="noopener">56413</a> <a href="https://docs.google.com/document/d/1BZhxy176uUnqOCnXdnHM1XetS9mw9WIyUAOE-dgVdUM/edit?usp=sharing" target="_blank" rel="noopener">如果指定的 Rect 已经可见，则阻止 viewport.showOnScreen 滚动视口</a>。</li><li><a href="https://github.com/flutter/flutter/pull/62395" target="_blank" rel="noopener">62395</a> [gen_l10n] 默认情况下生成合成软件包</li><li><a href="https://github.com/flutter/flutter/pull/62588" target="_blank" rel="noopener">62588</a> 简化构建流程。</li></ul><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Flutter 1.22 稳定版会很快推出，其中真的包含了很多值得我们学习的东西，这篇文章也并不能一一列举。我们希望此版本可以帮助你在 iOS 和 Android 平台上开发更出色的应用！感谢你的支持。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p>官方原文：<a href="https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f" target="_blank" rel="noopener">https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f</a></p><p>我的博客：<a href="https://meandni.com/2020/09/28/d206/">https://meandni.com/2020/09/28/d206/</a></p><p>关注公众号「Meandni」，及时阅读移动开发技术和最新技术动态。</p><p><img src="/images/qrcode_for_small.jpg" alt="扫一扫，Meandni"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 技术动态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全方位剖析 Flutter Windows 内测版。</title>
      <link href="/2020/09/28/d206/"/>
      <url>/2020/09/28/d206/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Flutter 最被所我们津津乐道的功能就是能实现 Android 和 iOS 上的开发统一，目前，Google 也已经先后发布了 8 个稳定版，在这两个移动平台上提供了各方面的支持，据不完全统一，Flutter 开发者已经向 Google Play 商店提交了 100,000 多款应用，数字还是挺惊人的。</p><p>但是 Flutter 团队也一直在扩展他们的视野，没准备放过  Web 平台和桌面操作系统，此前，一直在关注 Flutter 发展动向的同学也一定尝鲜了 Flutter 在 MacOs 和 Linux 上的支持，9 月 23 号，Flutter 项目的 Google 产品经理克里斯·塞尔斯（Chris Sells）也在 Medium 上的帖子公开表示未来将致力于 Flutter 对 Windows 平台的支持。</p></blockquote><h4 id="支持-Windows-系统原因？"><a href="#支持-Windows-系统原因？" class="headerlink" title="支持 Windows 系统原因？"></a>支持 Windows 系统原因？</h4><p>Windows 依然是台式机和笔记本电脑最常用的操作系统，不久前，Microsoft 也宣布已经有超过<a href="https://blogs.windows.com/windowsexperience/2020/03/16/windows-10-powering-the-world-with-1-billion-monthly-active-devices/" target="_blank" rel="noopener">十亿台运行 Windows 10 的硬件设备</a>了。我们自己的统计数据也显示，有超过一半的 Flutter 开发者正使用 Windows，因此，它很自然的成为了 Flutter 的下一个目标。对桌面应用的支持也能为 Flutter 开辟了更多激动人心的可能性，包括开发人员工具的改进，减少了新用户的负担等等，当然，我们的核心目的仍然是“一套代码，支持任何设备”。</p><h4 id="Flutter-能为-Windows-带来什么？"><a href="#Flutter-能为-Windows-带来什么？" class="headerlink" title="Flutter 能为 Windows 带来什么？"></a>Flutter 能为 Windows 带来什么？</h4><p>Flutter 团队一直遵守的原则是 “改善性能，拥抱差异”，因此我们总是以优化引擎为核心，为每个特定平台都提供合适的拓展。在移动设备上，我们致力于对 Material Design 的支持，希望尽可能的构建出以移动设备为中心的用户界面。而在其他平台（如 Web、Linux、Windows）上我们也是如此，Flutter 团队会开发一整套全新的服务，其中包括对键盘，鼠标，鼠标滚轮和控制器的特性支持，以及更多定制化的 UI 组件来适应 Web和桌面应用程序的大尺寸。</p><p>除了对 Flutter 框架和引擎本身的修改，每支持一个新平台还会影响很多其他方面：</p><ul><li><strong>工具链的更新</strong>：向 CLI 和 IDE 工具添加新的支持（Windows）</li><li><strong>Shell</strong>：通过 <code>WM_ *</code> 消息机制处理 Windows 的输入，并通过 ANGLE 输出，而 ANGLE 使用 Skia 以原生速度渲染到基础 DirectX 表面</li><li><strong>Runner</strong>：每个项目都会有针对目标平台的 Shell 程序。对于Windows，会有一个Win32 / C++程序，可加载 Flutter 代码并在运行时执行它。如果需要，可以在此处向应用程序添加本机代码。</li><li><strong>插件</strong>：插件可以实现 Dart 代码和原生的混合开发。可以为在 Windows 上 Flutter 应用程序中编译的每个插件添加该本地代码。</li></ul><h4 id="Flutter-团队对社区有哪些支持？"><a href="#Flutter-团队对社区有哪些支持？" class="headerlink" title="Flutter 团队对社区有哪些支持？"></a>Flutter 团队对社区有哪些支持？</h4><p>为了向公众预演 Flutter 桌面端的能力，Flutter 团队先前已经与 <a href="http://gskinner.com/" target="_blank" rel="noopener">gskinner.com</a> 团队共同开发了一款 Flokk 应用。Flokk 是一款能够与用户的 Google Contacts 数据配合使用并展示 GitHub 和 Twitter 上联系人动态的应用程序，如下图所示。</p><p><img src="/images/b49411801875461086b5d16df7b4af55~tplv-k3u1fbpfcp-zoom-1.image" alt="Flokk"></p><p>如果想在 Windows 上使用 Flokk 应用程序，可以直接在 GitHub上下载 <a href="https://github.com/gskinnerTeam/Flokk/releases" target="_blank" rel="noopener">最新版本</a>。如果您想了解构建 gskinner 应用的具体过程，可以参阅其博客文章：<a href="https://blog.gskinner.com/archives/2020/09/flokk---how-we-built-a-desktop-app-using-flutter.html" target="_blank" rel="noopener">Flokk – How we built a Desktop App Using Flutter</a>。</p><p>此外，Flutter Gallery 应用最近也已完全重写来增加对台式机尺寸的支持。现在，开发者完全可以自行运行它来体验 Flutter 是否可以在 Web 以及 Windows，macOS 和 Linux 上正常运行。</p><p><img src="/images/e75f64421a2a433ea3d358a069520a8c~tplv-k3u1fbpfcp-zoom-1.image" alt="Flutter Gallery"></p><p><a href="https://github.com/flutter/gallery" target="_blank" rel="noopener">该项目代码可在GitHub上找到</a>。</p><p>即使刚刚发布 Alpha 版，Flutter 社区也已经开始着手开发 Windows 平台的各个功能插件了：</p><ul><li><a href="https://pub.dev/packages/url_launcher" target="_blank" rel="noopener">url_launcher</a>：在应用程序中使用原生浏览器中打开 URL。</li><li><a href="https://pub.dev/packages/path_provider" target="_blank" rel="noopener">path_provider</a>：在本地上找到指向特殊方向的路径，例如 Document 或 temp。</li><li><a href="https://pub.dev/packages/shared_preferences" target="_blank" rel="noopener">shared_preferences</a>：应用程序数据的磁盘序列化。</li><li><a href="https://pub.dev/packages/biometric_storage" target="_blank" rel="noopener">biometric_storage</a>：生物识别技术加密的存储。</li><li><a href="https://pub.dev/packages/flutter_audio_desktop" target="_blank" rel="noopener">flutter_audio_desktop</a>：在桌面应用上播放音频。</li></ul><p>这些插件中的大多数也支持其他 Flutter 平台，开发者可以将这些功能统一运行在 Android，iOS，Web 等以及 Windows 上。此外，虽然 pub.dev 上约有三分之一的可用软件包是具有特定于平台的代码的插件，但毕竟大多数不是，例如，<a href="https://pub.dev/flutter/favorites" target="_blank" rel="noopener">许多最高质量和最常用的软件包</a> 是 Flutter Favorite 程序的一部分，它们大多数都可以在 Windows 上运行。如果要查看所有能够在 Windows 上运行的库，可以直接<a href="https://pub.dev/flutter/packages?platform=windows" target="_blank" rel="noopener">在pub.dev上查询</a>。</p><p><img src="/images/image-20200928152923494.png" alt="pub.dev"></p><h4 id="Windows-应用初体验"><a href="#Windows-应用初体验" class="headerlink" title="Windows 应用初体验"></a>Windows 应用初体验</h4><p>要使用 Flutter 开发 Windows 桌面应用，首先需要安装官网  <a href="https://flutter.dev/desktop#additional-windows-requirements" target="_blank" rel="noopener">Desktop 文档</a> 中介绍的开发工具。默认情况下，Flutter 项目中并不会配置 Windows 项目程序在 Flutter 项目中。开发者可以在终端执行下述命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flutter channel dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter upgrade</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter config --<span class="built_in">enable</span>-windows-desktop</span></span><br></pre></td></tr></table></figure><p>第一条命令会将 Flutter 设置为使用 Flutter 开发版的代码（默认为稳定“ stable” 版）。这时，开发者就可以使用仍在内侧的功能，例如 Windows。第二行代码会将开发版的最新代码下载到本地以供我们使用。第三个命令则是设置允许在你的 PC 上进行 Windows 应用的开发。</p><p>设置好之后，每次使用 <a href="https://flutter.dev/docs/get-started/editor?tab=androidstudio" target="_blank" rel="noopener">Android Studio</a> 或 <a href="https://flutter.dev/docs/get-started/editor?tab=vscode" target="_blank" rel="noopener">Visual Studio Code</a>，或者从命令行创建新的 Flutter 应用程序时，都会默认创建一个 Windows 子文件夹了。</p><p><img src="/images/025ed7088ab1456e9ca1dc1c1bacc240~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们可以在 Windows 平台下运行默认的计数器应用，如下所示：</p><p><img src="/images/2765d5074c174801905d3fa51af42e36~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="如何与-Windows-原生交互"><a href="#如何与-Windows-原生交互" class="headerlink" title="如何与 Windows 原生交互?"></a>如何与 Windows 原生交互?</h4><p>开发者也可以为 Flutter Windows 平台开发自己的插件。进入 dev channel ，在终端执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter create --template plugin --platforms Windows hello_plugin</span><br></pre></td></tr></table></figure><p>这是，你就可以创建出一个插件项目，并在 <code>lib</code> 子文件夹中编写 Dart 代码，Windows 原生代码被放在 <code>windows</code> 子文件夹中，你可以通过 <a href="https://flutter.dev/docs/development/platform-integration/platform-channels" target="_blank" rel="noopener">Platform Channels</a> 在它们之间进行通信，它的原理就是基于 Dart 和 C++ 代码之间传递的消息。关于开发插件的具体编码方式，<a href="https://github.com/flutter/plugins/tree/master/packages/url_launcher/url_launcher_windows" target="_blank" rel="noopener">请参见url_launcher实现</a>。</p><p>除了 Platform Channels，如果开发者需要，也可以使用 <a href="https://flutter.dev/docs/development/platform-integration/c-interop" target="_blank" rel="noopener">Dart FFI（外部功能接口）</a> 加载库并调用 C 类风格的 API，例如 Win32 API。与使用 Platform Channels 的 url_launcher 不同，path_provider 插件就是使用 FFI 实现的，打开 <a href="https://github.com/flutter/plugins/tree/master/packages/path_provider/path_provider_windows" target="_blank" rel="noopener">GitHub repo</a>，你可以看到 FFI 无需在Dart 和 C++ 之间来回切换，而可以直接编写代码导入所需的 API 即可，下面这一段就是 Dart 调用 MessageBox API 的样例代码：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> MessageBoxNative = Int32 <span class="built_in">Function</span>(</span><br><span class="line">  IntPtr hWnd, </span><br><span class="line">  Pointer&lt;Utf16&gt; lpText, </span><br><span class="line">  Pointer&lt;Utf16&gt; lpCaption,</span><br><span class="line">  Int32 uType</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> MessageBoxDart = <span class="built_in">int</span> <span class="built_in">Function</span>(</span><br><span class="line">  <span class="built_in">int</span> hWnd, </span><br><span class="line">  Pointer&lt;Utf16&gt; lpText, </span><br><span class="line">  Pointer&lt;Utf16&gt; lpCaption, </span><br><span class="line">  <span class="built_in">int</span> uType</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> user32 = DynamicLibrary.open(<span class="string">'user32.dll'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> win32MessageBox =</span><br><span class="line">  user32.lookupFunction&lt;MessageBoxNative, MessageBoxDart&gt;(<span class="string">'MessageBoxW'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> showMessageBox(<span class="built_in">String</span> message, <span class="built_in">String</span> caption) =&gt;</span><br><span class="line">  win32MessageBox(</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// No owner window</span></span><br><span class="line">    Utf16.toUtf16(message), <span class="comment">// Message</span></span><br><span class="line">    Utf16.toUtf16(caption), <span class="comment">// Window title</span></span><br><span class="line">    <span class="number">0</span> <span class="comment">// OK button only</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// call just like any other Dart function</span></span><br><span class="line">showMessageBox(<span class="string">'Test Message'</span>, <span class="string">'Window Caption'</span>);</span><br></pre></td></tr></table></figure><p>FFI 最明显的好处是不会产生在平台通道之类的两个线程之间进行转换的开销，而且还包括对许多不同种类的 API 的支持，包括 Win32，WinRT 和 COM。需要注意的是，在运行打包整个基于 C 的 Windows API 之前，需要先核实 <a href="https://pub.dev/packages/win32" target="_blank" rel="noopener">win32插件</a>，该<a href="https://pub.dev/packages/win32" target="_blank" rel="noopener">插件</a>已经可以很好地做到这一点。另外，<a href="https://pub.dev/packages/path_provider" target="_blank" rel="noopener">path_provider</a> 插件本身是使用 win32 插件实现的。有关 win32 插件如何开发以及如何工作的详细信息，可以查看博客文章 <a href="https://medium.com/@timsneath/windows-fun-with-dart-ffi-687c4619e78d" target="_blank" rel="noopener">Windows fun with Dart FFI</a>。</p><h4 id="如何学习-Flutter-Windows"><a href="#如何学习-Flutter-Windows" class="headerlink" title="如何学习 Flutter Windows?"></a>如何学习 Flutter Windows?</h4><p>Flutter Desktop 文档中含有最新关于桌面版的官方信息。另外，开发者们也可以在 <a href="https://codelabs.developers.google.com/codelabs/flutter-github-graphql-client/#0" target="_blank" rel="noopener">Google 实验室</a>中学习如何构建 Flutter 桌面应用，这里面包括了使用 OAuth 进行身份验证，访问 GitHub API、使用 GraphQL 等等。</p><p>此外，除了上述提到的示例，开发者们也可以参考 <a href="https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search" target="_blank" rel="noopener">desktop_photo_search</a> 学习桌面级组件的使用方式。</p><p><img src="/images/1742ea6509b248308020ba3a27388862~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们还推荐使用 <a href="https://github.com/google/flutter-desktop-embedding/tree/master/plugins/menubar" target="_blank" rel="noopener">菜单栏插件</a>，<a href="https://api.flutter.dev/flutter/material/NavigationRail-class.html" target="_blank" rel="noopener">NavigationRail 组件</a> 和 <a href="https://api.flutter.dev/flutter/material/DataTable-class.html" target="_blank" rel="noopener">DataTable 组件</a> 等等一系列适合桌面开发的组件，<a href="https://api.flutter.dev/flutter/widgets/InteractiveViewer-class.html" target="_blank" rel="noopener">InteractiveViewer 组件</a> 也完全支持桌面级应用，它可实现通过鼠标手势来平移和缩放子组件。</p><p>已经被 Windows 开发社区广泛使用的，用于创建图表，仪表，数据网格等这些组件，也可以在 <a href="https://pub.dev/publishers/syncfusion.com/packages" target="_blank" rel="noopener">SyncFusion</a> 找到，如下图。</p><p><img src="/images/49e9828839814dfd9fd613b4c09e31f0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="Flutter-的下一步？"><a href="#Flutter-的下一步？" class="headerlink" title="Flutter 的下一步？"></a>Flutter 的下一步？</h4><p>目前，Flutter Alpha 版已经发布，之后，我们会将注意力主要集中在功能的完善和稳定版产品的发布上。作为一个开源项目，各位开发者都可以 GitHub 上持续关注我们的进展，还未完成的其他工作包括可访问性，全球化和本地化，增强的键盘和文本处理，对命令行参数的支持等等，一切都还待加强。</p><p>除了支持经典的 Win32 API 外，我们也还在试验 <a href="https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide" target="_blank" rel="noopener">基于UWP的Flutter shell版本</a> ，该版本能够让 Flutter 可以访问更多的基于 Windows 的设备，包括 Xbox。作为该实验的一部分，本周我们就会向 <a href="https://www.microsoft.com/en-us/p/flutter-gallery/9pdwctdfc7qq" target="_blank" rel="noopener">Windows应用商店</a> 发布了基于UWP的 <a href="https://www.microsoft.com/en-us/p/flutter-gallery/9pdwctdfc7qq" target="_blank" rel="noopener">Flutter Gallery</a> 版本。</p><p>下图展示了在 Xbox 上运行的基于 UWP 的 Flutter Gallery：</p><p><img src="/images/5c2493fee25a4837be415f7f24b4c35a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>同样的应用也可以展示在双屏 Windows 设备上；</p><p><img src="/images/4926007f283d4e0e898bc71d28489b23~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><p><a href="https://medium.com/flutter/announcing-flutter-windows-alpha-33982cd0f433" target="_blank" rel="noopener">Announcing Flutter Windows Alpha - Chris Sells</a></p><p><a href="http://flutter.dev/desktop" target="_blank" rel="noopener">Flutter Desktop</a></p><p>关注我的公众号「Meandni」，及时阅读最新技术动态。</p><p><img src="/images/qrcode_for_gh_29437cfed0c3_430.jpg" alt="扫一扫，Meandni"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 容器化技术详解（虚拟化、容器化、Docker）</title>
      <link href="/2020/05/14/virtualization-containerization-docker/"/>
      <url>/2020/05/14/virtualization-containerization-docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>容器化技术自前几年火热发展后一直都是业内非常热门的话题，为了拓展自己的知识面当然也要学起来，本篇文章从发展的角度来解释了它的前世今生，并将它与传统虚拟化技术做对比，并分析他们各自的运行原理。</p></blockquote><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><p>虚拟化是过去用来充分利用计算机物理资源的最常用方法。早年间，我们可以用一台服务器运行一个操作系统，处理一个任务，带来的问题是资源利用率极其不足，计算机的潜能并不能完全发挥，而后多道批处理系统、分时系统相继出现，Unix、Linux 等操作系统成为了人类 “压榨” 计算机物理资源的神兵利器，而此时，虚拟化技术却并未崭露头角。</p><p>目光聚焦到 20 世纪的 90 年代，当时 IT 行业逐渐步入工业化，大量公司部署起了自己内部的 IT 环境，他们使用了多个不同供应商提供的价格相对低廉的服务器、操作系统和应用程序，此时就暴露出了一个严重的问题：大多数企业使用的都是物理服务器或者由单家供应商提供的应用，每台服务器又只能运行一个供应商特定的任务，不同供应商之间硬件也并不兼容，如果这时候再各自为他们配备不同的硬件设备必然也会面临物理硬件利用率不足的问题。此时虚拟化技术才得以大展身手，它主要解决了<strong>可对服务器分区</strong>、<strong>可在同一个主机上运行不同环境的应用</strong>两个主要的问题。</p><p>自此，服务器开始得到更高效利用，也降低了企业采购、设置、散热和维护的成本。虚拟化的广泛应用也有助于减少企业对单家供应商的依赖，并为后来云计算的发展奠定了基础。</p><h3 id="虚拟化的工作原理"><a href="#虚拟化的工作原理" class="headerlink" title="虚拟化的工作原理"></a>虚拟化的工作原理</h3><p>虚拟化技术的实现主要依托于 <strong>Hypervisor （虚拟机监控程序）</strong>。它处于计算机物理层与虚拟机之间，能够有效地管理计算机的物理资源并将这些资源分配给不同虚拟环境。作为软件，Hypervisor 可以直接运行在操作系统之上；作为服务器，它也可以直接安装在硬件上，这就是大多数企业使用虚拟化的方式。</p><p>此时，Hypervisor 直接接管物理资源，可以对它们做分区处理，分配给了多个虚拟机使用，而用户在虚拟机中也可以通过它直接和计算机底层交互。当虚拟机运行时，如果用户的程序发出一条硬件指令请求资源，Hypervisor 就会直接将请求传递到物理系统做缓存更改，所有这些操作速度都和本机运行速度几近相同，这种直接运行在物理硬件中的 Hypervisor 即为我们经常听说的 <strong>Type1</strong>，也称为裸机管理程序（Metal Hypervisor），目前市面上常用的 VMware ESXi、MiscroSoft Hyper-V 和 KVM（Kernel-based Virtual Machine）都基于这类 Hypervisor。</p><p><img src="/images/TYPE1.jpg" alt="Hypervisor Type1"></p><p>而另一种运行于操作系统之上的 Hypervisor 即为 <strong>Type2</strong>，这种命名方式非常简单粗暴，让人很难忘记，它的处理方式就是使 Hypervisor 不直接与物理层基础，因此也称作托管程序（Hosted Hypervisor），它主要用于面向个体用户，我们经常在本机中安装的 Virtual Box、VMware WorkStation 就属于这种类型。此时，相较于 Type1 ，Type2 显然多了一些延迟。</p><p><img src="/images/type-2-1024x499.jpg" alt="Hypervisor Type2"></p><p>这样，每个虚拟机在 Hypervisor 之上相互独立，运行不同的操作系统，操作不同的物理资源，这也带来了我们期望了灵活性和可移植性，我们可以将一个虚拟机从一个 Hypervisor 中直接迁移到一个新的 Hypervisor 中，此时就达到了一种<strong>环境复用</strong>的效果。</p><p><img src="/images/how-virtualization-works-400x217.png" alt="虚拟化技术原理"></p><h3 id="虚拟化技术应用"><a href="#虚拟化技术应用" class="headerlink" title="虚拟化技术应用"></a>虚拟化技术应用</h3><p>虚拟化发展之初主要用于服务器虚拟化，但随着这种方式逐渐普及，也衍生出了许多诸如网络虚拟化，应用程序虚拟化，数据虚拟化以及存储虚拟化等技术。本篇文章就不对他们再做一一介绍了，感兴趣的读者可以查阅底部衍生查阅中的相关资料。</p><h2 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h2><p>此时，既然虚拟化技术已经成熟，我们就可以投入生产将它运用起来了，如果希望将自己开发的一个 NodeJs 程序放入虚拟机中，就需要在宿主系统中基于 Hypervisor 安装一个 Linux 虚拟机（单独安装 Linux OS），并在 Linux 中为该服务配置一个完整的 JS 应用运行环境和必要的库，如下图所示。</p><p><img src="/images/vm_js.jpg" alt=""></p><p>这样做带来的问题也明显，NodeJS 运行时需要的资源可能非常少（10M），而虚拟机本身却占有相当多的资源（&gt;400M），如果继续在该服务器中放入更多的服务，资源消耗程度可见一般，服务器迅速过载。</p><p><img src="/images/vm_js_2.jpg" alt=""></p><p>从这方面来看，虚拟化技术虽然做到了在同一宿主系统提供不同的任务，解决了硬件层面的硬件资源共享问题，但在应用上层的资源消耗却仍是一个非常大的难题。同时，在日常开发中，如果我们使用的是自己的个人电脑，像 Macbook 开发应用程序时推入服务端也可能存在其他兼容性问题，通常是表现为我的应用程序在本地运行良好，投入生产环境后却病态百出，不利于 DevOps、持续集成和交付。</p><p>容器化通过将应用程序代码和运行所需的相关配置文件，库和依赖项捆绑起来解决了上面描述的两个问题。此时，应用程序和其他依赖项俨然成为了一个整体，打包在一个文件中，而运行这个文件就会生成一个虚拟容器，程序在这个封闭的虚拟容器里运行，容器提供了它想要的一切资源，就好像在真实的物理机上运行一样。有了容器，再也不用担心环境问题了。另外，如下图所示，容器也不会捆绑应用环境所依赖的操作系统，轻量级不言而喻。</p><p><img src="/images/container_js.jpg" alt=""></p><p>要达到应用程序容器化通常只需三步，首先，定义一个清单文件（如 Docker 中的 Dockerfile 或者 Cloud Fundary 中的 yaml 文件），然后，创建一个镜像文件（如 Docker Image 或者 Rocket 的 ACI），最后生成容器即可，这里就包含了应用运行时所有需要的库、二进制文件等等，在上面的例子中，我们同样可以通过该种方式获得 NodeJS 程序的容器并将放入宿主系统中。</p><p><img src="/images/Containerization.jpg" alt="容器化三大步骤"></p><p>此时，容器化技术也可以摒弃冗余的资源消耗，实现更加轻量级的环境部署。另外，再考虑一个问题，如果在我们的 Nodejs 应用中还需要应用其他环境的库，如需要 python 应用做图像识别、java 应用做数据处理，那么，如果使用虚拟化技术，为了达到云原生的方式就必须在之前的宿主主机中释放出一些资源，然后再将 python 等应用部署进去，而当使用容器化技术时只需要在原服务器中放入一个 python 应用的副本，然后利用剩余的空闲资源做容器之间的共存，这正是容器化技术的伟大之处，它可以实现<strong>容器间隔离的同时做到 CPU 资源共享</strong>。</p><p><img src="/images/container_js_2.jpg" alt=""></p><p>此时，容器引擎（如 Docker 引擎）安装在宿主系统中可以成为所有容器共享同一操作系统资源的渠道。</p><blockquote><p>Linux 容器是我们开发、部署和管理应用方式的又一次飞跃。Linux 容器镜像提供了可移植性和版本控制，确保能够在开发人员的笔记本电脑上运行的应用，同样也能在生产环境中正常运行。相较于虚拟机，Linux 容器在运行时所占用的资源更少，使用的是标准化接口（启动、停止、环境变量等），并会与其他应用隔离。此外，作为（包含多个容器）大型应用的一部分时，容器也更易于管理。</p></blockquote><h3 id="容器化技术应用"><a href="#容器化技术应用" class="headerlink" title="容器化技术应用"></a>容器化技术应用</h3><p>容器化技术日益发展，尤其是在云环境中，许多企业已经在考虑将容器替代虚拟机作为他们应用的通用计算平台了，在其如此广泛的应用，如下几个最为典型：</p><ul><li>微服务：容器小巧轻量，非常适合微服务体系结构，在微体系结构中，应用程序可以由许多松散耦合且可独立部署的较小服务构成。</li><li>DevOps：微服务作为架构和容器与平台的结合，可作为许多团队将 DevOps 视为构建，交付和运行软件的方式的共同基础。</li><li>混合云（hybrid cloud）、多云方案（multi-cloud）：由于容器可以在笔记本电脑，本地和云环境中的任何地方运行，因此它是混合云和多云方案的理想基础架构，在这种情况下，企业可以在多个公有云中与数据中心交互。 </li><li>应用程序现代化迁移：容器化可以使应用程序现代化，并直接迁移到云中。</li></ul><h3 id="容器化技术规范化"><a href="#容器化技术规范化" class="headerlink" title="容器化技术规范化"></a>容器化技术规范化</h3><p>随着容器化技术的不断发展，对容器技术和打包软件代码方法的标准化需求也逐渐显现出来了，2015 年 6 月，Docker 和其他行业推动者成立了开放容器计划（OCI），目的就是为了促进容器技术的通用，轻量，开放标准以及规范化，用户也将不会再被特定厂商的技术所束缚，而可以利用 OCI 认证的技术，这些技术使用户能够使用多种 DevOps 工具构建容器化的应用程序，并在基础架构上以一致地标准流程运行这些应用程序。</p><p>目前，Docker 是应用最广泛的容器引擎技术之一，但它也并不是我们唯一的选择，社区也正在对容器化和其他替代方案（例如 CoreOS rkt，Mesos Containerizer，LXC Linux 容器，OpenVZ 和 crio-d 等等）进行标准化。虽然现在，他们的功能和默认设置可能会有所不同，但是随着不断规范化地发展，利用 OCI 规范就能确保解决方案与特定供应商无关，可以完全在多种环境中使用部署应用。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker 技术使用的是 Linux 内核和其相关功能（例如 Cgroups 和 namespaces）来分隔进程，达到各进程相互独立运行。这种独立性正是采用容器的意义所在，它可以独立运行多种进程、多个应用，更加充分地利用基础资源，同时保持各个独立系统的安全性。</p><p>此外。Docker 技术与传统的 Linux 容器也并不完全相同，最初它是基于 <a href="https://linuxcontainers.org/" target="_blank" rel="noopener">LXC</a>（LinuX Containers，Linux 容器） 技术构建，但后来它逐渐摆脱了对这种技术的依赖。与虚拟化相比较，LXC 确实独占鳌头，但它并不能提供良好的用户体验，这一点，Docker 显然更胜一筹，除了运行容器之外，Docker 技术也具备其他多项功能，包括简化用于构建容器、传输镜像以及控制镜像版本的流程等等。</p><p>传统的 Linux 容器使用 init 系统来管理多种进程，这使得所有应用都作为一个整体运行在不同的环境中，而 Docker 技术正与此相反，它力争让应用各自独立运行在进程中，并提供相应工具，帮助实现这一功能，这种精细化运作模式自有其优势。</p><h3 id="Docker-实战"><a href="#Docker-实战" class="headerlink" title="Docker 实战"></a>Docker 实战</h3><p>Docker 在各平台安装请参考<a href="https://docs.docker.com/desktop/" target="_blank" rel="noopener">官方文档</a>，安装之后终端执行下面这条命令可以验证是否安装成功：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br></pre></td></tr></table></figure><p>Docker 把应用程序及其依赖都打包在 image 文件里面，通过这个文件就能生成 Docker 容器。执行下面这条指令可以列出本机的所有 image 文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br></pre></td></tr></table></figure><p>如果是第一次运行 Docker，可以执行下面这条命令启动一个 nginx 服务器测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 80:80 --name myserver nginx</span></span><br></pre></td></tr></table></figure><p>这条命令执行完之后，由于这是第一次运行，并且 nginx 镜像还没有下载到本地，因此 Docker 会自动从 Docker Hub 库中拉去该镜像，如果命令成功完成，此时在本地访问 <a href="http:// localhost">http:// localhost</a> 后就可以查看道 nginx 服务器的主页了。</p><p>下面我来以使用 Docker 安装 Hadoop 环境演示 Docker 具体使用的方法。要将 Hadoop 安装在 Docker 容器中，首先就需要一个 Hadoop Docker 镜像，要想生成镜像，我们可以使用 Github 中的 docker-hadoop 镜像库，执行如下命令拉取该仓库中的代码：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/big-data-europe/docker-hadoop.git</span></span><br></pre></td></tr></table></figure><p>docker-hadoop 镜像中就含有生成镜像的清单文件 Makefile，此时，执行下面这条命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure><p>docker-Compose 可以用来同时安装多个容器。 -d 参数作用是后台运行命令程序并返回命令提示符。仅使用上面的一条命令，就可以设置一个 Hadoop 集群了。</p><p>如果镜像在本地不可用，docker-compose 也会尝试从 docker-hub 库中拉去远程镜像，构建镜像并启动容器。 完成后，就可以使用以下命令来检查当前正在运行的容器了：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br></pre></td></tr></table></figure><p>进入 <a href="http:// localhost:9870">http:// localhost:9870</a> 就可以从名称节点查看系统的当前状态了。</p><p>当然，除了使用这种方法使用别人在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">docker-hub</a> 或者 Github  开源的镜像，我们也可以自定义镜像，这种方式本篇文章先不做讨论。本篇到这里先结束了，看完后关于虚拟化和容器的概念你是不是都掌握了？大家有任何问题可直接联系我，也可在博客评论区讨论。</p><h2 id="参考文章以及衍生阅读"><a href="#参考文章以及衍生阅读" class="headerlink" title="参考文章以及衍生阅读"></a>参考文章以及衍生阅读</h2><p><a href="https://www.redhat.com/en/topics/virtualization/what-is-virtualization" target="_blank" rel="noopener">RED-HAT-what-is-virtualization</a></p><p><a href="https://www.redhat.com/en/topics/containers/whats-a-linux-container" target="_blank" rel="noopener">RED-HAT-What’s a Linux container?</a></p><p><a href="https://opensource.com/article/18/1/history-low-level-container-runtimes" target="_blank" rel="noopener">A history of low-level Linux container runtimes</a></p><p><a href="https://www.redhat.com/zh/topics/virtualization/what-is-KVM" target="_blank" rel="noopener">RED-HAT-what-is-KVM</a></p><p><a href="https://www.infoq.cn/article/docker-kernel-knowledge-cgroups-resource-isolation/" target="_blank" rel="noopener">Docker 背后的内核知识——cgroups 资源限制</a></p><p>部分图片来自：<a href="https://blog.resellerclub.com/what-is-virtualization-and-how-does-it-work/" target="_blank" rel="noopener">what-is-virtualization-and-how-does-it-work</a></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 容器化 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解字符编码（ASCII、Unicode、UTF-8、UTF-16、UTF-32）</title>
      <link href="/2020/05/12/3619/"/>
      <url>/2020/05/12/3619/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接近一年没有更新博客了，这是 2020 的第一篇，源于对基础知识的巩固，主要会从多个维度解释字符编码的由来以及内部原理。</p></blockquote><p>大家都知道，程序中的所有信息都是以二进制的形式存储在计算机的底层，也就是说我们在代码中定义的一个 char 字符或者一个 int 整数都会被转换成二进制码储存起来，这个过程可以被称为<strong>编码</strong>，而将计算机底层的二进制码转换成屏幕上有意义的字符（如“hello world”），这个过程就称为<strong>解码</strong>。</p><p>在计算机中字符的编解码就涉及到<strong>字符集（Character Set）</strong>这个概念，他就相当于能够将一个字符与一个整数一一对应的一个映射表，常见的字符集有 ASCII、Unicode 等。</p><p>很多时候我们会将字符集的编码与字符集混为一谈，从这里就可以看出它们并非同一个概念，字符集仅仅是一个字符的集合，而编码却是一个更复杂的过程。至于为什么会经常将这两个概念放在一起，他们之间的联系是什么，我们经常使用的 UTF-8 又是什么，这就是这篇文章我要讨论的话题。</p><h2 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h2><p>历史中的很长一段时间里，计算机仅仅应用在欧洲的一些发达国家，因此在他们的程序中只存在他们所理解的拉丁字母（如a、b、c、d等）和阿拉伯数字，他们在编码解码时也只需要考虑这一种情况，就是如何将这些字符转换成计算机所能理解的二进制数，此时 ASCII 字符集应运而生，他们在编码时只需要对照着 ASCII 字符集，每当在程序中遇到字符 a 时，就会相应的找到其中 a 对应的 ASCII 值 97 然后以二进制形式存起来即可。</p><p>下图展示了 ASCII 字符集对照表，其中包括了控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p><p><img src="/images/112705iz0fn8ppf0hqdxfw.jpg" alt="ASCII 码对照表"></p><p>这种编码方式就被称为 ASCII 编码，从字符集对照表中可以看出，ASCII 字符集支持 128 种字符，仅使用 7 个 bit 位，也就是一个字节的后 7 位就可以将它们全部表示出来，而最前面的一位统一规定为 0 即可（如 0110 0001 表示 a）。</p><p>后来，为了能够表示更多的欧洲国家的常用字符如法语中带符号的字符 <code>é</code>，又制定了 ASCII 额外扩展的版本 EASCII，这里就可以使用一个完整子节的 8 个 bit 位表示共 256 个字符，其中就又包括了一些衍生的拉丁字母。</p><p><img src="/images/ascii2-en.jpg" alt="拓展 ASCII 码表"></p><h2 id="非-ASCII-编码"><a href="#非-ASCII-编码" class="headerlink" title="非 ASCII 编码"></a>非 ASCII 编码</h2><p>ASCII 字符集沿用至今，但它最大的缺点在于只能表示基本的拉丁字母、阿拉伯数字和英式标点符号，因此只能表示现代美国英语（而且在处理英语当中的外来词如 naïve、café、élite 等等单词时，所有重音符号都不得不去掉）。而 EASCII 虽然解决了部份西欧语言的显示问题，但是当计算机传入亚洲之后，各国的语言依然不能完整地表示出来。</p><p>在这个年代，每个国家就各自来对 ASCII 字符集做了拓展，最具代表性的就是国内的 GB 类的汉字编码模式，这种模式规定：ASCII 值小于 127 的字符的意义与原来 ASCII 集中的字符相同，但当两个 ASCII 值大于 127 的字符连在一起时，就表示一个简体中文的汉字，前面的一个字节（高字节）从 0xA1 拓展到 0xF7，后面一个字节（低字节）从 0xA1 到 0xFE，这样就可以组合出了大约 7000 多个简体汉字了。</p><p>为了在解码时操作的统一，GB 类编码表中还也加入了数学符号、罗马希腊的字母、日文的假名等，连在 ASCII 里本来就有的数字、标点、字母都统一重新表示为了两个字节长的编码，这就是我们常说的 “全角” 字符，而原来在 127 号以下的那些就叫 “半角” 字符了，这种编码规则就是后来的 GB2312。</p><blockquote><p>“一个汉字算两个英文字符！一个汉字算两个英文字符……”</p></blockquote><p>下图展示了 GB2312 字符集中的一小部分，具体可查看 <a href="http://www.knowsky.com/resource/gb2312tbl.htm" target="_blank" rel="noopener">GB2312 简体中文编码表</a>。</p><p><img src="/images/201105031137227086.png" alt="GB2312 简体中文编码表"></p><p>这样，我们中国就有了属于自己的字符集了，但中国的汉字又是在是太多了，人们很快就发现 GB2312 字符集只能够那点汉字明显不够（如中国前总理朱镕基的 “镕” 字并不在 GB2312 字符集中），于是专家们又继续把 GB2312 没有用到的码位使用到其他没有被收录的汉字中。</p><p>后来还是不够用，于是干脆不再要求低字节一定是 127 号之后的内码，只要第一个字节是大于 127 就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近 20000 个新的汉字（包括繁体字）和符号。</p><p>当时的各个国家都像中国这样制定出了一套自己的编码标准，之后当我们需要使用计算机与国际接轨时，问题出现了！国家与国家之间谁也不懂谁的编码，130 在法语编码中代表了 <code>é</code>，在希伯来语编码中却代表了字母 <code>Gimel</code> (<code>ג</code>)，在俄语编码中又会代表另一个符号。但是所有这些编码方式中，0—127 表示的符号依然都是一样的，因为他们都兼容 ASCII 码，这一点，如今也是一样。</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>正如上一节中所说的，世界上各国都有不同的编码方式，同一个二进制数字可以被解码成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为了解决这个问题，最终的集大成者 Unicode 字符集出现了，它将世界上所有的符号都纳入其中，成功实现了每个数字代表唯一的至少在某种语言中使用的符号，目前，Unicode 字符集中已经收录超过 13 万个字符（第十万个字符在2005年获采纳）。值得关注的是，Unicode 依然兼容 ASCII，即 0～127 意义依然不变。</p><h3 id="码点"><a href="#码点" class="headerlink" title="码点"></a>码点</h3><p>Unicode 表示的是一个字符集，与我们通常所说的 UTF-8、UTF-6 等编码方式并不相同，本节介绍的<strong>编号</strong>就相当于 ASCII 码中的 ASCII 值，它就是 Unicode 字符集中唯一表示某个字符的标识，在 Unicode 也称作<strong>码点（Code Point）</strong>，如码点 U+0061，这里的 61 就是 97 的十六进制表示，它就表示 Unicode 字符集中的字符 ‘a‘。</p><p>码点的表示的形式为 U+[XX]XXXX，X 代表一个十六制数字，一般可以有 4-6 位，不足 4 位前补 0 补足 4 位，超过则按是几位就是几位，具体范围是 U+0000~U+10FFFF，大概是 111 万。按 Unicode 官方的说法，码点范围就这样了，以后也不扩充了，一百多万足够用了，目前也只定义了 11 万多个字符左右。</p><p>整个编码过程中码点就作为了一个中间的过渡层，可用下面这张图来表示：</p><p><img src="/images/210113_iRnr_1772009.jpg" alt="字符编码过程"></p><p>从这张图可以看出，整个解码可分为两个过程。首先，将程序中的字符根据字符集中的编号数字化为某个特定的数值，然后根据编号以特定的方式存储到计算机中。</p><p>显然，这时候我们就可以发现<strong>编号并不是最终存储在计算机中的结果</strong>。按照之前的理解，编码即把一个字符编码为一个二进制数字存储起来，然而这种表述并不准确，真正的编码不止这么简单，这其中还涉及了每个数字用几个字节表示，是用定长还是变长表示等具体细节。</p><p>举个例子，字符 a 的码点为 U+0061（十进制为 97），那么这个 U+0061 该如何存储，单纯的表示 U+0061 可以直接使用 7 位的二进制数 110 0001 表示，但在 GB 类的编码模式中就需要以两个字节存储即 0000 0000 0110 0001（空位用 0 填充）。</p><h3 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h3><p>Unicode 字符集衍生出来的编码方案有三种，分别是 UTF-32、UTF-16 和 UTF-8，这使他与之前的编码模式不同，因为 ASCII、GBK 等类编码模式的字符集和编码方式都是一一对应的，而 Unicode 的编码实现却有三种，这就是我们需要区分字符集与编码的原因之一，因为此时 Unicode 并不特指  UTF-8 或者 UTF-32。</p><p>下面，我们来看下面这张示意图，探究各种编码模式下，码点是如何具体转换成各种<strong>编码</strong>的：</p><p><img src="/images/unicode%20from%20char%20to%20code%20point%20then%20utf.svg" alt=""></p><p>上面表中包含了四个字符的码点，其中也展示了四个不同的码点在 UTF-32、UTF-16 和 UTF-8 三种编码模式下的编码结果。其中：码点到 UTF-32 的转换最简单，就是在前面填充 0 满 4 字节即可；码点到 UTF-8 的转换，除了最小那个在数值上一样外，其它三个完全看不出两者的关系；码点到 UTF-16 的转换则是最不规则的，可以看出前三个字符 UTF-16 与码点是完全一致的，但那个大码点（准确地说是超过了 U+FFFF 的码点）则有了很大的变化，长度变成了四字节，值也变得很不一样了。</p><p>这其中又涉及到编码过程中<strong>定长</strong>与<strong>变长</strong>两种实现方式，这里的 UTF-32 就属于定长编码，即永远用 4 字节存储码点，而 UTF-8、UTF-16 就属于变长存储，UTF-8 根据不同的情况使用 1-4 字节，而 UTF-16 使用 2 或 4 字节来存储码点。</p><h3 id="定长于变长"><a href="#定长于变长" class="headerlink" title="定长于变长"></a>定长于变长</h3><p>为什么要有定长于变长这两种编码形式？在中文的表达中都会有所谓的断句问题，如果我们处理不好断句很有可能会将意思传递错误。如下面这句来自算命先生纸条中的内容：</p><blockquote><p>大富大贵没有灾难要小心</p></blockquote><p>此时，如果算命侠客这样断句：</p><blockquote><p>大富大贵，没有灾难要小心</p></blockquote><p>表示我福大命大，没有灾难，可以肆意妄为了，但是没过多久这位侠客就去世了，算名先生绝望地说，你会错意了，原来，其实是这样断句的：</p><blockquote><p>大富大贵没有，灾难要小心</p></blockquote><p>表示你没有大富大贵，出门要小心，断句就可能会出现这样严重的后果。</p><p>这也是计算机在解码时需要使用定长与变长的原因。因为计算机底层的二进制码也和算命先生纸条中的内容一样，毫无章法，我们如果想要正确理解其中的意思就要有一个约定俗成的规则。</p><h3 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h3><p>在 UTF-32 这种定长的编码方式下就表示每 4 个子节一个断句，那么字符 A 的码点 U+0041（二进制为 1000001）被 UTF-32 编码后就会变成如下形式存储在计算机中：</p><blockquote><p><strong>00000000 00000000 00000000 01000001</strong></p></blockquote><p>它会将 4 个字节中空出的高位全部填充为 0。这种表示的最大缺点是占用空间太大，因为不管都大的码点都需要四个字节来存储，非常的占空间，那么如何突破这个瓶颈呢？变长方案应运而生。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8 属于变长的编码方式，它可以由 1，2，3，4 四种字节组合，使用的是<strong>高位保留</strong>的方式来区别不同变长，具体方式如下：</p><ol><li><p>对于只有一个字节的符号，字节的第一位设为<code>0</code>，后面 7 位为这个符号的 Unicode 码。此时，对于英语字母UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于 <code>n</code> 字节的符号（<code>n &gt; 1</code>），第一个字节的前 <code>n</code> 位都设为 <code>1</code>，第 <code>n + 1</code> 位设为<code>0</code>，后面字节的前两位一律设为 <code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码，如下表所示：</p></li></ol><div class="table-container"><table><thead><tr><th>Unicode 码点范围（十六进制）</th><th>UTF-8 编码方式（二进制）</th><th>字节数</th></tr></thead><tbody><tr><td>0000 0000 ～ 0000 007F</td><td>0xxxxxxx</td><td>一个字节</td></tr><tr><td>0000 0080 ～ 0000 07FF</td><td>110xxxxx 10xxxxxx</td><td>二个子节</td></tr><tr><td>0000 0800 ～ 0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td><td>三个字节</td></tr><tr><td>0001 0000 ～ 0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td><td>四个字节</td></tr></tbody></table></div><p>跟据上表，编码字符时就非常简单了，以汉字 “丑” 为例，它的码点为 0x4E11（0100 1110 0001 0001）在上表的第三行范围（0000 0800 ～ 0000 FFFF）内，因此 “丑” 需要以三个字节的形式编码：</p><p>   <img src="/images/UTF8-3-byte-encoding-20200512210902622.png" alt="UTF-8 占 3 个字节填入格式"></p><p>   这里最高位的第一个字节中的三个 1 表示该字符占 3 个字节，空出的 16 位 x 就会从 “丑” 的最后一个二进制位开始，依次从后向前填入格式中，多出的位补 0，这样就得到了 “丑” 的 UTF-8 编码是 11100100 10111000 10010001，转换成十六进制就是 E4B891。</p><p>   解码 UTF-8 编码也很简单了，如果一个字节的第一位是 0，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个 1，就表示当前字符占用多少个字节，”丑” 有三个 1 表示占三个字符，然后取出有效位即可。 </p><h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF-16 使用的是一种变长为 2 或 4 字节编码模式。</p><p>最初，Unicode1.0 被设计为纯 16 位编码，拥有 65,536 个码点（U+0000～U+FFFF），目的就是希望能够表示所有现代字符，然而随着时间推移，16 位对于计算机而言显然是不够的，因此产生了如今的 4 字节的 UTF-16 编码，此时，Unicode 就具有了 1,114,112 个代码点（U+10000 ～ U+10FFFF），这就是我们之前介绍 Unicode。 </p><p>此时，范围在 U+0000～U+FFFF 的码点被称了为 <strong>BMP（Basic Multilingual Plane，基本多语言平面）</strong>，而后来拓展的范围 U+10000 ～ U+10FFFF 称为 <strong>SP（Supplementary Planes，增补平面）</strong>。UTF-16 就是利用 BMP 使用<strong>代理</strong>的方式来对字符进行编码。</p><blockquote><p>何为代理？</p></blockquote><p>代理和 UTF-8 中的高位保留的目的一样，就是为了能够实现变长的编码方式。</p><blockquote><p>什么是代理区？</p></blockquote><p>代理区由两个特殊范围（BMP 中的空闲部分）的 Unicode 码点组成，总共有 2048 个位置，均分为<strong>高代理区</strong>（D800–DBFF）和<strong>低代理区</strong>（DC00–DFFF）两部分，各 1024，这两个区可以组成一个二维的表格，共有 1,024 x 1,024 = 1,048,576 = 16×65536 个单元格，所以它恰好可以表示代理（增补）的 16 位中的所有字符。</p><p><img src="/images/05005221_ENrq.png" alt="BMP中的空闲区域"></p><p><img src="/images/05005224_ngsJ.png" alt="代理区二维表格"></p><p>这种从一维存储转换到二维存储的方式就可以实现空间增大的效果了，UTF-16 也就有了能够额外获得码点的方式了。</p><p>一个高代理区（即上图中的 Lead（头），行）的加一个低代理区（即上图中的Trail（尾），列）的编码组成一对<strong>代理对（Surrogate Pair）</strong>。在图中就可以看到一些转换的例子，如</p><p>（<strong>D8 00</strong> <strong><em>DC 00</em></strong>）—&gt;U+10000，左上角，第一个增补字符</p><p>（<strong>DB FF</strong> <strong><em>DF FF</em></strong>）—&gt;U+10FFFF，右下角，最后一个增补字符</p><blockquote><p>从 UTF-16 转换为字符代码的算法是什么？</p></blockquote><p>分成两部分：</p><ol><li><p>BMP 中直接对应，无须做任何转换；</p></li><li><p>增补平面 SP 中，则需要做相应的计算。其实由上图中的表也可看出，码点就是从上到下，从左到右排列过去的，所以只需做个简单的除法，拿到除数和余数即可确定行与列。</p><p>拿到一个码点，先减去 10000，再除以 400（=1024）就是所在行了，余数就是所在列了，再加上行与列所在的起始值，就得到了代理对了。</p></li></ol><script type="math/tex; mode=display">C_H =（码点 – 10000_{16}）\div 400_{16} + D800_{16}</script><script type="math/tex; mode=display">C_L =（码点 – 10000_{16}）\% 400_{16} + DC00_{16}</script><p>需要关注的是，最常用的字符依然是在 BMP 平面中编码的，下表给出了各码点范围内 UTF-16 编码取值方法：</p><div class="table-container"><table><thead><tr><th>Unicode 码点范围</th><th>UTF-16 编码</th></tr></thead><tbody><tr><td>U+0000..U+D7FF</td><td>BMP内，一个字节，不做转换</td></tr><tr><td>U+D800..U+DFFF</td><td>BMP 空闲区</td></tr><tr><td>U+E000..U+FFFF</td><td>BMP内，一个字节，不做转换</td></tr><tr><td>U+10000..U+10FFFF</td><td>两个字节: 高位+低位</td></tr></tbody></table></div><p>下面以码点 U+1D11E 具体示例计算代理对：</p><script type="math/tex; mode=display">高代理 = (1D11E – 10000_{16}) ÷ 400_{16} + DB00 = D11E ÷ 400_{16} + D800 = 34 + D800 = D834</script><script type="math/tex; mode=display">低代理 = (1D11E – 10000_{16}) \% 400_{16} + DC00 = D11E \% 400_{16} + DC00 = 11E + DC00 = DD1E</script><p>所以，码点 U+1D11E 对应的代理对即是 D834 DD1E。下表又列举出了其他字符的 UTF-16 的编码过程：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">码点</th><th style="text-align:center">Unicode 二进制编码</th><th style="text-align:center">UTF-16 代码单元</th><th style="text-align:center">UTF-16 十六进制字节</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td style="text-align:center">U+0024</td><td style="text-align:center">0000 0000 0010 0100</td><td style="text-align:center">0000 0000 0010 0100</td><td style="text-align:center">0024</td></tr><tr><td style="text-align:center">€</td><td style="text-align:center">U+20AC</td><td style="text-align:center">0010 0000 1010 1100</td><td style="text-align:center">0010 0000 1010 1100</td><td style="text-align:center">20AC</td></tr><tr><td style="text-align:center">[𐐷</td><td style="text-align:center">U+10437</td><td style="text-align:center">0001 0000 0100 0011 0111</td><td style="text-align:center">1101 1000 0000 0001 1101 1100 0011 0111</td><td style="text-align:center">D801 DC37</td></tr><tr><td style="text-align:center">𤭢</td><td style="text-align:center">U+24B62</td><td style="text-align:center">0010 0100 1011 0110 0010</td><td style="text-align:center">1101 1000 0101 0010 1101 1111 0110 0010</td><td style="text-align:center">D852 DF62</td></tr></tbody></table></div><p>和 UTF-8 中高位保留的方式一样，UTF-16 在各码点范围内同样拥有一个二进制到实际编码单元的映射表，如下：</p><div class="table-container"><table><thead><tr><th>Codepoint range</th><th>Unicode 二进制</th><th>UTF-16 编码方式（代码单元）</th></tr></thead><tbody><tr><td>U+0000 ～ U+D7FF，U+E000 ～U+EFFF</td><td>00000xxxxxxxxxxxxxxxx</td><td>xxxxxxxxxxxxxxxx</td></tr><tr><td>U+10000 ～ U+10FFFF</td><td>Uuuuuxxxxxxyyyyyyyyyy</td><td>110110wwwwxxxxxx 110111yyyyyyyyyy</td></tr></tbody></table></div><p>按照上面的两个表我们也不难发现其中的规律，在 U+10000 ～ U+10FFFF 范围内的码点在编码时可以分别将第一个子节和第三个字节的高位设为 110110 和 110111，然后再根据 Unicode 二进制码各位填补即可（其中，<strong>这里的uuuuu = wwww + 1</strong>）。</p><p>本篇到此结束，大家有任何问题可直接联系我，也可在博客评论区讨论。</p><h2 id="参考文章以及衍生阅读"><a href="#参考文章以及衍生阅读" class="headerlink" title="参考文章以及衍生阅读"></a>参考文章以及衍生阅读</h2><p><a href="https://unicodebook.readthedocs.io/about.html" target="_blank" rel="noopener">Programming with Unicode</a></p><p><a href="https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=IWS-AppendixA" target="_blank" rel="noopener">Mapping codepoints to Unicode encoding forms</a></p><p><a href="https://xiaogd.net/%e5%ad%97%e7%ac%a6%e9%9b%86%e4%b8%8e%e7%bc%96%e7%a0%81%ef%bc%88%e4%b8%89%ef%bc%89-%e5%ae%9a%e9%95%bf%e4%b8%8e%e5%8f%98%e9%95%bf/" target="_blank" rel="noopener">字符集与编码（三）——定长与变长</a></p><p><a href="https://xiaogd.net/%e5%ad%97%e7%ac%a6%e9%9b%86%e4%b8%8e%e7%bc%96%e7%a0%81%ef%bc%88%e5%9b%9b%ef%bc%89-unicode/#%E7%A0%81%E7%82%B9%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F%E4%B8%8E%E8%8C%83%E5%9B%B4%E6%98%AF%EF%BC%9F" target="_blank" rel="noopener">字符集与编码（四）——Unicode</a></p><p><a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="noopener">wiki-UTF-16</a></p><p><a href="https://unicode.org/faq/utf_bom.html" target="_blank" rel="noopener">General questions, relating to UTF or Encoding Form</a></p><p><a href="https://blog.csdn.net/stilling2006/article/details/4129700" target="_blank" rel="noopener">字符编码详解及由来(UNICODE,UTF-8,GBK)</a></p><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a></p><p><a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/" target="_blank" rel="noopener">Unicode Character Set and UTF-8, UTF-16, UTF-32 Encoding</a></p><p><a href="https://home.unicode.org/" target="_blank" rel="noopener">Unicode 官网</a></p><p><a href="http://www.chi2ko.com/tool/CJK.htm" target="_blank" rel="noopener">Unicode 中文汉字编码表</a></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
            <tag> 编码原理 </tag>
            
            <tag> ASCII </tag>
            
            <tag> Unicode </tag>
            
            <tag> UTF-8 </tag>
            
            <tag> UTF-16 </tag>
            
            <tag> UTF-32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter动画全解析（动画四要素、动画组件、隐式动画组件原理等）</title>
      <link href="/2019/07/01/c0f2/"/>
      <url>/2019/07/01/c0f2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文通过拆解 Flutter 中动画的实现方式以及原理来介绍动画实现的整个过程。</p></blockquote><h2 id="1-动画四要素"><a href="#1-动画四要素" class="headerlink" title="1. 动画四要素"></a>1. 动画四要素</h2><p>动画在各个平台的实现原理都基本相同，都是由在一段时间内一系列连续变化画面的帧构成的。在 Flutter 中，动画的过程又被量化成一段值区间，我们可以利用这些值设置控件的各个属性来实现动画，其内部由四个关键的部分来实现这一过程。</p><a id="more"></a><h3 id="1-1-插值器（Tweens）"><a href="#1-1-插值器（Tweens）" class="headerlink" title="1.1 插值器（Tweens）"></a>1.1 插值器（Tweens）</h3><p>tweens 可为动画提供起始值和结束值。默认情况下，Flutter 中的动画将任何给定时刻的值映射到介于 0.0 和 1.0 之间的 double 值。 我们可以使用以下 Tween 将其间值的范围定义为从 -200.0变为 0.0：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">tween = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">-200</span>, end: <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们也可以将值设置为相应需要改变的对象值，比如将起始值设置为红色，结束值设置为蓝色，那么 tweens 产生的动画便是由红渐渐的变成蓝色。如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">colorTween = ColorTween(begin: Colors.red, end: Colors.blue);</span><br></pre></td></tr></table></figure><h3 id="1-2-动画曲线（Animation-Curves）"><a href="#1-2-动画曲线（Animation-Curves）" class="headerlink" title="1.2 动画曲线（Animation Curves）"></a>1.2 动画曲线（Animation Curves）</h3><p>Curves 用来调整动画过程中随时间的变化率，默认情况下，动画以均匀的线性模型变化。读者可以通过自定义继承 Curves 的类来定义动画的变化率，比如设置为加速、减速或者先加速后减速等曲线模型。Flutter 内部也提供了一系列实现相应变化率的 Curves 对象：</p><ul><li>linear</li><li>decelerate</li><li>ease</li><li>easeIn</li><li>easeOut</li><li>easeInOut</li><li>fastOutSlowIn</li><li>bounceIn</li><li>bounceOut</li><li>bounceInOut</li><li>elasticIn</li><li>elasticOut</li><li>elasticInOut</li></ul><p>相关动画曲线模型图如下：</p><p><img src="/images/curve_linear.gif" alt="curve_linear"></p><p><img src="/images/curve_bounce_in.gif.gif" alt="curve_bounce_in"></p><p><img src="/images/curve_ease_in.gif.gif" alt="curve_ease_in"></p><h3 id="1-3-Ticker-providers"><a href="#1-3-Ticker-providers" class="headerlink" title="1.3 Ticker providers"></a>1.3 Ticker providers</h3><p>Flutter 中的动画以屏幕频繁的重绘而实现，即每秒 60 帧。Ticker 可以被应用在 Flutter 每个对象中，当对象实现了 Ticker 的功能后，每次动画帧改变便会通知该对象。这里，开发者们不需要为对象手动实现 Ticker，flutter 提供了 TickerProvider 类可以帮助我们快速实现该功能。例如，在有状态控件下使用动画时，通常需要在 State 对象下混入 TickerProviderStateMixin。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAnimationState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyAnimation</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-动画控制器（AnimationController）"><a href="#1-4-动画控制器（AnimationController）" class="headerlink" title="1.4 动画控制器（AnimationController）"></a>1.4 动画控制器（AnimationController）</h3><p>Flutter 中动画的实现还有一个非常重要的类 AnimationController，即动画控制器。很明显，我们用它来控制动画，即动画的启动、暂停等。其接受两个参数，第一个是 vsync，为 Ticker 对象，其作用是当接受到来自 tweens 和 curves 的新值后通知对应对象，第二个 duration 参数为动画持续的时长。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 混入 SingleTickerProviderStateMixin 使对象实现 Ticker 功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedContainer</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 创建 AnimationController 动画</span></span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      <span class="comment">// 传入 Ticker 对象</span></span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      <span class="comment">// 传入 动画持续时间</span></span><br><span class="line">      duration: <span class="keyword">new</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),</span><br><span class="line">    );</span><br><span class="line">    startAnimation();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; startAnimation() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 AnimationController 的 forward 方法启动动画</span></span><br><span class="line">    <span class="keyword">await</span> _controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: _controller.value;</span><br><span class="line">      child: <span class="comment">//...</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnimationController 继承自 Animation，具有一系列控制动画的方法，如可用 <code>forward()</code> 方法来启动动画，可用 <code>repeat()</code> 方法使动画重复执行，也可以通过其 value 属性得到当前值。</p><h4 id="1-4-1-Animation"><a href="#1-4-1-Animation" class="headerlink" title="1.4.1 Animation"></a>1.4.1 Animation</h4><p>我们可以通过在 CurvedAnimation 传入 AnimationController 和 Curve 对象创建一个 Animation 对象，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AnimationController controller = AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; animation = CurvedAnimation(</span><br><span class="line">  parent: controller,</span><br><span class="line">  curve: Curves.ease,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也可以通过调用 tween 的 animate 方法传入 controller 对象创建 Animation 对象，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AnimationController controller = AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line">Animation&lt;<span class="built_in">int</span>&gt; alpha = IntTween(begin: <span class="number">0</span>, end: <span class="number">255</span>).animate(controller);</span><br></pre></td></tr></table></figure><p>Animation 是一个抽象类，其中保存了动画的过程值（value）和状态，下面是四种状态类型。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> AnimationStatus &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画处于停止状态</span></span></span><br><span class="line">  dismissed,</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画从头到尾执行</span></span></span><br><span class="line">  forward,</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画从尾到头执行</span></span></span><br><span class="line">  reverse,</span><br><span class="line">  <span class="comment">/// <span class="markdown">动画已执行完成</span></span></span><br><span class="line">  completed,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnimationController 是它的一个实现类。其内部通过范型机制可实现对各类型对象的动画，比如 <code>Animation&lt;double&gt;</code>、<code>Animation&lt;Color&gt;</code>、<code>Animation&lt;Size&gt;</code> 等。其另一个实现类 Curved­Animation，可以用来与 Curves 结合实现各类曲线模型函数的动画。</p><p>Animation 另一个实现方法是调用 tween 对象的 animate 方法传入 Animation 对象创建另一个 Animation 对象，该方法可通过将使动画值定义在 tween 区间内，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AnimationController controller = AnimationController(</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">final</span> Animation curve =</span><br><span class="line">    CurvedAnimation(parent: controller, curve: Curves.easeOut);</span><br><span class="line">Animation&lt;<span class="built_in">int</span>&gt; alpha = IntTween(begin: <span class="number">0</span>, end: <span class="number">255</span>).animate(curve);</span><br></pre></td></tr></table></figure><h4 id="1-4-5-动画监听"><a href="#1-4-5-动画监听" class="headerlink" title="1.4.5 动画监听"></a>1.4.5 动画监听</h4><p>Animation 对象可以有设置两种监听器，分别是帧监听器和状态监听器。使用 <code>addListener()</code> 添加帧监听器，使用<code>addStatusListener()</code>  添加状态监听器。</p><p>只要动画的值发生变化，就会触发帧监听器的回调。 通常，我们在其内部调用 <code>setState()</code> 来重建组件来实现动画效果，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">animation = <span class="keyword">new</span> CurvedAnimation(</span><br><span class="line">        parent: animationController, curve: Curves.elasticOut)</span><br><span class="line">animation.addListener(() =&gt; <span class="keyword">this</span>.setState(() &#123;&#125;))</span><br></pre></td></tr></table></figure><p>动画开始，结束，前进或后退时会触发 StatusListener 的回调，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">animation = <span class="keyword">new</span> CurvedAnimation(</span><br><span class="line">        parent: animationController, curve: Curves.elasticOut)</span><br><span class="line">animation.addStatusListener((AnimationStatus status) &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-动画组件"><a href="#2-动画组件" class="headerlink" title="2. 动画组件"></a>2. 动画组件</h2><p>我们已经知道了 Flutter 控制动画的四大要素，其中涉及的各个概念可以帮助我们设计出各种各样的动画效果，但不免也多了一些需要重复编写的模版代码，比如，在 Animation 的帧监听器设置的监听器回调里，几乎所有场景中我们都只是调用 <code>setState()</code>，再比如 State 对象每次都需要我们手动地混入 <code>SingleTickerProviderStateMixin</code> 等等这类情况。Flutter 为了提高开发者的开发效率，提供了 AnimatedWidget 抽象类来封装这部分模版代码，其源码非常简单，如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimatedWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">该 Widget 在 listenable 状态改变后将会重建.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">[listenable] 为必要参数.</span></span></span><br><span class="line">  <span class="keyword">const</span> AnimatedWidget(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.listenable</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(listenable != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">The [Listenable] to which this widget is listening.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">一般是一个 [Animation] 或者 [ChangeNotifier] 对象.</span></span></span><br><span class="line">  <span class="keyword">final</span> Listenable listenable;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">继承该方法构建依赖 listenable（当前 value 值等） 状态的 Widget.</span></span></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  Widget build(BuildContext context);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedState createState() =&gt; _AnimatedState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    widget.listenable.addListener(_handleChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(AnimatedWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">    <span class="keyword">if</span> (widget.listenable != oldWidget.listenable) &#123;</span><br><span class="line">      oldWidget.listenable.removeListener(_handleChange);</span><br><span class="line">      widget.listenable.addListener(_handleChange);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    widget.listenable.removeListener(_handleChange);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleChange() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// 状态改变，重建 Widget.</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; widget.build(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnimatedWidget 作为一个抽象类可供我们实现一个我们自己的具体类，其接受一个 Listenable 对象作为参数，并需要重写 <code>build</code> 方法。我们上一节中多次提到的 Animation 继承自 Listenable。下面的这个这个组件就是我自己实现的动画组件：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sun</span> <span class="keyword">extends</span> <span class="title">AnimatedWidget</span> </span>&#123;</span><br><span class="line">  Sun(&#123;Key key, Animation&lt;Color&gt; animation&#125;)</span><br><span class="line">      : <span class="keyword">super</span>(key: key, listenable: animation);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> Animation&lt;Color&gt; animation = listenable;</span><br><span class="line">    <span class="keyword">var</span> maxWidth = MediaQuery.of(context).size.width;</span><br><span class="line">    <span class="keyword">var</span> margin = (maxWidth * <span class="number">.3</span>) / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AspectRatio(</span><br><span class="line">        aspectRatio: <span class="number">1.0</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Container(</span><br><span class="line">            margin: EdgeInsets.symmetric(horizontal: margin),</span><br><span class="line">            constraints: BoxConstraints(</span><br><span class="line">              maxWidth: maxWidth,</span><br><span class="line">            ),</span><br><span class="line">            decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">              shape: BoxShape.circle,</span><br><span class="line">              color: animation.value,</span><br><span class="line">            )));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过传入已经定义好的 Animation 对象来使用该组件：??</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimateWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimateWidget</span>&gt; </span>&#123;</span><br><span class="line">  AnimationController _animationController;</span><br><span class="line">  ColorTween _colorTween;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: </span><br><span class="line">          Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Sun(animation: _colorTween.animate(_animationController)),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就封装了自己的一个动画组件，另外，Flutter 内部为我们提供了多个已经封装好的动画组件，利用好这些组件可以大大地提高我们的开发效率：</p><ul><li>SlideTransition</li><li>ScaleTransition</li><li>RotationTransition</li><li>SizeTransition</li></ul><h2 id="3-隐式动画组件"><a href="#3-隐式动画组件" class="headerlink" title="3. 隐式动画组件"></a>3. 隐式动画组件</h2><p>利用动画组件我们已经可以方便地封装出一系列控件动画了，但是这种实现方式均需要我们自己提供 Animation 对象，然后通过提供的接口方法来启动我们的动画，控件的属性由 Animation 对象提供并在动画过程中改变而达到动画的效果。为了使动画使用起来更加方便，Flutter 帮助了开发者从另一个角度以更简单的方式实现了动画效果——隐式动画组件（ImplicitlyAnimatedWidget）。</p><p>通过隐式动画组件，我们不需要手动实现插值器、曲线等对象，开发者甚至也不需要使用 AnimationController 来启动动画，它的实现方式更贴近对组件本身的操作，我们可以直接通过 <code>setState()</code> 的方法改变隐式动画组件的属性值，其内部自行为我们实现动画过程的过渡效果，即隐藏了所有动画实现的细节。Flutter 内部为我们提供了多个实用的隐式动画组件，我们本节分别介绍 AnimatedContainer 和 AnimatedOpacity 这两个最常用的隐式动画组件。</p><h3 id="3-1-AnimatedContainer"><a href="#3-1-AnimatedContainer" class="headerlink" title="3.1 AnimatedContainer"></a>3.1 AnimatedContainer</h3><p>AnimatedContainer 是我们最常使用到的隐式动画组件之一，从名字可以看出这个控件是以动画形式而成的 Contianer 控件，它们都是页面中渲染一个空的容器并且使用方法也非常相似。我们可以用下面的方式使用 Contianer 控件：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> height = <span class="number">40.0</span>  </span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">Container(</span><br><span class="line">    width: <span class="number">60.0</span>,</span><br><span class="line">    height: height,</span><br><span class="line">    color: Color(<span class="number">0xff14ff65</span>),</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>上面的代码中，我们将 Container 的高度设置为 height 变量，即为 40.0，当我们使用一个 Button 按钮触发改变 height 值的事件并且重绘界面时，Container 的高度会随之改变：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">onPressed: ()&#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    height = <span class="number">320.0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>但这种变化很明显仅是属性的改变并不是一个平滑的过渡动画，然而同样的事件发生在 AnimatedContainer 控件上，便会有一个渐变的效果：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AnimatedContainer(</span><br><span class="line">  duration: <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">  width: <span class="number">60.0</span>,</span><br><span class="line">  height: height,</span><br><span class="line">  color: Color(<span class="number">0xff14ff65</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用 AnimatedContainer 后，我们再次触发 height 变量改变后，页面中的 AnimatedContainer 便会平滑的过渡到相应的高度，其 duration 属性用于设置动画过渡的时间，这里，我们设置为 5 秒??。</p><p>我们可以用相同的方式为 Container 的 Color、width 等各种属性设置动画，同时也可以通过为其设置 alignment 属性来设置其内部子控件的位置。</p><h3 id="3-2-AnimatedOpacity"><a href="#3-2-AnimatedOpacity" class="headerlink" title="3.2 AnimatedOpacity"></a>3.2 AnimatedOpacity</h3><p>在 Flutter 中，另一种常用的动画是控件透明度的过渡动画，其对应的隐式动画组件为 AnimatedOpacity。它的用法与 Opacity 相似，内部持有的 opacity 属性可以设置为 0.0～1.0 中的任意浮点数，分别对应完全透明与完全不透明，使用下面的方式，我们便可以设置了一个半透明的 Opacity 控件：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Opacity(</span><br><span class="line">    opacity: <span class="number">0.5</span>,</span><br><span class="line">    child: Text(<span class="string">"hello"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们以相同的方法使用 AnimatedOpacity：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">double</span> opacity = <span class="number">1.0</span>;</span><br><span class="line">...</span><br><span class="line">AnimatedOpacity(</span><br><span class="line">    opacity: opacity,</span><br><span class="line">    duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">    child: Text(<span class="string">"hello"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>它也接受 duration 属性来设置过渡时间，通过改变 opacity 变量的值可以实现透明度变化的动画效果：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">setState(() &#123;</span><br><span class="line">opacity = <span class="number">0.0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-隐式动画原理简析"><a href="#3-3-隐式动画原理简析" class="headerlink" title="3.3 隐式动画原理简析"></a>3.3 隐式动画原理简析</h3><p>我们已经在之前部分介绍了 Flutter 中的三棵重要的树及它们在组件渲染中的作用了。在元素树中，每个 Element 对象持有控件树中 Widget 组件的状态信息，这里我们将它称为 State 对象，Widget 刷新重建时，Element 会对比自己所对应 Widget 是否更新而做出相应屏幕渲染上的改变。</p><p>在各个隐式动画组件中，其动画信息便储存在 Element 所持有的 State 对象中，Widget 每次刷新都会引起 Element 对其重新引用，当对应的 Widget 类型改变则其 Element 会连带 State 对象自然而然的需要重新渲染，然而当 Widget 类型不变，则 Element 不需要重建，只需要改变 State 对象储存的动画信息即可。这样一种连续更新属性的过程便实现了更为我们所方便使用的隐式动画。</p><h3 id="3-4-实现自定义隐式动画组件"><a href="#3-4-实现自定义隐式动画组件" class="headerlink" title="3.4 实现自定义隐式动画组件"></a>3.4 实现自定义隐式动画组件</h3><p>实现自定义的隐式动画组件，我们需要使用到两个类：ImplicitlyAnimatedWidget 和 AnimatedWidgetBaseState。</p><p>ImplicitlyAnimatedWidget 是所有隐式动画组件的父类，继承自 StatefulWidget，并且仅需要接受动画曲线 curve 与动画过渡时长 duration 两个参数：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ImplicitlyAnimatedWidget(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.curve = Curves.linear,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.duration</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>在我们自定义的隐式动画组件可以扩充他的参数类型满足我们的需求。</p><p>AnimatedWidgetBaseState 即 ImplicitlyAnimatedWidget 这个有状态组件所对应的 State 对象类，我们自定义的隐式动画组件所对应的 State 也必须继承该类，其内部需要重写 <code>forEachTween</code> 方法。</p><p>下面就是我自己定义的隐式动画组件：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAnimatedWidget</span> <span class="keyword">extends</span> <span class="title">ImplicitlyAnimatedWidget</span> </span>&#123;</span><br><span class="line">  MyAnimatedWidget(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.param, <span class="comment">//导致动画的参数</span></span><br><span class="line">    Curve curve = Curves.linear,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">Duration</span> duration,</span><br><span class="line">  &#125;) :<span class="keyword">super</span>(key: key, curve: curve, duration: duration);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> param;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAnimatedWidgetState createState() =&gt; _MyAnimatedWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAnimatedWidgetState</span> <span class="keyword">extends</span> <span class="title">AnimatedWidgetBaseState</span>&lt;<span class="title">MyAnimatedWidget</span>&gt; </span>&#123;</span><br><span class="line">  Tween&lt;<span class="built_in">double</span>&gt; _param; <span class="comment">// State 内部保存的当前状态信息，类型为 Tween</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> forEachTween(TweenVisitor&lt;<span class="built_in">dynamic</span>&gt; visitor) &#123;</span><br><span class="line">    _param = visitor(_param, widget.param, (value) =&gt; Tween&lt;<span class="built_in">double</span>&gt;(begin: value));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//return a widget built on a parameter</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们在父类的基础之上拓展了 param 参数，它是我们在动画过程中需要关注的动画属性值。我们还需要重点关注 _MyAnimatedWidgetState 类中 <code>forEachTween</code> 方法，它是隐式动画实现的核心方法，其用于每次更新组件的动画属性，接受一个 <code>TweenVisitor</code> 对象 visitor 作为参数。visitor 同时接受是那个参数，第一个为一个插值器对象 <code>Tween&lt;T&gt;</code>，其是应用在属性中的插值器当前补间值，第二个参数为一个 <code>T</code> 类型的值，即新的目标属性值，第三个参数为一个回调函数，用于配置给定的 value 值作为新的插值器开始值。<code>TweenVisitor&lt;T&gt;</code> 函数返回一个 <code>Tween&lt;T&gt;</code> 对象，我们将其赋值给组件中当前的插值器对象作为下次调用 <code>forEachTween</code> 方法时的当前值。</p><p>按照以上原理，我们就完成自己的隐式动画组件了。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter原理：三棵重要的树(渲染过程、布局约束、应用视图的构建等)</title>
      <link href="/2019/05/05/flutter-principle/"/>
      <url>/2019/05/05/flutter-principle/</url>
      
        <content type="html"><![CDATA[<p>了解 HTML 的读者一定听说过 DOM 树这个概念，它由页面中每一个控件组成，这些控件所形成的一种天然的嵌套关系使其可以表示为 “树” 结构，我们也可以将这个概念应用在 Flutter 中，例如默认的计数器应用的结构如下图：</p><a id="more"></a><p><img src="/images/counterAppwidgertree.jpg" alt=""></p><p>我们也可以看到上图中每个控件所形成的树结构中隐含了一些关系，例如在上图中，我们可以说 Text 组件是 Column 组件的子组件，Scaffold 是 AppBar 的父组件，这样的层级关系使得每个控件都清晰的连接到了一起，树结构由此而来。</p><p>在 Flutter 中，Container、Text 等组件都属于 Widget，所以我们将这种树称为 Widget 树，也可以叫做控件树，它就表示了我们在 dart 代码中所写的控件的结构。</p><p>然而，在 Flutter 体系结构中，真正做组件渲染在屏幕上这个任务的并非在 控件层（Widget）层，而是在渲染（Rendering）层，那么我们在代码中所写组件又是怎么通过渲染层显示的呢？Flutter 中又引入了 Element 树和 RenderingObject 树两棵树。</p><p>Element 是什么，我们可以把它称之为 Widget 另一种抽象。读者也可以把它看作一个更为实际控件，因为在我们的手机屏幕上显示的控件并非我们在代码中所写的 Widget，我们在代码中所使用的像 Container、Text 等这类组件和其属性只不过是我们想要构建的组件的配置信息，当我们第一次调用 <code>build()</code> 方法想要在屏幕上显示这些组件时，Flutter 会根据这些信息生成该 Widget 控件对应的 Element，同样地，Element 也会被放到相应的 Element 树当中。在 Flutter 中，一个 Widget 通过多次复用可以对应多个 Element 实例，Element 才是我们真正在屏幕上显示的元素。</p><blockquote><p>Element 与 Widget 另一个区别在于，Widget 天然是不可变的（immutable），它如要更新便需要重建，如果想要把可变状态与 Widget 关联起来，可以使用 StatefulWidget，StatefulWidget 通过使用StatefulWidget.createState 方法创建 State 对象，并将之扩充到 Element 以及合并到树中；</p></blockquote><p>这里，为了更为深刻的理解以上描述的含义，我们可以举一个更为形象的例子。Widget 作为大 Boss，他把近期的战略部署，即配置信息，写在纸上下发给经理人 Element，Element 看到详细的配置信息开始真正的开起活来了。我们还需要注意一点，大 Boss 随时会改变战略部署，然后不会在原有的纸上修改而是重新写下来，这时经理人为了减少工作量需要将新的计划与旧的计划比较来作出相应的更新措施。这也是 Flutter 框架层做的一大优化。下面又来了，Element 作为经理人也很体面，当然不会把活全干完，于是又找了一个 RenderObject 的员工来帮它做粗重的累活。</p><p>RenderObject 在 Flutter 当中做组件布局渲染的工作，其为了组件间的渲染搭配及布局约束也有对应的 RenderObject 树，我们也称之为渲染树。</p><p>熟悉了 Flutter 中的上述三颗树，相信读者会对组件的渲染过程有了一个清晰的认识，这对我们之后学习常用组件有很大的帮助，我们需要用不同的眼光去看待我们所建立的布局和控件，之后我们也会更加深入的去理解其中更不为人知的奥秘。</p><h3 id="组件渲染过程简述"><a href="#组件渲染过程简述" class="headerlink" title="组件渲染过程简述"></a>组件渲染过程简述</h3><p>从上文中，我们知道控件树中的每个控件都会实现一个 RenderObject 对象做渲染任务，并将所有的RenderObject 组成渲染树。Flutter 渲染组件的过程如下：</p><p><img src="https://www.stephenw.cc/images/render-pipeline.png" alt="img"></p><p>Flutter 的渲染过程由用户的输入开始，当接受到用户输入的信号时，就会触发动画的进度更新，例如我们第一次渲染时的启动动画，或者我们在滚动手机屏幕时单个列表项复用时的移动动画。之后便需要开始视图数据的构建（build），这一步中 Flutter 创建了前文所描述的三棵视图树。</p><p>在这之后，视图才会进行布局（layout），计算各个部分的大小，然后进行绘制（paint），生成每个视图的视觉数据，这部分的任务主要就是由 RenderObject 所做。这里，Flutter 中的布局过程可用下图表示，在上述构建完成渲染树后，父渲染对象会将布局约束信息向下传递，子渲染对象根据自己的渲染情况返回 Size，Size 数据会向上传递，最终父渲染对象完成布局过程。</p><p>最后一步进行“光栅化”（Rasterize），前一步得到合成的视图数据其实还是一份矢量描述数据，光栅化帮助把这份数据真正地生成一个一个的像素填充数据。在 Flutter 中，光栅化这个步骤被放在了 Engine 层中。</p><p>在日常开发学习中，我们只需要在代码层配置好我们的 Widget 树，了解各种 Widget 特性及使用方法，其余的工作都可以交给我们的框架层去实现。</p><h2 id="元素树详解"><a href="#元素树详解" class="headerlink" title="元素树详解"></a>元素树详解</h2><p>我们已经知道了各类控件的作用及其使用方法，这些 Widget 被我们开发人员配置了多个属性来定义它的展现形式，例如配置 Text 组件需要显示的字符串，配置输入框组件需要显示的内容。我们 Element 树会记录这些配置信息。熟悉 React 的读者可能了解过其中的 “虚拟 DOM” 这个概念，上述 Flutter 这种操作也正体现了这一概念。Widget 是不可变，它的改变就意味着要重建，而其重建也非常频繁，如果我们将更多的任务都交给它将会对性能造成很大的损伤，因此我们把 Widget 组件当作一个虚拟的组件树，而真正被渲染在屏幕上的其实是 Elememt 这棵树，它持有其对应 Widget 的引用，如果他对应的 Widget 发生改变，它就会被标记为 dirty Element，于是下一次更新视图时根据这个状态只更新被修改的内容，从而达到提升性能的效果。</p><p>每次，当控件挂载到控件树上时，Flutter 调用其 createElement() 方法，创建其对应的 Element。Flutter 再将这个 Element 放到元素树上，并持有创建它控件的引用，如下图：</p><p><img src="/images/element-3845797.svg" alt=""></p><p>控件会有它的子树：</p><p><img src="/images/element2.svg" alt=""></p><p>子控件也会创建相应 Element 被放在元素树上：</p><p><img src="/images/element3.svg" alt=""></p><h3 id="Element-中的状态"><a href="#Element-中的状态" class="headerlink" title="Element 中的状态"></a>Element 中的状态</h3><p>我们上文提到了 Widget 的不可变性，相应的 Element 就有其可变性，正如我们前文所说的它被标记为 dirty Element 便是作为需要更新的状态，另外一个我们需要格外注意的是，有状态组件（statefulWidget）对应的 State 对象其实也被 Element 所管理，如下图所示。</p><p>Flutter 中的 Widget 一直在重建，每次重建之后，Element 都会采用相应的措施来确定是否我对应的新控件跟之前引用旧控件是否有所改变，如果没改变则只需要做更新操作，如果前后不同则会重创建。那么，Element 根据什么来确定控件是否改变呢？它会比较 Widget 以下两个属性：</p><ul><li>组件类型</li><li>Widget 的 Key （如果有）</li></ul><p>组件类型即前后控件的是否是同一个类所创建的，Key 即为每个控件的唯一标识。</p><h2 id="渲染树详解"><a href="#渲染树详解" class="headerlink" title="渲染树详解"></a>渲染树详解</h2><p>我们已经大致知道 Flutter 中的三棵重要的树及 Element 树的工作原理，其中第三棵渲染树的任务就是做组件的具体的布局渲染工作。</p><p>渲染树上每个节点都是一个继承自 RenderObject 类的对象，其由 Element 中的 renderObject 或  RenderObjectWidget 中的 createRenderObject 方法生成，该对象内部提供多个属性及方法来帮助框架层中的组件如何布局渲染。</p><blockquote><p>我们在本章之前已经介绍了 StatelessWidget 和 StatefulWidget 两种直接继承自 Widget 的类，在 Flutter 中，还有另一个类 RenderObjectWidget 也同样直接继承自 Widget，它没有 build 方法，可通过 createRenderObject 直接创建 RenderObject 对象放入渲染树中。Column 和 Row 等控件都间接继承自RenderObjectWidget。 </p></blockquote><p>主要属性和方法如下：</p><ul><li>constraints 对象，从其父级传递给它的约束</li><li>parentData 对象，其父对象附加有用的信息。</li><li>performLayout 方法，计算此渲染对象的布局。</li><li>paint 方法，绘制该组件及其子组件。</li></ul><p>RenderObject 作为一个抽象类。每个节点需要实现它才能进行实际渲染。扩展 RenderOject 的两个最重要的类是RenderBox 和 RenderSliver。这两个类分别是应用了 Box 协议和 Sliver 协议这两种布局协议的所有渲染对象的父类，其还扩展了数十个和其他几个处理特定场景的类，并实现了渲染过程的细节，如 RenderShiftedBox 和 RenderStack 等等。</p><h3 id="布局约束"><a href="#布局约束" class="headerlink" title="布局约束"></a>布局约束</h3><p>在上面，我们介绍组件渲染流程时，我们了解到了 Flutter 中的控件在屏幕上绘制渲染之前需要先进行布局（layout）操作。其具体可分为两个线性过程：从顶部向下传递约束，从底部向上传递布局信息，其过程可用下图表示。</p><p><img src="/images/1_Ej811pAFyGniF66paMGKDQ.png" alt=""></p><p>第一个线性过程用于传递布局约束。父节点给每个子节点传递约束，这些约束是每个子节点在布局阶段必须要遵守的规则。就好像父母告诉自己的孩子 ：“你必须遵守学校的规定，才可以做其他的事”。常见的约束包括规定子节点最大最小宽度或者子节点最大最小的高度。这种约束会向下延伸，子组件也会产生约束传递给自己的孩子，一直到叶子结点。</p><p>第二的线性过程用来传递具体的布局信息。子节点接受到来自父节点的约束后，会依据它产生自己具体的布局信息，如父节点规定我的最小宽度是 500 的单位像素，子节点按照这个规则可能定义自己的宽度为 500 个像素，或者低于 500 像素的任何一个值。这样，确定好自己的布局信息之后，将这些信息告诉父节点。父节点也会继续此操作向上传递一直到最顶部。</p><p>下面我们具体介绍有哪些具体的布局约束可在树中传递。Flutter 中有两种主要的布局协议：Box 盒子协议和 Sliver 滑动协议。这里我们先以盒子协议为例展开具体的介绍。</p><p>在盒子协议中，父节点传递给其子节点的约束为 BoxConstraints。该约束规定了允许每个子节点的最大和最小宽度和高度。如下图，父节点传入 Min Width 为 150，Max Width 为 300 的 BoxConstraints：</p><p><img src="/images/1_XsXcNgEDo36GMe7PxKlBUQ.png" alt=""></p><p>当子节点接受到该约束，便可以取得上图中绿色范围内的值，即宽度在 150 到 300 之间，高度大于 100，当取得具体的值之后再将取得具体的大小的值上传给父节点，从而达到父子的布局通信。</p><h3 id="自定义一个-Center-控件"><a href="#自定义一个-Center-控件" class="headerlink" title="自定义一个 Center 控件"></a>自定义一个 Center 控件</h3><p>之后更新，大家也可以看各组件的源码探究其如何应用上面提到的原理。</p><p>—-2019.07.03 更新</p><p>现在，我们可以应用前文中提到的布局约束与渲染树相关的概念自己定义一个类似居中布局的组件 RenderObject 对象渲染在屏幕上。</p><p>所以我们称自己自定义组件为 CustomCenter：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">      body: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">        constraints: BoxConstraints(</span><br><span class="line">            maxWidth: <span class="built_in">double</span>.infinity,</span><br><span class="line">            minWidth: <span class="number">100.0</span>,</span><br><span class="line">            maxHeight: <span class="built_in">double</span>.infinity,</span><br><span class="line">            minHeight: <span class="number">100.0</span>),</span><br><span class="line">        child: CustomCenter(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来实现我们的 CustomCenter：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCenter</span> <span class="keyword">extends</span> <span class="title">SingleChildRenderObjectWidget</span> </span>&#123;</span><br><span class="line">  Stingy(&#123;Widget child&#125;) : <span class="keyword">super</span>(child: child);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RenderObject createRenderObject(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement createRenderObject</span></span><br><span class="line">    <span class="keyword">return</span> RenderCustomCenter();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CustomCenter</code> 继承了 <code>SingleChildRenderObjectWidget</code>，表明这个 Widget 只能有一个子控件， 其中，<code>createRenderObject(...)</code> 方法用于真正创建并返回我们的 <code>RenderObject</code> 对象实例， 我们的 RenderObject 为 <code>RenderCustomCenter</code>，代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderCustomCenter</span> <span class="keyword">extends</span> <span class="title">RenderShiftedBox</span> </span>&#123;</span><br><span class="line">  RenderStingy() : <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写绘制方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement paint</span></span><br><span class="line">    <span class="keyword">super</span>.paint(context, offset);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写布局方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> performLayout() &#123;</span><br><span class="line">    <span class="comment">// 布局子元素并向下传递布局约束</span></span><br><span class="line">    child.layout(</span><br><span class="line">        BoxConstraints(</span><br><span class="line">            minHeight: <span class="number">0.0</span>,</span><br><span class="line">            maxHeight: constraints.minHeight,</span><br><span class="line">            minWidth: <span class="number">0.0</span>,</span><br><span class="line">            maxWidth: constraints.minWidth),</span><br><span class="line">        parentUsesSize: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'constraints: <span class="subst">$constraints</span>'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定子元素的偏移位置</span></span><br><span class="line">    <span class="keyword">final</span> BoxParentData childParentData = child.parentData;</span><br><span class="line">    childParentData.offset = Offset((constraints.maxWidth - child.size.width)/<span class="number">2</span>,</span><br><span class="line">        (constraints.maxHeight - child.size.height)/<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'childParentData: <span class="subst">$childParentData</span>'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义自己（CustomCenter）的大小，这里选择约束对象的最大值</span></span><br><span class="line">    size = Size(constraints.maxWidth, constraints.maxHeight);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'size: <span class="subst">$size</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RenderCustomCenter</code> 继承自 <code>RenderShiftedBox</code>，该类是继承自 <code>RenderBox</code>。<code>RenderShiftedBox</code> 满足盒子协议，并且提供了 <code>performLayout()</code> 方法的实现。我们需要在 <code>performLayout()</code> 方法中布局我们的子元素。??</p><p>我们在使用 <code>child.layout(...)</code> 方法布局 <em>child</em> 的时候传递了两个参数，第一个为 <em>child</em> 的布局约束，而另外一个参数是 <code>parentUserSize</code>， 该参数如果设置为 <code>false</code>，则意味着 <em>parent</em> 不关心 <em>child</em> 选择的大小，这对布局优化比较有用；因为如果 <em>child</em> 改变了自己的大小，<em>parent</em> 就不必重新 <code>layout</code> 了。但是在我们的例子中，我们的需要把 <em>child</em> 放置在 <em>parent</em> 的中心，就是 <em>child</em> 的<strong>大小（Size）一旦改变，则其对应的偏移量（Offset）</strong> 也会改变，于是 <em>parent</em> 需要重新布局，所以我们这里传递了一个 <code>true</code>。</p><p>当 <code>child.layout(...)</code> 完成了以后，<em>child</em> 就确定了自己的 <em>Layout Details</em>。然后我们就还可以为其设置偏移量来将它放置到我们想放的位置。在我们的例子中为 <strong>居中</strong>。</p><p>最后，和 <em>child</em> 根据 <em>parent</em> 传递过来的约束选择了一个尺寸一样，我们也需要为 <strong>CustomCenter</strong> 选择一个尺寸。</p><p>运行效果如下：</p><p><img src="/images/16bb5b297356deab.png" alt=""></p><h2 id="应用视图的构建"><a href="#应用视图的构建" class="headerlink" title="应用视图的构建"></a>应用视图的构建</h2><p>Flutter App 入口的部分发生于如下代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里的 MyApp是一个 Widget</span><br><span class="line">void main() &#x3D;&gt; runApp(new MyApp());</span><br></pre></td></tr></table></figure><p><code>runApp</code>函数接受一个 Widget类型的对象作为参数，也就是说在 Flutter的概念中，只存在 View，而其他的任何逻辑都只为 View的数据、状态改变服务，不存在 ViewController(或者叫 Activity）。<br>接下来看 <code>runApp</code>做了什么：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void runApp(Widget app) &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class="line">    ..attachRootWidget(app)</span><br><span class="line">    ..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WidgetsFlutterBinding extends BindingBase with GestureBinding, ServicesBinding, SchedulerBinding, PaintingBinding, RendererBinding, WidgetsBinding &#123;</span><br><span class="line">  static WidgetsBinding ensureInitialized() &#123;</span><br><span class="line">    if (WidgetsBinding.instance &#x3D;&#x3D; null)</span><br><span class="line">      new WidgetsFlutterBinding();</span><br><span class="line">    return WidgetsBinding.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>runApp</code> 中，传入的 widget 被挂载到根 widget 上。这个 <code>WidgetsFlutterBinding</code> 其实是一个单例，通过 mixin 来使用框架中实现的其他 binding 的 Service，比如手势、基础服务、队列、绘图等等。然后会调用 <code>scheduleWarmUpFrame</code> 这个方法，从这个方法注释可知，调用这个方法会主动构建视图数据。这样做的好处是因为 Flutter 依赖 Dart 的 MicroTask 来进行帧数据构建任务的 schedule，这里通过主动调用进行整个周期的 “热身”，这样最近的下次 VSync 信号同步时就有视图数据可提供，而不用等到 MicroTask 的 next Tick。</p><p>然后我们再来看 <code>attachRootWidget</code> 这个函数干了什么：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void attachRootWidget(Widget rootWidget) &#123;</span><br><span class="line">    _renderViewElement &#x3D; new RenderObjectToWidgetAdapter&lt;RenderBox&gt;(</span><br><span class="line">      container: renderView,</span><br><span class="line">      debugShortDescription: &#39;[root]&#39;,</span><br><span class="line">      child: rootWidget</span><br><span class="line">    ).attachToRenderTree(buildOwner, renderViewElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>attachRootWidget</code> 把 widget交给了 <code>RenderObjectToWidgetAdapter</code>这座桥梁，通过这座桥梁，Element 被创建，并且同时能持有 Widget 和 RenderObject的引用。然后我们从上文就知道后面发生的就是第一次的视图数据构建了。</p><p><strong>从这一部分能印证了：Flutter应用通过 Widget、Element、RenderObject 三种树结构来维护整个应用的视图数据。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019第二次阅读记录</title>
      <link href="/2019/03/12/reading-record2/"/>
      <url>/2019/03/12/reading-record2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/fb59c770160c" target="_blank" rel="noopener">强缓存和协商缓存</a></p><p><a href="https://juejin.im/post/5a6c87c46fb9a01ca560b4d7" target="_blank" rel="noopener">缓存详解</a></p><p><a href="https://juejin.im/post/5a35ed25f265da431d3cc1b1" target="_blank" rel="noopener">轻松理解JS函数节流和函数防抖</a></p><p><a href="https://juejin.im/post/5c80e846518825355a71d154" target="_blank" rel="noopener">Flutter 的渲染逻辑及和 Native 通信</a></p><a id="more"></a><p><a href="https://mp.weixin.qq.com/s/CQQXD0TrlbaNWjoClIcDtw" target="_blank" rel="noopener">Flutter 原理简解</a></p><p><a href="http://www.cnblogs.com/shanyou/p/4085802.html" target="_blank" rel="noopener">TCP/IP, WebSocket 和 MQTT</a></p><p><a href="https://blog.csdn.net/jamesliulyc/article/details/6711828" target="_blank" rel="noopener">android开发时，finish()跟System.exit(0)的区别(转)</a></p><hr><p><a href="https://juejin.im/post/5b1cebece51d4506ae71addf" target="_blank" rel="noopener">Ajax原理一篇就够了</a></p><p><a href="https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="noopener">【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a></p><p><a href="https://zhenhua-lee.github.io/react/history.html" target="_blank" rel="noopener">react-router的实现原理</a></p><p><a href="http://blog.poetries.top/2018/12/20/react-router-anaylse/" target="_blank" rel="noopener">React Router原理</a>🌟</p><p><a href="https://juejin.im/post/5b50b0dd6fb9a04f932ff53f" target="_blank" rel="noopener">面试官所认为的单例模式</a></p><hr><p><a href="https://www.toutiao.com/i6545790064104833539/" target="_blank" rel="noopener">为什么HashMap非线程安全</a></p><p><a href="https://juejin.im/post/5c6fbf54f265da2db718216a" target="_blank" rel="noopener">TCP和UDP比较</a></p><p> <a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="noopener">稳定排序和不稳定排序</a></p><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="noopener">稳定排序和不稳定排序</a></p><p><a href="https://juejin.im/entry/58371f13a22b9d006882902d" target="_blank" rel="noopener">面试旧敌之红黑树（直白介绍深入理解）</a></p><p><a href="https://blog.csdn.net/sinat_35297665/article/details/80979181" target="_blank" rel="noopener">TCP第四次挥手为什么要等待2MSL</a></p><p><a href="https://juejin.im/post/5ad43b86f265da239236cedc" target="_blank" rel="noopener">Web安全防范——-防止重放攻击</a></p><p><a href="https://blog.csdn.net/u012758088/article/details/76020966" target="_blank" rel="noopener">网络编程—链路层报文、网络层IP报文、传输层TCP报文</a></p><hr><p><a href="https://juejin.im/post/5c98a834f265da6111675253" target="_blank" rel="noopener">Flutter 实现原理及在马蜂窝的跨平台开发实践</a></p><hr><p><a href="https://www.jianshu.com/p/b0b6b88fe9fe" target="_blank" rel="noopener">1- Https流程和原理</a></p><p><a href="https://www.cnblogs.com/liyuhui-Z/p/7844880.html" target="_blank" rel="noopener">HTTPS 建立连接的详细过程</a></p><p><a href="https://www.cnblogs.com/chentingk/p/6497107.html" target="_blank" rel="noopener">生产者消费者模式-Java实现</a></p><p><a href="https://www.cnblogs.com/gavinsp/p/5513536.html" target="_blank" rel="noopener">数据库索引详解</a></p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html" target="_blank" rel="noopener">java动态代理实现与原理详细分析</a></p><p><a href="https://www.cnblogs.com/chengxiao/p/6842045.html" target="_blank" rel="noopener">ConcurrentHashMap实现原理及源码分析</a></p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html" target="_blank" rel="noopener">java动态代理实现与原理详细分析</a></p><hr><p><a href="http://web.jobbole.com/85541/" target="_blank" rel="noopener">谈谈HTTP协议中的短轮询、长轮询、长连接和短连接</a></p><p><a href="https://www.cnblogs.com/lizhengxian/p/5075635.html" target="_blank" rel="noopener">Android进程间通信的几种方式</a></p><p><a href="https://blog.csdn.net/wh_sjc/article/details/70283843" target="_blank" rel="noopener">进程间的五种通信方式介绍</a></p><p><a href="https://www.cnblogs.com/withyou/p/4789170.html" target="_blank" rel="noopener">面向对象之多态理解，多态的作用与好处</a></p><p><a href="https://blog.csdn.net/luoshixian099/article/details/51908175" target="_blank" rel="noopener">算法导论—最小生成树（Kruskal和Prim算法）</a></p><p><a href="https://juejin.im/entry/584abdff61ff4b0058d50547" target="_blank" rel="noopener">面试旧敌之 Java 泛型 ：主要概念及特点</a></p><hr><p><a href="https://blog.csdn.net/hrn1216/article/details/51465270" target="_blank" rel="noopener">最小堆 构建、插入、删除的过程图解</a></p><p><a href="https://www.cnblogs.com/ygj0930/p/5862684.html" target="_blank" rel="noopener">【数据库】数据库的并发问题与锁机制</a></p><p><a href="https://www.cnblogs.com/lxmhhy/p/6041001.html" target="_blank" rel="noopener">进程和线程、协程的区别</a></p><p><a href="https://juejin.im/post/5caf0f89f265da038145c66e" target="_blank" rel="noopener">渣渣二本的辛酸面试之路</a></p><p><a href="https://blog.csdn.net/zbuger/article/details/50827762" target="_blank" rel="noopener">java static锁和非static锁区别</a></p><p><a href="https://jishusuishouji.github.io/2017/05/10/Java%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.md/Java%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">一个Java类被JVM虚拟机加载的详细流程</a></p><hr><p><a href="https://blog.csdn.net/adobesolo/article/details/76221597" target="_blank" rel="noopener">Java泛型原理详解</a></p><p><a href="https://www.cnkirito.moe/tcp-talk/" target="_blank" rel="noopener">聊聊 TCP 长连接和心跳那些事</a></p><p><a href="https://juejin.im/post/5b82c02df265da436152f5ad" target="_blank" rel="noopener">理解Java的强引用、软引用、弱引用和虚引用</a></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter进阶：路由、路由栈详解及案例分析</title>
      <link href="/2019/03/04/flutter-route/"/>
      <url>/2019/03/04/flutter-route/</url>
      
        <content type="html"><![CDATA[<h1 id="路由初体验"><a href="#路由初体验" class="headerlink" title="路由初体验"></a>路由初体验</h1><p>路由（Routes）是什么？路由是屏幕或应用程序页面的抽象。</p><p>Flutter 使我们能够优雅地管理路由主要依赖的是 Navigator（导航器）类。这是一个用于管理一组具有某种进出规则的页面的 Widget，也就是说用它我们能够实现各个页面间有规律的切换。而这里的规则便是在其内部维护的一个“ 路由栈”。</p><p>学习 Android 的同学知道 Activity 的启动模式可以实现各种业务需求，iOS 中也有嵌套路由的功能，Flutter 作为最有潜力的跨平台框架当然要吸取众家之精华，它当然完全有能力实现原生的各种效果！</p><p>我们先尝试实现一个小的功能。</p><h2 id="组件路由"><a href="#组件路由" class="headerlink" title="组件路由"></a>组件路由</h2><p>当我们第一次打开应用程序，出现在眼前的便是路由栈中的第一个也是最底部实例：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(home: Screen1()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在堆栈上推送新的实例，我们可以调用导航器 <code>Navigator.push</code> ，传入当前 context 并且使用构建器函数创建 MaterialPageRoute 实例，该函数可以创建您想要在屏幕上显示的内容。 例如：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> RaisedButton(</span><br><span class="line">   onPressed:()&#123;</span><br><span class="line">   Navigator.push(context, MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Scaffold(</span><br><span class="line">          appBar: AppBar(title: Text(<span class="string">'My Page'</span>)),</span><br><span class="line">          body: Center(</span><br><span class="line">            child: FlatButton(</span><br><span class="line">              child: Text(<span class="string">'POP'</span>),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.pop(context);</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ));</span><br><span class="line">   &#125;,</span><br><span class="line">   child: <span class="keyword">new</span> Text(<span class="string">"Push to Screen 2"</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>点击执行上方操作，我们将成功打开第二个页面。</p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>在一般应用中，我们用的最多的还是命名路由，它是将应用中需要访问的每个页面命名为不重复的字符串，我们便可以通过这个字符串来将该页面实例推进路由。</p><blockquote><p>例如，’/ home’ 表示 HomeScreen， ‘/ login’ 表示 LoginScreen。 ‘/‘ 表示主页面。 这里的命名规范与 REST API 开发中的路由类似。 所以 ‘/‘ 通常表示的是我们的根页面。</p></blockquote><p>请看下方案例：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> MaterialApp(</span><br><span class="line">  home: <span class="keyword">new</span> Screen1(),</span><br><span class="line">  routes: &lt;<span class="built_in">String</span>, WidgetBuilder&gt; &#123;</span><br><span class="line">    <span class="string">'/screen1'</span>: (BuildContext context) =&gt; <span class="keyword">new</span> Screen1(),</span><br><span class="line">    <span class="string">'/screen2'</span> : (BuildContext context) =&gt; <span class="keyword">new</span> Screen2(),</span><br><span class="line">    <span class="string">'/screen3'</span> : (BuildContext context) =&gt; <span class="keyword">new</span> Screen3(),</span><br><span class="line">    <span class="string">'/screen4'</span> : (BuildContext context) =&gt; <span class="keyword">new</span> Screen4()</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>Screen1()、Screen2()等是每个页面的类名。</em></p><p>我们同样可以实现前面的功能：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> RaisedButton(</span><br><span class="line">   onPressed:()&#123;</span><br><span class="line">     Navigator.of(context).pushNamed(<span class="string">'/screen2'</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   child: <span class="keyword">new</span> Text(<span class="string">"Push to Screen 2"</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> RaisedButton(</span><br><span class="line">   onPressed:()&#123;</span><br><span class="line">     Navigator.pushNamed(context, <span class="string">"/screen2"</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   child: <span class="keyword">new</span> Text(<span class="string">"Push to Screen 2"</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>同样可以实现上方效果。</p><h2 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h2><p>实现上面两种方法，此时，路由栈中的情况如下：</p><p><img src="/images/route1.png" alt="1_RKtC1MKJbjSfMjUlR-2K7g"></p><p>现在，当我们想要回退的到主屏幕时，我们则需要使用 pop 方法从 Navigator 的堆栈中弹出 Routes。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Navigator.of(context).pop();</span><br></pre></td></tr></table></figure><p><img src="/images/route2.png" alt="1_hq7qfAer0wCCSyIBKr7sfg"></p><p>使用 Scaffold 时，通常不需要显式弹出路径，因为 Scaffold 会自动向其 AppBar 添加一个“后退”按钮，按下时会调用 <code>Navigator.pop()</code>。 </p><p>在 Android 中，按下设备后退按钮也会这样做。但是，我们也有可能需要将此方法用于其他组件，例如在用户单击“取消”按钮时弹出 AlertDialog。</p><blockquote><p><strong>这里要注意的是：</strong>切勿用 push 代替 pop，有同学说我在 Screen2 push Screen1 部照样能实现这个功能吗？其实不然啊，请看下图：</p></blockquote><p><img src="/images/route3.png" alt="1_Xsyo5c8s1JwO6f2OQ1nNEg"></p><blockquote><p>所以 <strong>push 只用于向栈中添加实例，pop 弹出实例！（特殊需求除外）</strong></p></blockquote><h1 id="详解路由栈"><a href="#详解路由栈" class="headerlink" title="详解路由栈"></a>详解路由栈</h1><p>前面，我们已经知道如何简单在路由栈中 push、pop 实例，然而，当遇到一些特殊的情况，这显然不能满足需求。学习 Android 的同学知道 Activity 的各种启动模式可以完成相应需求，Flutter 当然也有类似的可以解决各种业务需求的实现方式！</p><p>请看下面使用方法与案例分析。</p><h2 id="pushReplacementNamed-与-popAndPushNamed"><a href="#pushReplacementNamed-与-popAndPushNamed" class="headerlink" title="pushReplacementNamed 与 popAndPushNamed"></a>pushReplacementNamed 与 popAndPushNamed</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    Navigator.pushReplacementNamed(context, <span class="string">"/screen4"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">"pushReplacementNamed"</span>),</span><br><span class="line">),</span><br><span class="line">RaisedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    Navigator.popAndPushNamed(context, <span class="string">"/screen4"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">"popAndPushNamed"</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><em>我们在 Screen3 页面使用 <code>pushReplacementNamed</code> 与 <code>popAndPushNamed</code> 方法 push 了 Screen4。</em></p><p>此时路由栈情况如下：</p><p><img src="/images/route4.png" alt="1_cr77kgOgz7KRjwvMAVXoAg"></p><p><strong>Screen4 代替了 Screen</strong>。</p><p><code>pushReplacementNamed</code> 与 <code>popAndPushNamed</code> 的区别在于：  <code>popAndPushNamed</code>  能够执行 Screen2 弹出的动画与 Screen3 推进的动画而 <code>pushReplacementNamed</code> 仅显示 Screen3 推进的动画。</p><p><img src="/images/route10.gif" alt="1_cr77kgOgz7KRjwvMAVXoAg"></p><p>案例：</p><blockquote><p><strong>pushReplacementNamed</strong>：当用户成功登录并且现在在 <code>HomeScreen</code> 上时，您不希望用户还能够返回到 <code>LoginScreen</code>。因此，登录应完全由首页替换。另一个例子是从 <code>SplashScreen</code> 转到 <code>HomeScreen</code>。 它应该只显示一次，用户不能再从 <code>HomeScreen</code> 返回它。 在这种情况下，由于我们要进入一个全新的屏幕，我们可能需要借助此方法。</p><p><strong>popAndPushNamed</strong>：假设您正在有一个 <code>Shopping</code> 应用程序，该应用程序在 <code>ProductsListScreen</code> 中显示产品列表，用户可以在 <code>FiltersScreen</code> 中应用过滤商品。 当用户单击“应用筛选”按钮时，应弹出 <code>FiltersScreen</code> 并使用新的过滤器值推回到 <code>ProductsListScreen</code>。 这里 <code>popAndPushNamed</code> 显然更为合适。</p></blockquote><h2 id="pushNamedAndRemoveUntil"><a href="#pushNamedAndRemoveUntil" class="headerlink" title="pushNamedAndRemoveUntil"></a>pushNamedAndRemoveUntil</h2><blockquote><p>用户已经登陆进入 <code>HomeScreen</code> ，然后经过一系列操作回到配合只界面想要退出登录，你不能够直接 Push 进入 <code>LoginScreen</code> 吧？<strong>你需要将之前路由中的实例全部删除是的用户不会在回到先前的路由中。</strong></p></blockquote><p>pushNamedAndRemoveUntil 可实现该功能：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Navigator.of(context).pushNamedAndRemoveUntil(<span class="string">'/screen4'</span>, (Route&lt;<span class="built_in">dynamic</span>&gt; route) =&gt; <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>这里的 <code>(Route&lt;dynamic&gt; route) =&gt; false</code> 能够确保删除先前所有实例。</p><p><img src="/images/route5.png" alt="Logging out removes all routes and takes user back to LoginScreen"></p><p>现在又有一个需求：我们不希望删除先前所有实例，<strong>我们只要求删除指定个数的实例</strong>。</p><blockquote><p>我们有一个需要付款交易的购物应用。在应用程序中，一旦用户完成了支付交易，就应该从堆栈中删除所有与交易或购物车相关的页面，并且用户应该被带到 <code>PaymentConfirmationScreen</code> ,单击后退按钮应该只将它们带回到 <code>ProductsListScreen</code> 或 <code>HomeScreen</code>：</p></blockquote><p><img src="/images/route6.png" alt="1_aaZxoLUbKdFPgiIkBAmw7w"></p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Navigator.of(context).pushNamedAndRemoveUntil(<span class="string">'/screen4'</span>, ModalRoute.withName(<span class="string">'/screen1'</span>));</span><br></pre></td></tr></table></figure><p>通过代码，我们推送 <code>Screen4</code> 并删除所有路由，直到 <code>Screen1</code>：</p><p><img src="/images/route7.png" alt="1_D81iZF-BikxXJHak7_NkhA"></p><h2 id="popUntil"><a href="#popUntil" class="headerlink" title="popUntil"></a>popUntil</h2><p>想象一下，我们在应用程序中要填写一系列信息，表单分布在多个页面中。假设需要填写三个页面的表单一步接着一步。  然而，在表单的第 3 部分，用户取消了填写表单。 用户单击取消并且应弹出所有之前与表单相关的页面，并且应该将用户带回 <code>HomeScreen</code> 或者 <code>DashboardScreen</code>，这种情况下数据属于数据无效！ 我们不会在这里推新任何新东西，只是回到以前的路由栈中。</p><p><img src="/images/route8.png" alt="1_qV7mF0Kow2zch-fjksmA_Q"></p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Navigator.popUntil(context, ModalRoute.withName(<span class="string">'/screen2'</span>));</span><br></pre></td></tr></table></figure><h2 id="Popup-routes（弹出路由）"><a href="#Popup-routes（弹出路由）" class="headerlink" title="Popup routes（弹出路由）"></a>Popup routes（弹出路由）</h2><p>路由不一定要遮挡整个屏幕。 <a href="https://docs.flutter.io/flutter/widgets/PopupRoute-class.html" target="_blank" rel="noopener">PopupRoute</a>s 使用 <a href="https://docs.flutter.io/flutter/widgets/ModalRoute/barrierColor.html" target="_blank" rel="noopener">ModalRoute.barrierColor</a>  覆盖屏幕，<a href="https://docs.flutter.io/flutter/widgets/ModalRoute/barrierColor.html" target="_blank" rel="noopener">ModalRoute.barrierColor</a> 只能部分不透明以允许当前屏幕显示。 弹出路由是“模态”的，因为它们阻止了对下面其他组件的输入。</p><p>有一些方法可以创建和显示这类弹出路由。 例如：showDialog，showMenu 和 showModalBottomSheet。 如上所述，这些函数返回其推送路由的 Future（异步数据，参考下面的数据部分）。 执行可以等待返回的值在弹出路由时执行操作。</p><p>还有一些组件可以创建弹出路由，如 PopupMenuButton 和 DropdownButton。 这些组件创建 PopupRoute 的内部子类，并使用 Navigator 的 push 和 pop 方法来显示和关闭它们。</p><h2 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h2><p>您可以创建自己的一个窗口z组件库路由类（如 PopupRoute，ModalRoute 或 PageRoute）的子类，以控制用于显示路径的动画过渡，路径的模态屏障的颜色和行为以及路径的其他各个特性。</p><p>PageRouteBuilder 类可以根据回调定义自定义路由。 下面是一个在路由出现或消失时旋转并淡化其子节点的示例。 此路由不会遮挡整个屏幕，因为它指定了opaque：false，就像弹出路由一样。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Navigator.push(context, PageRouteBuilder(</span><br><span class="line">  opaque: <span class="keyword">false</span>,</span><br><span class="line">  pageBuilder: (BuildContext context, _, __) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(child: Text(<span class="string">'My PageRoute'</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  transitionsBuilder: (___, Animation&lt;<span class="built_in">double</span>&gt; animation, ____, Widget child) &#123;</span><br><span class="line">    <span class="keyword">return</span> FadeTransition(</span><br><span class="line">      opacity: animation,</span><br><span class="line">      child: RotationTransition(</span><br><span class="line">        turns: Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.5</span>, end: <span class="number">1.0</span>).animate(animation),</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><img src="/images/route9.gif" alt="ezgif-3-14c32a6d8764"></p><p>路由两部分构成，“pageBuilder”和“transitionsBuilder”。 该页面成为传递给 buildTransitions 方法的子代的后代。 通常，页面只构建一次，因为它不依赖于其动画参数（在此示例中以_和__表示）。 过渡是建立在每个帧的持续时间。</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>一个应用程序可以使用多个路由导航器。将一个导航器嵌套在另一个导航器下方可用于创建“内部旅程”，例如选项卡式导航，用户注册，商店结帐或代表整个应用程序子部分的其他独立个体。</p><p>iOS应用程序的标准做法是使用选项卡式导航，其中每个选项卡都维护自己的导航历史记录。因此，每个选项卡都有自己的导航器，创建了一种“并行导航”。</p><p>除了选项卡的并行导航之外，还可以启动完全覆盖选项卡的全屏页面。例如：入职流程或警报对话框。因此，必须存在位于选项卡导航上方的“根”导航器。因此，每个选项卡的 Navigators 实际上都是嵌套在一个根导航器下面的 Navigators。</p><p>用于选项卡式导航的嵌套导航器位于 WidgetApp 和 <a href="https://docs.flutter.io/flutter/cupertino/CupertinoTabView-class.html" target="_blank" rel="noopener">CupertinoTabView</a> 中，因此在这种情况下您无需担心嵌套的导航器，但它是使用嵌套导航器的真实示例。</p><p>以下示例演示了如何使用嵌套的 Navigator 来呈现独立的用户注册过程。</p><p>尽管此示例使用两个 Navigators 来演示嵌套的 Navigators，但仅使用一个 Navigato r就可以获得类似的结果。 </p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      <span class="comment">// ...some parameters omitted...</span></span><br><span class="line">      <span class="comment">// MaterialApp contains our top-level Navigator</span></span><br><span class="line">      initialRoute: <span class="string">'/'</span>,</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">'/'</span>: (BuildContext context) =&gt; HomePage(),</span><br><span class="line">        <span class="string">'/signup'</span>: (BuildContext context) =&gt; SignUpPage(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignUpPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="comment">// SignUpPage builds its own Navigator which ends up being a nested</span></span><br><span class="line">   <span class="comment">// Navigator in our app.</span></span><br><span class="line">   <span class="keyword">return</span> Navigator(</span><br><span class="line">     initialRoute: <span class="string">'signup/personal_info'</span>,</span><br><span class="line">     onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">       WidgetBuilder builder;</span><br><span class="line">       <span class="keyword">switch</span> (settings.name) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'signup/personal_info'</span>:</span><br><span class="line">           <span class="comment">// Assume CollectPersonalInfoPage collects personal info and then</span></span><br><span class="line">           <span class="comment">// navigates to 'signup/choose_credentials'.</span></span><br><span class="line">           builder = (BuildContext _) =&gt; CollectPersonalInfoPage();</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'signup/choose_credentials'</span>:</span><br><span class="line">           <span class="comment">// Assume ChooseCredentialsPage collects new credentials and then</span></span><br><span class="line">           <span class="comment">// invokes 'onSignupComplete()'.</span></span><br><span class="line">           builder = (BuildContext _) =&gt; ChooseCredentialsPage(</span><br><span class="line">             onSignupComplete: () &#123;</span><br><span class="line">               <span class="comment">// Referencing Navigator.of(context) from here refers to the</span></span><br><span class="line">               <span class="comment">// top level Navigator because SignUpPage is above the</span></span><br><span class="line">               <span class="comment">// nested Navigator that it created. Therefore, this pop()</span></span><br><span class="line">               <span class="comment">// will pop the entire "sign up" journey and return to the</span></span><br><span class="line">               <span class="comment">// "/" route, AKA HomePage.</span></span><br><span class="line">               Navigator.of(context).pop();</span><br><span class="line">             &#125;,</span><br><span class="line">           );</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">           <span class="keyword">throw</span> Exception(<span class="string">'Invalid route: <span class="subst">$&#123;settings.name&#125;</span>'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> MaterialPageRoute(builder: builder, settings: settings);</span><br><span class="line">     &#125;,</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Navigator.of 在给定 BuildContext 中最近的根 Navigator 上运行。 确保在预期的 Navigator 下面提供BuildContext，尤其是在创建嵌套 Navigators 的大型构建方法中。 Builder 组件可用于访问组件子树中所需位置的 BuildContext。</p><h1 id="页面间数据传递"><a href="#页面间数据传递" class="headerlink" title="页面间数据传递"></a>页面间数据传递</h1><h2 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h2><p>在上面的大多数示例中，我们推送新路由时没有发送数据，但在实际应用中这种情况应用很少。 要发送数据，我们将使用 Navigator 将新的 MaterialPageRoute 用我们的数据推送到堆栈上（这里是 <code>userName</code>）</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> userName = <span class="string">"John Doe"</span>;</span><br><span class="line">Navigator.push(</span><br><span class="line">    context,</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (BuildContext context) =&gt;</span><br><span class="line">        <span class="keyword">new</span> Screen5(userName)));</span><br></pre></td></tr></table></figure><p>要在 <code>Screen5</code> 中得到数据，我们只需在 <code>Screen5</code> 中添加一个参数化构造函数：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen5</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> userName;</span><br><span class="line">  Screen5(<span class="keyword">this</span>.userName);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="built_in">print</span>(userName)</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这表示我们不仅可以使用 <code>MaterialPageRoute</code> 作为 <code>push</code> 方法，还可以使用 <code>pushReplacement</code> ，<code>pushAndPopUntil</code> 等。基本上从我们描述的上述方法中路由方法，第一个参数现在将采用 <code>MaterialPageRoute</code> 而不是 <code>namedRoute</code> 的 <code>String</code>。</p><h2 id="数据返回"><a href="#数据返回" class="headerlink" title="数据返回"></a>数据返回</h2><p>我们可能还想从新页面返回数据。 就像一个警报应用程序，并为警报设置一个新音调，您将显示一个带有音频音调选项列表的对话框。 显然，一旦弹出对话框，您将需要所选的项目数据。 它可以这样实现：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> RaisedButton(onPressed: ()<span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="built_in">String</span> value = <span class="keyword">await</span> Navigator.push(context, <span class="keyword">new</span> MaterialPageRoute&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">      builder: (BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> GestureDetector(</span><br><span class="line">              child: <span class="keyword">new</span> Text(<span class="string">'OK'</span>),</span><br><span class="line">              onTap: () &#123; Navigator.pop(context, <span class="string">"Audio1"</span>); &#125;</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">  )</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">  child: <span class="keyword">new</span> Text(<span class="string">"Return"</span>),)</span><br></pre></td></tr></table></figure><p><em>在 <code>Screen4</code> 中尝试并检查控制台的打印值。</em></p><p>另请注意：当路由用于返回值时，路由的类型参数应与 pop 的结果类型匹配。 这里我们需要一个 String 数据，所以我们使用了 <code>MaterialPageRoute &lt;String&gt;</code>。 不指定类型也没关系。</p><h1 id="其他效果解释"><a href="#其他效果解释" class="headerlink" title="其他效果解释"></a>其他效果解释</h1><h2 id="maybePop"><a href="#maybePop" class="headerlink" title="maybePop"></a>maybePop</h2><p>源码：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Future&lt;<span class="built_in">bool</span>&gt; maybePop&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, [ T result ]) &#123;</span><br><span class="line">    <span class="keyword">return</span> Navigator.of(context).maybePop&lt;T&gt;(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; maybePop&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;([ T result ]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Route&lt;T&gt; route = _history.last;</span><br><span class="line">    <span class="keyword">assert</span>(route._navigator == <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">final</span> RoutePopDisposition disposition = <span class="keyword">await</span> route.willPop();</span><br><span class="line">    <span class="keyword">if</span> (disposition != RoutePopDisposition.bubble &amp;&amp; mounted) &#123;</span><br><span class="line">      <span class="keyword">if</span> (disposition == RoutePopDisposition.pop)</span><br><span class="line">        pop(result);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果我们在初始路由上并且有人错误地试图弹出这个唯一页面怎么办？ 弹出堆栈中唯一的页面将关闭您的应用程序，因为它后面已经没有页面了。这显然是不好的体验。 这就是 <code>maybePop()</code> 起的作用。 点击 <code>Screen1</code> 上的 <code>maybePop</code> 按钮，没有任何效果。 在 <code>Screen3</code> 上尝试相同的操作，可以正常弹出。</p><p>这种效果也可通过 canPop 实现：</p><h2 id="canPop"><a href="#canPop" class="headerlink" title="canPop"></a>canPop</h2><p>源码：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">bool</span> canPop(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> NavigatorState navigator = Navigator.of(context, nullOk: <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> navigator != <span class="keyword">null</span> &amp;&amp; navigator.canPop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> canPop() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(_history.isNotEmpty);</span><br><span class="line">    <span class="keyword">return</span> _history.length &gt; <span class="number">1</span> || _history[<span class="number">0</span>].willHandlePopInternally;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果占中实例大于 1 或 willHandlePopInternally 属性为 true 返回 true，否则返回 false。</p><p>我们可以通过判断 canPop 来确定是否能够弹出该页面。</p><h2 id="如何去除默认返回按钮"><a href="#如何去除默认返回按钮" class="headerlink" title="如何去除默认返回按钮"></a>如何去除默认返回按钮</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.leading,</span><br><span class="line">    <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">this</span>.actions,</span><br><span class="line">    <span class="keyword">this</span>.flexibleSpace,</span><br><span class="line">    <span class="keyword">this</span>.bottom,</span><br><span class="line">    <span class="keyword">this</span>.elevation = <span class="number">4.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">    <span class="keyword">this</span>.brightness,</span><br><span class="line">    <span class="keyword">this</span>.iconTheme,</span><br><span class="line">    <span class="keyword">this</span>.textTheme,</span><br><span class="line">    <span class="keyword">this</span>.primary = <span class="keyword">true</span>,</span><br><span class="line">    <span class="keyword">this</span>.centerTitle,</span><br><span class="line">    <span class="keyword">this</span>.titleSpacing = NavigationToolbar.kMiddleSpacing,</span><br><span class="line">    <span class="keyword">this</span>.toolbarOpacity = <span class="number">1.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.bottomOpacity = <span class="number">1.0</span>,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(automaticallyImplyLeading != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(elevation != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(primary != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(titleSpacing != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(toolbarOpacity != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(bottomOpacity != <span class="keyword">null</span>),</span><br><span class="line">       preferredSize = Size.fromHeight(kToolbarHeight + (bottom?.preferredSize?.height ?? <span class="number">0.0</span>)),</span><br><span class="line">       <span class="keyword">super</span>(key: key);</span><br></pre></td></tr></table></figure><p>将 <code>automaticallyImplyLeading</code>置为 <code>false</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.flutter.io/flutter/widgets/Navigator-class.html" target="_blank" rel="noopener">https://docs.flutter.io/flutter/widgets/Navigator-class.html</a></p><p><a href="https://medium.com/flutter-community/flutter-push-pop-push-1bb718b13c31" target="_blank" rel="noopener">https://medium.com/flutter-community/flutter-push-pop-push-1bb718b13c31</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter实践：深入 Flutter 的状态管理方式(3)——Redux与旅途小结</title>
      <link href="/2019/02/09/flutter-state3/"/>
      <url>/2019/02/09/flutter-state3/</url>
      
        <content type="html"><![CDATA[<p>至此，这已经是探索 Flutter 状态管理方式文章的最后一篇，同时这也是新年后的第一篇文章，之后我将将他们应用在实际项目中开发并将值的学习的项目开源出来。对于其中讲解可能有点浅尝则止，因为给出的实例相对简单，但相信聪明的程序员都会有自己的学习方法，你可以从给出的实例结合自己的所学引深出更好的设计方法。</p><a id="more"></a><p>同时要送给大家的建议是：请在需要这些状态管理方式时使用它，我见过不少的开发者都有用大刀砍白菜的意思，这并不是一个好习惯，你会发现这些状态管理方式有时候不但不会使开发简单，其实还会加大代码量，使其变得复杂，对于如何选择，这里还不够说清楚，希望你们都能找到自己的管理应用程序的方式。</p><p>所有实例：</p><p> github 地址：<a href="https://github.com/MeandNi/Flutter_StateManagement" target="_blank" rel="noopener">https://github.com/MeandNi/Flutter_StateManagement</a></p><ul><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/inheritedValue" target="_blank" rel="noopener">InheritedWidget</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/scoped" target="_blank" rel="noopener">ScopedModel</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/bloc_counter" target="_blank" rel="noopener">bloc_counter</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/bloc_cart" target="_blank" rel="noopener">bloc_cart</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/bloc_inherited" target="_blank" rel="noopener">bloc with inherited</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/redux_counter" target="_blank" rel="noopener">Redux_counter</a></li><li><a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/redux_cart" target="_blank" rel="noopener">Redux_Cart</a></li></ul><hr><p>Redux 由 Facebook 2015年提出，是基于 Flux 理念实现的一个响应式框架的状态管理方式，最早应用于 React 中，而后 React Native 、 Flutter 等多个框架也同样可以使用。</p><p>学习 Redux 之前，请了解 Redux 所能做到的事情：</p><ul><li>单一状态来源：整个应用程序的状态存储在单个的对象树中。</li><li>状态只读：更改状态的唯一方法是发出一个 action（一个描述发生什么事件的对象）。</li><li>使用纯函数更改状态：通过 reducers，状态知道如何通过操作进行改变，reducers便是一个纯函数。</li></ul><p><img src="/images/redux1.png" alt=""></p><p>如果你用过 React ，相信你对上面的概念已经很清晰了，没使用过？也 OK，下面慢慢道来….</p><p>整体的思路：所有状态存放在 store 中，Redux 将 store 内所有状态放入对应的组件中呈现在 Ui 上，用户与 UI 交互（如点击）发起一个 action（一个描述行为的对象），store 可判别 action类型并作用相应的 reducer（操作改变状态的纯函数），reducer 完成相应改变后将数据放到全局的 store 中，实现改变。</p><p><img src="/images/redux2.png" alt=""></p><p>思路简单，描述起来蛮复杂，其实它的目的就是实现代码作用域的分离。</p><p>那么如何让将以上描述应用于实际的应用程序中呢？</p><h2 id="redux-实现计数器应用"><a href="#redux-实现计数器应用" class="headerlink" title="redux 实现计数器应用"></a>redux 实现计数器应用</h2><p>其中的实现与 ScopedModel 很相似，<strong>抓住两个要点，如何在 UI 中呈现以及如何 发起 action 改变状态。</strong></p><p>我们首先定义 一个全局状态 AppState：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> counter;</span><br><span class="line">  AppState(<span class="keyword">this</span>.counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面有一个 counter 变量用于计数。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>如前面所述，State 的变化，会导致 UI 的变化。但是，用户接触不到 State，只能接触到 UI。所以，State 的变化必须是 UI 导致的。Action 就是 UI 发出的通知，表示 State 应该要发生变化了。</p><p>我们这里有一个促使 counter 增加的 action：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Actions &#123; Increment &#125;</span><br></pre></td></tr></table></figure><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。</p><p>Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AppState reducer(AppState prev, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (action == Actions.Increment) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AppState(prev.counter + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reducer 中判断了 action 时 Increment 这一类型，将一个新的 AppState 返回到 store。</p><h3 id="在-UI-中呈现-StoreConnector"><a href="#在-UI-中呈现-StoreConnector" class="headerlink" title="在 UI 中呈现(StoreConnector)"></a>在 UI 中呈现(StoreConnector)</h3><p>首先初始化状态：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> store = <span class="keyword">new</span> Store(reducer, initialState: <span class="keyword">new</span> AppState(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>然后显示状态：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> StoreConnector(</span><br><span class="line">  converter: (store) =&gt; store.state.counter,</span><br><span class="line">  builder: (context, counter) =&gt; <span class="keyword">new</span> Text(</span><br><span class="line">    <span class="string">'<span class="subst">$counter</span>'</span>,</span><br><span class="line">    style: Theme.of(context).textTheme.display1,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过 converter 属性拿到 state 中的 counter 属性。</p><p>然后传入 builder 应用在组件中。</p><h3 id="发起-action-改变状态"><a href="#发起-action-改变状态" class="headerlink" title="发起 action 改变状态"></a>发起 action 改变状态</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> StoreConnector(</span><br><span class="line">    converter: (store) &#123;</span><br><span class="line">      <span class="keyword">return</span> () =&gt; store.dispatch(Actions.Increment);</span><br><span class="line">    &#125;,</span><br><span class="line">    builder: (context, callback) =&gt; <span class="keyword">new</span> FloatingActionButton(</span><br><span class="line">      onPressed: callback,</span><br><span class="line">      tooltip: <span class="string">'Increment'</span>,</span><br><span class="line">      child: <span class="keyword">new</span> Icon(Icons.add),</span><br><span class="line">    ), </span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>同样是使用 StoreConnector，然而这次通过 converter 拿到的是一个 <code>store.dispatch(Actions.Increment)</code>，<code>store.dispatch()</code>是 View 发出 Action 的唯一方法。而后在组件中调用该回调方法即可。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>完整代码被放在一个文件中：<a href="https://github.com/MeandNi/Flutter_StateManagement/blob/master/lib/redux/main.dart" target="_blank" rel="noopener">样例代码</a></p><p>Redux 应用在 ShoppingCart：<a href="https://github.com/MeandNi/Flutter_StateManagement/tree/master/lib/redux_cart" target="_blank" rel="noopener">样例代码</a></p><p><img src="/images/redux6.png" alt=""></p><p><img src="/images/redux5.gif" alt=""></p><h2 id="将-Redux-用于更复杂的应用中"><a href="#将-Redux-用于更复杂的应用中" class="headerlink" title="将 Redux 用于更复杂的应用中"></a>将 Redux 用于更复杂的应用中</h2><p>在复杂的应用中我们可以将应用程序中的 reducer 根据业务类型分离，例如用户信息、产品信息等不同业务的操作分离到单独的模块，</p><p><img src="/images/redux3.png" alt=""></p><p>而后将其合并：</p><p><img src="/images/redux4.png" alt=""></p><p>实现上看的分离后，又可只将相应业务的数据放到相应业务根 widget（其子组件的所有数据和操作来自该根组件）</p><p>我们将需要的数据及操作到一个对象中，传递到组件中：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviceFragment</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: <span class="keyword">new</span> StoreConnector&lt;AppState, _ViewModel&gt;(</span><br><span class="line">          converter: _ViewModel.fromStore,</span><br><span class="line">          builder: (context, vm) &#123;</span><br><span class="line">            <span class="keyword">return</span> DeviceList(</span><br><span class="line">              devices: vm.devices,</span><br><span class="line">              onStateChanged: vm.onStateChanged,</span><br><span class="line">              onRemove: vm.onRemove,</span><br><span class="line">              onUndoRemove: vm.onUndoRemove,</span><br><span class="line">            );</span><br><span class="line">          &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ViewModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Device&gt; devices;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// final bool loading;</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span>(Device) onStateChanged;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span>(Device) onRemove;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span>(Device) onUndoRemove;</span><br><span class="line"></span><br><span class="line">  _ViewModel(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.devices,</span><br><span class="line">    <span class="comment">// @required this.loading,</span></span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onStateChanged,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onRemove,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onUndoRemove,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> _ViewModel fromStore(Store&lt;AppState&gt; store) &#123;</span><br><span class="line">    <span class="keyword">return</span> _ViewModel(</span><br><span class="line">      devices: store.state.devices,</span><br><span class="line">      <span class="comment">// loading: store.state.isLoading,</span></span><br><span class="line">      onStateChanged: (device) &#123;</span><br><span class="line">        store.dispatch(editItem(device.copyWith(state: !device.state)));</span><br><span class="line">      &#125;,</span><br><span class="line">      onRemove: (device) &#123;</span><br><span class="line">        store.dispatch(deleteDevice(device));</span><br><span class="line">      &#125;,</span><br><span class="line">      onUndoRemove: (device) &#123;</span><br><span class="line">        store.dispatch(AddDeviceAction(device));</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样使得产生模块化管理的思想！（以上实例来自正在开发的一个真实项目，目前还未开源。）</p><p>同时，在实际的应用程序中，你一定需要在程序启动初期来加载来自云端或者数据本地的数据，你可以在入口的页面中接受一个加载数据的函数，放入 initState 函数中。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter实践：深入 Flutter 的状态管理方式(2)——演化BloC</title>
      <link href="/2019/02/02/flutter-state1/"/>
      <url>/2019/02/02/flutter-state1/</url>
      
        <content type="html"><![CDATA[<p>在上篇文章中，我详细介绍了 InheritedWidget 及 ScopedModel 实现原理与方法，有同学说找不到源码，其实上篇文章包括这篇文章里的源码都按步骤放在<a href="https://github.com/MeandNi/Flutter_StatePro" target="_blank" rel="noopener">样例代码</a>里了，有同学说有点懵，其实上一篇的概念过多而且本身我表达也不是很清晰，英文文档中我也解释的没有完全语义化，所以还请谅解，<strong>结合实际代码你会有更好地理解</strong>。</p><a id="more"></a><p>这篇的重点我将放在 BloC 的实现上面，我们已经知道 Strems 的概念，RXDart 是依赖 Streams 使用的输入（_Sink_）和输出（<em>stream</em>）封装而成的响应式库，BloC 基于此便可以实时侦听数据的变化而改变数据，并且，BloC 主要解决的问题就是他不会一刀切的更新整个状态树，它关注的是数据，经过一系列处理后得到它并且只改变应用它的 widget。</p><p><img src="/images/flutterstate2.png" alt=""></p><h3 id="如何将-Stream-中的数据应用到-Widget？"><a href="#如何将-Stream-中的数据应用到-Widget？" class="headerlink" title="如何将 Stream 中的数据应用到 Widget？"></a>如何将 Stream 中的数据应用到 Widget？</h3><p>我们先来实践一下如何在 widget 中使用数据。Flutter 提供了一个名为 <a href="https://docs.flutter.io/flutter/widgets/StreamBuilder-class.html" target="_blank" rel="noopener">StreamBuilder</a> 的 StatefulWidget。</p><p>StreamBuilder 监听 Stream，每当一些数据流出 Stream 时，它会自动重建，调用其构建器回调。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">StreamBuilder&lt;T&gt;(</span><br><span class="line">    key: ...optional, the unique ID of <span class="keyword">this</span> Widget...</span><br><span class="line">    stream: ...the stream to listen to...</span><br><span class="line">    initialData: ...any initial data, <span class="keyword">in</span> <span class="keyword">case</span> the stream would initially be empty...</span><br><span class="line">    builder: (BuildContext context, AsyncSnapshot&lt;T&gt; snapshot)&#123;</span><br><span class="line">        <span class="keyword">if</span> (snapshot.hasData)&#123;</span><br><span class="line">            <span class="keyword">return</span> ...the Widget to be built based <span class="keyword">on</span> snapshot.data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ...the Widget to be built <span class="keyword">if</span> no data <span class="keyword">is</span> available</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以下示例使用 Stream 而不是 setState() 模拟默认的“计数器”应用程序：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CounterPageState createState() =&gt; _CounterPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CounterPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CounterPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> StreamController&lt;<span class="built_in">int</span>&gt; _streamController = StreamController&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose()&#123;</span><br><span class="line">    _streamController.close();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Stream version of the Counter App'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">          stream: _streamController.stream,</span><br><span class="line">          initialData: _counter,</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot)&#123;</span><br><span class="line">            <span class="keyword">return</span> Text(<span class="string">'You hit me: <span class="subst">$&#123;snapshot.data&#125;</span> times'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          _streamController.sink.add(++_counter);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第24-30行：我们监听流，每次有一个新值流出这个流时，我们用该值更新 Text;</li><li>第35行：当我们点击 FloatingActionButton 时，我们递增计数器并通过接收器将其发送到 Stream; 侦听它的 StreamBuilder 注入了该值相应到后重建并“刷新”计数器;</li><li>我们不再需要 State，所有东西都可以通过 Stream 接受;</li><li>这里实现了相当大的优化，因为调用 setState() 方法会强制整个 Widget（和任何子组件）重新渲染。 而在这里，只重建 StreamBuilder（当然还有其子组件）;</li><li>我们仍需要使用 StatefulWidget 的唯一原因，仅仅是因为我们需要通过 dispose 方法第15行释放StreamController;</li></ul><h3 id="实现真正的-BloC"><a href="#实现真正的-BloC" class="headerlink" title="实现真正的 BloC"></a>实现真正的 BloC</h3><p>是时候展现真正的计技术了，我们依然将 BloC 用于默认的计数器应用中：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">        title: <span class="string">'Streams Demo'</span>,</span><br><span class="line">        theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">          primarySwatch: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: BlocProvider&lt;IncrementBloc&gt;(</span><br><span class="line">          bloc: IncrementBloc(),</span><br><span class="line">          child: CounterPage(),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> IncrementBloc bloc = BlocProvider.of&lt;IncrementBloc&gt;(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Stream version of the Counter App'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">          stream: bloc.outCounter,</span><br><span class="line">          initialData: <span class="number">0</span>,</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot)&#123;</span><br><span class="line">            <span class="keyword">return</span> Text(<span class="string">'You hit me: <span class="subst">$&#123;snapshot.data&#125;</span> times'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          bloc.incrementCounter.add(<span class="keyword">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementBloc</span> <span class="keyword">implements</span> <span class="title">BlocBase</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Stream to handle the counter</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _counterController = StreamController&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  StreamSink&lt;<span class="built_in">int</span>&gt; <span class="keyword">get</span> _inAdd =&gt; _counterController.sink;</span><br><span class="line">  Stream&lt;<span class="built_in">int</span>&gt; <span class="keyword">get</span> outCounter =&gt; _counterController.stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Stream to handle the action on the counter</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  StreamController _actionController = StreamController();</span><br><span class="line">  StreamSink <span class="keyword">get</span> incrementCounter =&gt; _actionController.sink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  IncrementBloc()&#123;</span><br><span class="line">    _counter = <span class="number">0</span>;</span><br><span class="line">    _actionController.stream</span><br><span class="line">                     .listen(_handleLogic);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> dispose()&#123;</span><br><span class="line">    _actionController.close();</span><br><span class="line">    _counterController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleLogic(data)&#123;</span><br><span class="line">    _counter = _counter + <span class="number">1</span>;</span><br><span class="line">    _inAdd.add(_counter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是上篇文章的最后给打大家制造悬念的代码？五脏俱全，基本已经实现了 BloC。</p><p>结合上面的例子来分析 BloC 体现出来的优势：（建议先将<a href="https://github.com/MeandNi/Flutter_StatePro/blob/master/lib/bloc_counter/main.dart" target="_blank" rel="noopener">这段代码</a>跑起来！）</p><h4 id="一，BloC-实现了责任分离"><a href="#一，BloC-实现了责任分离" class="headerlink" title="一，BloC 实现了责任分离"></a>一，BloC 实现了责任分离</h4><p>你可以看到 CounterPage（第21-45行），其中没有任何业务逻辑。</p><p>它承担的负责仅有：</p><ul><li>显示计数器，现在只在必要时更新</li><li>提供一个按钮，当按下时，请求执行动作</li></ul><p>此外，整个业务逻辑集中在一个单独的类“IncrementBloc”中。</p><p>如果现在，如果我们需要更改业务逻辑，只需更新方法 _handleLogic（第77-80行）。 也许新的业务逻辑将要求做非常复杂的事情…… CounterPage 永远与它无关！</p><h4 id="二，可测试性"><a href="#二，可测试性" class="headerlink" title="二，可测试性"></a>二，可测试性</h4><p>现在，测试业务逻辑也变得更加容易。</p><p>无需再通过用户界面测试业务逻辑。 只需要测试 IncrementBloc 类。</p><h4 id="三，任意组织布局"><a href="#三，任意组织布局" class="headerlink" title="三，任意组织布局"></a>三，任意组织布局</h4><p>由于使用了 Streams，您现在可以独立于业务逻辑组织布局。</p><p>你可以从应用程序中的任何位置用任何操作：只需调用 <em>.incrementCounter</em> 接收器即可。</p><p>您可以在任何页面的任何位置显示计数器，只需舰艇监听 .outCounter 流。</p><h4 id="四，减少-“build”-的数量"><a href="#四，减少-“build”-的数量" class="headerlink" title="四，减少 “build” 的数量"></a>四，减少 “build” 的数量</h4><p>不用 <code>setState()</code>而是使用 StreamBuilder，从而大大减少了“构建”的数量，只减少了所需的数量。</p><p>这是性能上的巨提高！</p><h4 id="只有一个约束……-BLoC的可访问性"><a href="#只有一个约束……-BLoC的可访问性" class="headerlink" title="只有一个约束…… BLoC的可访问性"></a>只有一个约束…… BLoC的可访问性</h4><p>为了达到各种目的，BLoC 需要可访问。</p><p>有以下几种方法可以访问它：</p><ul><li><p>通过全局单例的变量</p><p>这种方式很容易实现，但不推荐。 此外，由于 Dart 中没有类析构函数，因此我们永远无法正确释放资源。</p></li><li><p>作为本地实例</p><p>您可以实例化 BLoC 的本地实例。 在某些情况下，此解决方案完全符合需求。 在这种情况下，您应该始终考虑在 StatefulWidget 中初始化，以便您可以利用 dispose() 方法来释放它。</p></li><li><p>由根组件提供<br>使其可访问的最常见方式是通过根 Widget，将其实现为 StatefulWidget。</p><p>以下代码给出了一个通用 BlocProvider 的示例：（这个例子牛逼！）</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generic Interface for all BLoCs</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BlocBase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generic BLoC provider</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlocProvider</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BlocBase</span>&gt; <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  BlocProvider(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.bloc,</span><br><span class="line">  &#125;): <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> T bloc;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BlocProviderState&lt;T&gt; createState() =&gt; _BlocProviderState&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> T of&lt;T <span class="keyword">extends</span> BlocBase&gt;(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">final</span> type = _typeOf&lt;BlocProvider&lt;T&gt;&gt;();</span><br><span class="line">    BlocProvider&lt;T&gt; provider = context.ancestorWidgetOfExactType(type);</span><br><span class="line">    <span class="keyword">return</span> provider.bloc;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Type</span> _typeOf&lt;T&gt;() =&gt; T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BlocProviderState</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BlocProvider</span>&lt;<span class="title">BlocBase</span>&gt;&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose()&#123;</span><br><span class="line">    widget.bloc.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">return</span> widget.child;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这段通用的 <em>BlocProvider</em> 仔细回味，你会发现其精妙之处！</p><p>通用 <em>BlocProvider</em> 的一些解释：</p><p>首先，如何将其用作数据提供者？</p><p>如果你看了上面<a href="https://gist.github.com/MeandNi/1161560bf90c5bc7f341844e8126a8f4" target="_blank" rel="noopener">BloC 计数器的示例代码</a>示例代码，您将看到以下代码行（第12-15行）</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">home: BlocProvider&lt;IncrementBloc&gt;(</span><br><span class="line">         bloc: IncrementBloc(),</span><br><span class="line">         child: CounterPage(),</span><br><span class="line">       ),</span><br></pre></td></tr></table></figure><p>使用以上代码，我们实例化了一个想要处理 _IncrementBloc_ 的新 _BlocProvider_，并将 _CounterPage_ 呈现为子组件。</p><p>从 _BlocProvider_ 开始的子组件的任何组件部分都将能够通过以下行访问 _IncrementBloc_：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">IncrementBloc bloc = BlocProvider.of&lt;IncrementBloc&gt;(context);</span><br></pre></td></tr></table></figure></li></ul><p>BLoC 的基本使用就介绍完了，所有<a href="https://github.com/MeandNi/Flutter_StatePro" target="_blank" rel="noopener">实例代码在这里</a> ，我将每种状态管理的方法分模块放在里面，选择使用哪种方式运行代码即可。</p><h3 id="BloC-其他你必须知道的事情"><a href="#BloC-其他你必须知道的事情" class="headerlink" title="BloC 其他你必须知道的事情"></a>BloC 其他你必须知道的事情</h3><h4 id="可以实现多个-BloC"><a href="#可以实现多个-BloC" class="headerlink" title="可以实现多个 BloC"></a>可以实现多个 BloC</h4><p>在大型项目中，这是非常可取的。 给以下几个建议：</p><ul><li>（如果有任何业务逻辑）每页顶部有一个BLoC，</li><li>用一个 ApplicationBloc 来处理应用程序所有状态</li><li>每个“足够复杂的组件”都有相应的BLoC。</li></ul><p>以下示例代码在整个应用程序的顶部使用 _ApplicationBloc_，然后在 _CounterPage_ 顶部使用 _IncrementBloc_。该示例还展示了如何使用两个 Bloc：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(</span><br><span class="line">  BlocProvider&lt;ApplicationBloc&gt;(</span><br><span class="line">    bloc: ApplicationBloc(),</span><br><span class="line">    child: MyApp(),</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Streams Demo'</span>,</span><br><span class="line">      home: BlocProvider&lt;IncrementBloc&gt;(</span><br><span class="line">        bloc: IncrementBloc(),</span><br><span class="line">        child: CounterPage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">final</span> IncrementBloc counterBloc = BlocProvider.of&lt;IncrementBloc&gt;(context);</span><br><span class="line">    <span class="keyword">final</span> ApplicationBloc appBloc = BlocProvider.of&lt;ApplicationBloc&gt;(context);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为何不用-InheritedWidget-来全局管理-BloC-的状态"><a href="#为何不用-InheritedWidget-来全局管理-BloC-的状态" class="headerlink" title="为何不用 InheritedWidget 来全局管理 BloC 的状态"></a>为何不用 InheritedWidget 来全局管理 BloC 的状态</h4><p>我为此也整理了一个将 BLoC 结合 InheritedWidget 使用的示例：</p><p>在很多与 BLoC 相关的文章中，您将看到 _Provider_ 的实现其实是一个 _InheritedWidget_。</p><p>当然，  这是完全可以实现的，然而，</p><ul><li>一个 <em>InheritedWidget</em> 没有提供任何 <em>dispose</em> 方法，记住，在不再需要资源时总是释放资源是一个很好的做法。</li><li>当然，你也可以将 <em>InheritedWidget</em> 包装在另一个 <em>StatefulWidget</em> 中，但是，乍样使用 <em>InheritedWidget</em> 并没有什么便利之处！</li><li>最后，如果不受控制，使用 <em>InheritedWidget</em> 经常会导致一些副作用（请参阅下面的  _InheritedWidget_ 上的提醒）。</li></ul><p>这 3 点解释了我为何将通用 BlocProvider 实现为 StatefulWidget，这样我就可以<strong>释放资源</strong>。</p><blockquote><p>Flutter无法实例化泛型类型</p><p>不幸的是，Flutter 无法实例化泛型类型，我们必须将 BLoC 的实例传递给 BlocProvider。 为了在每个BLoC中强制执行 dispose() 方法，所有BLoC都必须实现 BlocBase 接口。</p></blockquote><h4 id="关于使用-InheritedWidget-的提醒"><a href="#关于使用-InheritedWidget-的提醒" class="headerlink" title="关于使用 InheritedWidget 的提醒"></a>关于使用 InheritedWidget 的提醒</h4><p>在使用 <em>InheritedWidget</em> 并通过 <em>context.inheritFromWidgetOfExactType(…)</em> 获取指定类型最近的 <em>Widget</em> 时，每当InheritedWidget 的父级或者子布局发生变化时，这个方法会自动将当前 “<em>context</em>”（= <em>BuildContext</em>）注册到要重建的 <em>widget</em> 当中。</p><blockquote><p>请注意，为了完全正确，我刚才解释的与 <em>InheritedWidget</em> 相关的问题只发生在我们将 <em>InheritedWidget</em> 与 <em>StatefulWidget</em> 结合使用时。 当您只使用没有 State 的 InheritedWidget 时，问题就不会发生。 </p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Flutter 状态管理的这几种模式同样可以适用于很多软件开发中，而 BloC 模式最初的设想是实现允许独立于平台重用相同的代码！因此多花时间学习这类模式便是软件开发的根基。</p><p>我的建议是将<strong>实例代码运行出来阅读代码</strong>，依靠文章理解！希望能帮助到你！</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>这篇内容是我反复看完 <a href="https://www.youtube.com/watch?v=RS36gBEp8OI&amp;index=115&amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y" target="_blank" rel="noopener">Build reactive mobile apps with Flutter (Google I/O ‘18)</a> 谷歌大会写完的。</p><p>并且大量借鉴了 <a href="https://www.didierboelens.com/2018/08/reactive-programming---streams---bloc/" target="_blank" rel="noopener">Reactive Programming - Streams - BLoC</a> 这篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter实践：深入探索 Flutter 中的状态管理方式(1)</title>
      <link href="/2019/01/30/flutter-state1/"/>
      <url>/2019/01/30/flutter-state1/</url>
      
        <content type="html"><![CDATA[<p>利用 Flutter 内置的许多控件我们可以打造出一款不仅漂亮而且完美跨平台的 App 外壳，我利用其特性完成了类似<a href="https://github.com/MeandNi/Flutter_ZhiHu" target="_blank" rel="noopener">知乎App的UI界面</a>，然而一款完整的应用程序显然不止有外壳这么简单。填充在外壳里面的是数据，数据来源或从本地，或从云端，大量的数据处理很容易造成数据的混乱，耦合度提高，不便于维护，于是诞生了很多设计模式和状态管理的方式。</p><a id="more"></a><p>目前 Flutter 常用状态管理方式有如下几种：</p><ul><li>ScopedModel</li><li>BLoC (Business Logic Component) / Rx</li><li>Redux</li></ul><p>这篇文章暂且不提这些比较复杂的模式。我们简单的提出三个问题：</p><ul><li>Flutter 中组件之间如何通信？</li><li>更新 State 后组件以何种方式重新渲染？</li><li>如何在路由转换之间保持状态同步？</li></ul><h3 id="初探-State"><a href="#初探-State" class="headerlink" title="初探 State"></a>初探 State</h3><p>我以创建新项目 Flutter 给我们默认的计数器应用为例，通过路由我将其拆分为两部分 <code>MyHomePage</code>和 <code>PageTwo</code>，</p><p>MyHomePage，持有一个<code>_counter</code>变量和一个增加计数的方法，PageTwo，接收两个参数(计数的至和增加计数的方法)：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTwo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span> increment;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PageTwo(&#123;Key key, <span class="keyword">this</span>.count, <span class="keyword">this</span>.increment&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  _PageTwoState createState() =&gt; _PageTwoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageTwoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PageTwo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"Page Two"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(widget.count.toString(), style: TextStyle(fontSize: <span class="number">30.0</span>),),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">        onPressed: widget.increment,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现的状况是：我们在首页点击按钮触发计数器增加，路由到 PageTwo 后，数值正常显示，然而点击这个界面中的 add 按钮该页面的数值并未发生改变，通过观察父页面的 count 值确实发生了改变，因此再次通过路由到第二个界面界面才显示正常。解答上面三个问题：</p><ul><li><p>Flutter 中组件之间如何通信？</p><p>参数传递。</p></li><li><p>更新 State 后组件以何种方式重新渲染？</p><p>只渲染当前的组件（和子组件，这里暂未证明，但确实是触发 SetSate() 后，其所有子组件都将重新渲染。）</p></li><li><p>如何在路由转换之间保持状态同步？</p><p>父组件传递状态值到子组件，子组件拿到并显示，但却不能实时更改😀，我一时半会还正没想出什么解决方法，我相信即使能做到也不优雅。</p></li></ul><p>证明触发 SetSate() 后，其所有子组件都将重新渲染：我在副组件中添加两个子组件，一旦触发渲染变打印相关数据：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TestStateless(),</span><br><span class="line">TestStateful()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStateless</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'build TestStateless'</span>);</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">'TestStateless'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStateful</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestStatefulState createState() =&gt; _TestStatefulState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestStatefulState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestStateful</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'build TestStateful'</span>);</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">'_TestStatefulState'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时到 PageTwo 触发 add 事件，日志出来：</p><p><img src="/images/flutterstate1.png" alt=""></p><p>通过这种简单的方式已经可以说明一个问题，即以最简单的方式我们已经可以完成状态传递和组件渲染，而路由间保持状态一致还不能解决。</p><p><img src="/images/flutterstate8.gif" alt=""></p><h3 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h3><p>Google 官方给我们的解决方案是 <code>InheritedWidget</code>，怎么理解他，我们可以称它为“状态树”，它使得所有的 widget 的 State 来源统一，这样一旦有一处触发状态改变，Flutter 以某种方式感应到了（有个监听器），砍掉它，长出一个新树，Perfect！所有地方都能感受到他的变化。上面提到的第一种状态管理方式 <code>ScopedModel</code>便是基于此而产生的一套第三方库。</p><p>其实现在看来 InheritedWidget 已经非常简单了，我们抓住两个点即可完全掌握它：</p><ol><li><p>状态树中的数据</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInheritedValue</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyInheritedValue(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.value,</span><br><span class="line">    <span class="meta">@required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">assert</span>(value != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">assert</span>(child != <span class="keyword">null</span>),</span><br><span class="line">       <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> value;</span><br><span class="line">  <span class="keyword">static</span> MyInheritedValue of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.inheritFromWidgetOfExactType(MyInheritedValue);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(MyInheritedValue old) =&gt; </span><br><span class="line">        value != old.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入到根组件中：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> MyInheritedValue(</span><br><span class="line">    value: <span class="number">42</span>,</span><br><span class="line">    child: ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用状态树中数据的其他 Widget</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拿到状态树中的值</span><br><span class="line">MyInheritedValue.of(context).value</span><br></pre></td></tr></table></figure><p>请注意：这种情况下是不能改 InheritedWidget 中的值的，需要改也很简单就是将 MyInheritedValue 的值封装成一个对象，每次改变这个对象的值，具体法相看我的<a href="https://github.com/MeandNi/Flutter_StatePro" target="_blank" rel="noopener">样例代码</a>！</p><p><img src="/images/flutterstate7.png" alt=""></p></li></ol><p>上面所说砍掉整棵树过于粗暴却并不夸张，因为一处改变它将联动整棵树，</p><p>ScopedModel 是基于 InheritedWidget 的库，实现起来与 InheritedWidget 大同小异，而且其有一种可以让局部组件不改变的方式：设置 rebuildOnChange 为 false。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> ScopedModelDescendant&lt;CartModel&gt;(</span><br><span class="line">          rebuildOnChange: <span class="keyword">false</span>,</span><br><span class="line">          builder: (context, child, model) =&gt; ProductSquare(</span><br><span class="line">                product: product,</span><br><span class="line">                onTap: () =&gt; model.add(product),</span><br><span class="line">              ),</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>具体代码请看 GitHub，ScopedModel 样例截取一个老外给的实例，就是下方参考链接 Google 开发者大会上演讲的那两位其中之一。</p><p><img src="/images/flutterstate9.gif" alt=""></p><p>这种方式显然有点不足之处就是一旦遇到小规模变动就要引起大规模重新渲染，所以当项目达到一定的规模考虑 Google 爸爸给我们的另一种解决方案。</p><h3 id="Streams（流）"><a href="#Streams（流）" class="headerlink" title="Streams（流）"></a>Streams（流）</h3><p>在 Android 开发中我们经常会用到 RxJava 这类响应式编程方法的框架，其强大之处无须多言，而 Stream 看上去就是在 Dart 语言中的响应式编程的一种实现。</p><ul><li><p>Streams 是什么鬼？</p><p>如果要具体把 Streams 说清楚，一篇文章绝对不够，这里先介绍一下其中的概念，这篇文章目的就是如此。待我后续想好怎么具体描述清楚。</p><p>你可以把它想象成一个管道，有入口（StreamSink）和出口（），我们将想要处理的数据从入口放入经过该管道经过一系列处理（经由 <em>StreamController</em>）从出口中出来，而出口又有一个类似监听器之物，我们不知道它何时到来或者何时处理结束。但是当出口的监听器拿到东西便立即做出相应的反应。</p></li><li><p>那些东西可以放入管道？<br>任何变量、对象、数组、甚至事件都可以被当作数据源从入口放进去。</p></li><li><p>Streams 种类</p><ol><li>Single-subscription Stream，“单订阅”流，这种类型的流只允许在该流的整个生命周期内使用单个侦听器。即使在第一个订阅被取消后，也无法在此类流上收听两次。</li><li>Broadcast Streams，第二种类型的Stream允许任意数量的侦听器。可以随时向广播流添加侦听器。 新的侦听器将在它开始收听 Stream 时收到事件。</li></ol><p>例子：</p></li></ul><p>第一个示例显示了“单订阅”流，只打印输入的数据。 你会发现是哪种数据类型无关紧要。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;dart:async&#39;;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; Initialize a &quot;Single-Subscription&quot; Stream controller</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  final StreamController ctrl &#x3D; StreamController();</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; Initialize a single listener which simply prints the data</span><br><span class="line">  &#x2F;&#x2F; as soon as it receives it</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  final StreamSubscription subscription &#x3D; ctrl.stream.listen((data) &#x3D;&gt; print(&#39;$data&#39;));</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; We here add the data that will flow inside the stream</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  ctrl.sink.add(&#39;my name&#39;);</span><br><span class="line">  ctrl.sink.add(1234);</span><br><span class="line">  ctrl.sink.add(&#123;&#39;a&#39;: &#39;element A&#39;, &#39;b&#39;: &#39;element B&#39;&#125;);</span><br><span class="line">  ctrl.sink.add(123.45);</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; We release the StreamController</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  ctrl.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个示例显示“广播”流，它传达整数值并仅打印偶数。 我们用 StreamTransformer 来过滤（第14行）值，只让偶数经过。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Initialize a "Broadcast" Stream controller of integers</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">final</span> StreamController&lt;<span class="built_in">int</span>&gt; ctrl = StreamController&lt;<span class="built_in">int</span>&gt;.broadcast();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Initialize a single listener which filters out the odd numbers and</span></span><br><span class="line">  <span class="comment">// only prints the even numbers</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">final</span> StreamSubscription subscription = ctrl.stream</span><br><span class="line">      .where((value) =&gt; (value % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line">      .listen((value) =&gt; <span class="built_in">print</span>(<span class="string">'<span class="subst">$value</span>'</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// We here add the data that will flow inside the stream</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">  ctrl.sink.add(i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// We release the StreamController</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  ctrl.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RxDart"><a href="#RxDart" class="headerlink" title="RxDart"></a>RxDart</h3><p>RxDart包是 ReactiveX API 的 Dart 实现，它扩展了原始的 Dart Streams API 以符合 ReactiveX 标准。</p><p><img src="/images/flutterstate2.png" alt=""></p><p>由于它最初并未由 Google 定义，因此它使用不同于 Dart 的变量。 下表给出了 Dart 和 RxDart 之间的关系。</p><div class="table-container"><table><thead><tr><th>Dart</th><th>RxDart</th></tr></thead><tbody><tr><td>Stream</td><td>Observable</td></tr><tr><td>StreamController</td><td>Subject</td></tr></tbody></table></div><p>RxDart 扩展了原始的 Dart Streams API 并提供了 StreamController 的3个主要变体：</p><ol><li><p>PublishSubject</p><p>PublishSubject 是一个普通的 <strong>broadcast</strong> StreamController ，有一点不同：stream 返回一个 Observable 而不是一个 Stream 。</p><p><img src="/images/flutterstate3.png" alt=""></p><p>如您所见，PublishSubject 仅向侦听器发送在订阅之后添加到 Stream 的事件。</p></li><li><p>BehaviorSubject</p><p>BehaviorSubject 也是一个 broadcast StreamController，它返回一个 Observable 而不是一个Stream。</p><p><img src="/images/flutterstate4.png" alt=""></p><p>与 PublishSubject 的主要区别在于 BehaviorSubject 还将最后发送的事件发送给刚刚订阅的侦听器。</p></li><li><p>ReplaySubject</p><p>ReplaySubject 也是一个广播 StreamController，它返回一个 Observable 而不是一个 Stream。(萝莉啰嗦)</p><p><img src="/images/flutterstate5.png" alt=""></p><p>默认情况下，ReplaySubject 将Stream 已经发出的所有事件作为第一个事件发送到任何新的侦听器。</p></li></ol><h3 id="BloC"><a href="#BloC" class="headerlink" title="BloC"></a>BloC</h3><p>BLoC 代表业务逻辑组件 (<strong>B</strong>usiness <strong>Lo</strong>gic <strong>C</strong>omponent)。一般的 Flutter 代码业务逻辑和UI组件糅合在一起，不方便测试，不利于单独的测试业务逻辑部分，不能更好的重用业务逻辑代码，体现在，如果网络请求的逻辑有所变动的话，加入这个业务功能被两个端（web、flutter）使用的话，是需要改动两个地方的。</p><p>简而言之，业务逻辑需要：</p><ul><li>被移植到一个或几个 BLoC 中，</li><li>尽可能从表示层中删除。 也就是说，UI组件应该只关心UI事物而不关心业务，</li><li>依赖 Streams 使用输入（Sink）和输出（<em>stream</em>），</li><li>保持平台独立，</li><li>保持环境独立。</li></ul><p>事实上，BLoC 模式最初的设想是实现允许独立于平台重用相同的代码：Web应用程序，移动应用程序，后端。</p><p>Bloc 的大概就是 Stream 在 Flutter 中的最佳实践：</p><p><img src="/images/flutterstate6.png" alt=""></p><ul><li>组件通过 Sinks 向 BLoC 发送事件，</li><li>BLoC 通过 stream 通知组件，</li><li>由 BLoC 实现的业务逻辑。</li></ul><p>将 BloC 应用在计数器应用中：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">        title: <span class="string">'Streams Demo'</span>,</span><br><span class="line">        theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">          primarySwatch: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: BlocProvider&lt;IncrementBloc&gt;(</span><br><span class="line">          bloc: IncrementBloc(),</span><br><span class="line">          child: CounterPage(),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> IncrementBloc bloc = BlocProvider.of&lt;IncrementBloc&gt;(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'Stream version of the Counter App'</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">          stream: bloc.outCounter,</span><br><span class="line">          initialData: <span class="number">0</span>,</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot)&#123;</span><br><span class="line">            <span class="keyword">return</span> Text(<span class="string">'You hit me: <span class="subst">$&#123;snapshot.data&#125;</span> times'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          bloc.incrementCounter.add(<span class="keyword">null</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementBloc</span> <span class="keyword">implements</span> <span class="title">BlocBase</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Stream to handle the counter</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  StreamController&lt;<span class="built_in">int</span>&gt; _counterController = StreamController&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  StreamSink&lt;<span class="built_in">int</span>&gt; <span class="keyword">get</span> _inAdd =&gt; _counterController.sink;</span><br><span class="line">  Stream&lt;<span class="built_in">int</span>&gt; <span class="keyword">get</span> outCounter =&gt; _counterController.stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Stream to handle the action on the counter</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  StreamController _actionController = StreamController();</span><br><span class="line">  StreamSink <span class="keyword">get</span> incrementCounter =&gt; _actionController.sink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  IncrementBloc()&#123;</span><br><span class="line">    _counter = <span class="number">0</span>;</span><br><span class="line">    _actionController.stream</span><br><span class="line">                     .listen(_handleLogic);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> dispose()&#123;</span><br><span class="line">    _actionController.close();</span><br><span class="line">    _counterController.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleLogic(data)&#123;</span><br><span class="line">    _counter = _counter + <span class="number">1</span>;</span><br><span class="line">    _inAdd.add(_counter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你一定在说，卧槽，哇靠～～什么吊玩意，那么就留着悬念吧，今天写不动了！</p><p>Bolc 的具体实现我在样例代码里分两步走放在两个文件夹里！如果需要可以先去看看尝尝鲜。</p><p>这篇文章的目的就是介绍一些概念给大家关于 Streams、RXDart 及 Bloc 详细明了的解释后续更新！</p><h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><p><a href="https://github.com/MeandNi/Flutter_StatePro" target="_blank" rel="noopener">https://github.com/MeandNi/Flutter_StatePro</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.youtube.com/watch?v=RS36gBEp8OI&amp;index=115&amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y" target="_blank" rel="noopener">Build reactive mobile apps with Flutter (Google I/O ‘18)</a></p><p><a href="https://www.didierboelens.com/2018/08/reactive-programming---streams---bloc/" target="_blank" rel="noopener">Reactive Programming - Streams - BLoC</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter知乎App实践：UI+Json+Utils</title>
      <link href="/2019/01/29/flutter-zhihu/"/>
      <url>/2019/01/29/flutter-zhihu/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter实践之知乎App"><a href="#Flutter实践之知乎App" class="headerlink" title="Flutter实践之知乎App"></a>Flutter实践之知乎App</h2><a id="more"></a><p>预览图：</p><p><img src="/images/showapp.jpg" alt="app展示"></p><p><img src="/images/showapp2.jpg" alt="app展示"></p><p><img src="/images/showgif.gif" alt="app展示"></p><p><img src="/images/showgif2.gif" alt="app展示"></p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flutter 1.0.0 • channel stable • https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter.git</span><br><span class="line">Framework • revision 5391447fae (9 weeks ago) • 2018-11-29 19:41:26 -0800</span><br><span class="line">Engine • revision 7375a0f414</span><br><span class="line">Tools • Dart 2.1.0 (build 2.1.0-dev.9.4 f9ebf21297)</span><br></pre></td></tr></table></figure><h4 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h4><ol><li><p>克隆代码</p><p>源码地址：<a href="https://github.com/MeandNi/Flutter_ZhiHu" target="_blank" rel="noopener">https://github.com/MeandNi/Flutter_ZhiHu</a></p></li><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure></li></ol><h4 id="UI-大致结构"><a href="#UI-大致结构" class="headerlink" title="UI 大致结构"></a>UI 大致结构</h4><p><img src="/images/common.png" alt=""></p><p>采用类似 Android 模块化思想，将整个 App 的内容分为5个部分.</p><p><img src="/images/common2.png" alt=""></p><h4 id="Ui-细节"><a href="#Ui-细节" class="headerlink" title="Ui 细节"></a>Ui 细节</h4><p>暂不叙述，项目目前还在更新完善中，预计使用Redux、Sqlflite等技术栈填充数据部分，本项目部分界面及工具类来自<a href="https://github.com/MeandNi/Flutter_CommonApp" target="_blank" rel="noopener">Flutter_CommonApp</a> 。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><img src="/images/recommend.png" alt=""></p><p><img src="/images/idea.png" alt=""></p><p><img src="/images/question.png" alt=""></p><p>结构图壕无专业性可言，仅供观赏😀。</p><h4 id="第三方框架"><a href="#第三方框架" class="headerlink" title="第三方框架"></a>第三方框架</h4><div class="table-container"><table><thead><tr><th>库</th><th>功能</th></tr></thead><tbody><tr><td><strong>dio</strong></td><td><strong>网络框架</strong></td></tr><tr><td><strong>carousel_slider</strong></td><td><strong>轮播图</strong></td></tr><tr><td><strong>cached_network_image</strong></td><td><strong>图片加载</strong></td></tr><tr><td><strong>share</strong></td><td><strong>链接分享</strong></td></tr><tr><td><strong>flutter_webview_plugin</strong></td><td><strong>WebView</strong></td></tr></tbody></table></div><h4 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h4><p>感谢那些热爱开源、一起奋斗的朋友们。</p><p>值得学习请Star啊^_^</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】Flutter进阶：在应用中实现 Hero(飞行) 动画</title>
      <link href="/2019/01/27/flutter-hero/"/>
      <url>/2019/01/27/flutter-hero/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hero.png" alt=""></p><a id="more"></a><div class="table-container"><table><thead><tr><th>标题</th><th>链接</th></tr></thead><tbody><tr><td>Flutter进阶：深入探究 ListView 和 ScrollPhysics</td><td><a href="https://juejin.im/post/5c4c202df265da615064ce4b" target="_blank" rel="noopener">https://juejin.im/post/5c4c202df265da615064ce4b</a></td></tr><tr><td>Flutter进阶：深入探究 TextField</td><td><a href="https://juejin.im/post/5c4c4e22f265da6174652fb4" target="_blank" rel="noopener">https://juejin.im/post/5c4c4e22f265da6174652fb4</a></td></tr></tbody></table></div><h2 id="hero-动画介绍"><a href="#hero-动画介绍" class="headerlink" title="hero 动画介绍"></a>hero 动画介绍</h2><p>Hero 指的是可以在路由(页面)之间“飞行”的 widget，从一个页面打开另一个页面时产生一个简单的过渡动画，看下图实例：</p><p><img src="/images/hero1.gif" alt=""></p><center><img width="384px" height="640"  src="/images/hero2.gif"></center><p>Hero Animations 采用类似图标的 widget ，称为“hero”，一旦触发页面过渡，例如通过单击图标，hero 将会“飞”到下一页。 当用户导航回到上一页面时，也将实现原路返回的动画。</p><p>更多介绍，请看<a href="https://flutter.io/docs/development/ui/animations/hero-animations" target="_blank" rel="noopener">官网</a>。</p><p>这里我们不仅学习如何使用 hero 动画，也将会自定义一些我们自己实现的动画。</p><h2 id="构建一个普通的-hero-动画"><a href="#构建一个普通的-hero-动画" class="headerlink" title="构建一个普通的 hero 动画"></a>构建一个普通的 hero 动画</h2><p>hero 动画允许我们在 Flutter 中用最简单的方式实现漂亮动画，无需太多设置。 在上面的例子中，我们可以看到两个页面上都存在相同的图标或者图片。 我们需要做的只是 <strong>让这两者以某种方式相关联</strong>。</p><p>要实现它，我们可以通过在 Hero 组件中包含图标之类的组件。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">  tag: <span class="string">"DemoTag"</span>,</span><br><span class="line">  child: Icon(</span><br><span class="line">    Icons.add,</span><br><span class="line">    size: <span class="number">70.0</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>我们需要设置了一个 tag 参数，给这个  hero 一个独立的名字（类比 Android 中的 ID），因为如果我们在同一页面上有多个 hero ，每个 hero 都需要知道它们将飞往何处且在各不相同的地方。</p><p>现在应用程序有一个 hero 组件想要飞到下一页。接下来就是要告诉它将要飞向何处。</p><p>我们仅需要在第二页上添加带有相同标签的Hero小部件就可实现这个效果。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">  tag: <span class="string">"DemoTag"</span>,</span><br><span class="line">  child: Icon(</span><br><span class="line">    Icons.add,</span><br><span class="line">    size: <span class="number">150.0</span>,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>实例如下：</p><p><img src="/images/hero3.gif" alt=""></p><h2 id="自定义-hero-动画"><a href="#自定义-hero-动画" class="headerlink" title="自定义 hero 动画"></a>自定义 hero 动画</h2><p>Hero 组件允许我们自定义各种过渡效果。 有以下几种方法。</p><h3 id="添加占位符"><a href="#添加占位符" class="headerlink" title="添加占位符"></a>添加占位符</h3><p>在组件飞离它曾经处于的位置并且到达目标位置之前，目标处有一处空的地方。 我们可以在此位置添加<strong>占位符</strong>。</p><p>我们现在使用 CircularProgressIndicator 作为占位符。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">    tag: <span class="string">"DemoTag"</span>,</span><br><span class="line">    child: Icon(</span><br><span class="line">      Icons.add,</span><br><span class="line">      size: <span class="number">150.0</span>,</span><br><span class="line">    ),</span><br><span class="line">    placeholderBuilder: (context, widget) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        height: <span class="number">150.0</span>,</span><br><span class="line">        width: <span class="number">150.0</span>,</span><br><span class="line">        child: CircularProgressIndicator(),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>我们使用 placeholderBuilder 来构造占位符并返回我们希望作为占位符的组件。</p><p>使用占位符：</p><p><img src="/images/hero4.gif" alt=""></p><h3 id="更改-hero-组件"><a href="#更改-hero-组件" class="headerlink" title="更改 hero 组件"></a>更改 hero 组件</h3><p>Flutter 允许我们更改从一个页面飞到另一个页面过程的组件，而无需更改两个页面上的组件。</p><p>让我们<strong>在不更改 hero 组件的子组件的前提下</strong>，使用火箭图标“飞”而不是 “+” 图标 。</p><p><img src="/images/hero5.gif" alt=""></p><p>我们使用 <strong>flightShuttleBuilder</strong> 参数执行此操作。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">  tag: <span class="string">"DemoTag"</span>,</span><br><span class="line">  child: Icon(</span><br><span class="line">    Icons.add,</span><br><span class="line">    size: <span class="number">150.0</span>,</span><br><span class="line">  ),</span><br><span class="line">  flightShuttleBuilder: (flightContext, animation, direction,</span><br><span class="line">      fromContext, toContext) &#123;</span><br><span class="line">    <span class="keyword">return</span> Icon(FontAwesomeIcons.rocket, size: <span class="number">150.0</span>,);</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>flightShuttleBuilder 有5个参数，用来设置动画以及动画的方向。</p><p>目前，两个方向的火箭图标大小都保持在 150.0 。 通过使用方法的 direction 参数，我们可以为每个方向配置不同的配置。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(direction == HeroFlightDirection.push) &#123;</span><br><span class="line">  <span class="keyword">return</span> Icon(</span><br><span class="line">    FontAwesomeIcons.rocket,</span><br><span class="line">    size: <span class="number">150.0</span>,</span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == HeroFlightDirection.pop)&#123;</span><br><span class="line">  <span class="keyword">return</span> Icon(</span><br><span class="line">    FontAwesomeIcons.rocket,</span><br><span class="line">    size: <span class="number">70.0</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/hero6.gif" alt=""></p><h3 id="使-hero-动画可以支持-iOS-返回滑动手势"><a href="#使-hero-动画可以支持-iOS-返回滑动手势" class="headerlink" title="使 hero 动画可以支持 iOS 返回滑动手势"></a>使 hero 动画可以支持 iOS 返回滑动手势</h3><p>默认情况下，当在 iOS 上按后退按钮时，hero 动画会有效果，但它们在手势滑动时并没有。</p><p><strong>使用返回按钮：</strong></p><p><img src="/images/hero7.gif" alt=""></p><p><strong>使用滑动手势</strong></p><p><img src="/images/hero8.gif" alt=""></p><p>要解决此问题，只需在两个 Hero 组件上将 transitionOnUserGestures 设置为 true 即可。 默认情况下这里是 false。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">  tag: <span class="string">"DemoTag"</span>,</span><br><span class="line">  child: Icon(</span><br><span class="line">    Icons.add,</span><br><span class="line">  ),</span><br><span class="line">  transitionOnUserGestures: <span class="keyword">true</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/hero9.gif" alt=""></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>利用时间整理分析自己所学的知识是件非常有意义的事情，希望这也能帮到其他正在学习的同学。同时我也正在用Flutter写几个项目，写好之后就会开源给大家。</p><p>Github：<a href="https://github.com/MeandNi" target="_blank" rel="noopener">https://github.com/MeandNi</a></p><p>欢迎一起交流移动开发的技术！</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://flutter.io/docs/development/ui/animations/hero-animations" target="_blank" rel="noopener">https://flutter.io/docs/development/ui/animations/hero-animations</a></p><p><a href="https://medium.com/flutter-community/a-deep-dive-into-hero-widgets-in-flutter-d34f441eb026" target="_blank" rel="noopener">https://medium.com/flutter-community/a-deep-dive-into-hero-widgets-in-flutter-d34f441eb026</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】Flutter进阶：深入探究 TextField</title>
      <link href="/2019/01/26/flutter-exploring-textfield/"/>
      <url>/2019/01/26/flutter-exploring-textfield/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/textfield.png" alt=""></p><a id="more"></a><h2 id="TextField-介绍"><a href="#TextField-介绍" class="headerlink" title="TextField 介绍"></a>TextField 介绍</h2><p>TextField 组件可以让用户填写信息。 TextField 的代码非常简单：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TextField()</span><br></pre></td></tr></table></figure><p><img src="/images/textfield1.png" alt=""></p><h2 id="从TextField中检索信息"><a href="#从TextField中检索信息" class="headerlink" title="从TextField中检索信息"></a>从TextField中检索信息</h2><p>由于 TextFields 组件没有像 Android 中那样的 ID，因此无法根据需要检索文本，而必须在更改时将其存储在变量中或使用控制器。</p><ol><li><p>最简单的方法是使用 onChanged 方法并将当前值存储在一个变量中。示例代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> value = <span class="string">""</span>;</span><br><span class="line">TextField(</span><br><span class="line">  onChanged: (text) &#123;</span><br><span class="line">    value = text;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>第二种方法是使用 TextEditingController 。 控制器连接到 TextField ，让我们也可以监听和控制 TextField 的内容。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextEditingController controller = TextEditingController();</span><br><span class="line">TextField(</span><br><span class="line">  controller: controller,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们可以这样监听变化</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">controller.addListener(() &#123;</span><br><span class="line">  <span class="comment">// Do something here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取、设置文本内容：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(controller.text); <span class="comment">// Print current value</span></span><br><span class="line">controller.text = <span class="string">"Demo Text"</span>; <span class="comment">// Set new value</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="TextField-中其他的回调"><a href="#TextField-中其他的回调" class="headerlink" title="TextField 中其他的回调"></a>TextField 中其他的回调</h2><p>TextField 组件还提供其他回调，例如：</p><ol><li>onEditingCompleted</li><li>onSubmitted</li></ol><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">onEditingComplete: () &#123;&#125;,</span><br><span class="line">onSubmitted: (value) &#123;&#125;,</span><br></pre></td></tr></table></figure><p>这些是在用户单击 iOS 上的“完成”按钮时调用的回调。</p><h2 id="在-TextField-中使用焦点"><a href="#在-TextField-中使用焦点" class="headerlink" title="在 TextField 中使用焦点"></a>在 TextField 中使用焦点</h2><p>在 TextField 上“聚焦”意味着激活 TextField ，键盘的任何输入都将导致在聚焦的 TextField 中输入数据。</p><h3 id="1-使其自动聚焦"><a href="#1-使其自动聚焦" class="headerlink" title="1. 使其自动聚焦"></a>1. 使其自动聚焦</h3><p>要在创建窗口时在 TextField 上自动对焦，请将自动对焦字段设置为 true 。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  autofocus: <span class="keyword">true</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>默认情况下，这会将焦点设置在 TextField 上。</p><p><img src="/images/textfield2.gif" alt=""></p><h3 id="2-自定义更改焦点"><a href="#2-自定义更改焦点" class="headerlink" title="2.自定义更改焦点"></a>2.自定义更改焦点</h3><p>如果我们想要改变焦点而不仅仅是自动对焦怎么办？ 看下面代码 ，我们将 FocusNode 附加到 TextField 并使用它来切换焦点。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialise outside the build method</span></span><br><span class="line">FocusNode nodeOne = FocusNode();</span><br><span class="line">FocusNode nodeTwo = FocusNode();</span><br><span class="line"><span class="comment">// Do this inside the build method</span></span><br><span class="line">TextField(</span><br><span class="line">  focusNode: nodeOne,</span><br><span class="line">),</span><br><span class="line">TextField(</span><br><span class="line">  focusNode: nodeTwo,</span><br><span class="line">),</span><br><span class="line">RaisedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    FocusScope.of(context).requestFocus(nodeTwo);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">"Next Field"</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>我们创建两个焦点节点并将它们附加到 TextFields 。 按下按钮时，我们使用 FocusScope 请求焦点到下一个TextField。</p><p><img src="/images/textfield3.gif" alt=""></p><h2 id="更改-TextFields-的键盘属性"><a href="#更改-TextFields-的键盘属性" class="headerlink" title="更改 TextFields 的键盘属性"></a>更改 TextFields 的键盘属性</h2><p>Flutter 中的 TextField 允许我们自定义与键盘相关的属性。</p><h3 id="1-键盘类型"><a href="#1-键盘类型" class="headerlink" title="1.键盘类型"></a>1.键盘类型</h3><p>TextField 允许您自定义在 TextField 成为焦点时显示的键盘类型。 我们更改 keyboardType 属性。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  keyboardType: TextInputType.number,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>类型有：</p><ol><li><strong>TextInputType.text</strong> (普通全键盘)</li><li><strong>TextInputType.number</strong> (数字键盘)</li><li><strong>TextInputType.emailAddress</strong> (普通键盘，带有“@”符号)</li><li><strong>TextInputType.datetime</strong> (数字键盘，带有 “/” 和  “:” 符号)</li><li><strong>TextInputType.multiline</strong> (数字键盘，带有启用有符号和十进制模式的选项)</li></ol><h3 id="2-TextInputAction"><a href="#2-TextInputAction" class="headerlink" title="2.TextInputAction"></a>2.TextInputAction</h3><p>更改 TextField 的 textInputAction 可以更改键盘本身的操作按钮。</p><p>例如：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  textInputAction: TextInputAction.continueAction,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这会导致 “Done” 按钮被 “Continue” 按钮替换：</p><p><img src="/images/textfield4.png" alt=""></p><p>或者：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  textInputAction: TextInputAction.send,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield5.png" alt=""></p><p>还有很多类型，这里不一一列举。</p><h3 id="3-自动更正"><a href="#3-自动更正" class="headerlink" title="3.自动更正"></a>3.自动更正</h3><p>启用或禁用特定 TextField 的自动更正。 使用自动更正字段进行如下设置。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  autocorrect: <span class="keyword">false</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这将禁用更正。</p><h3 id="4-文本大写"><a href="#4-文本大写" class="headerlink" title="4.文本大写"></a>4.文本大写</h3><p>TextField 提供了一些有关如何使用户输入中的字母大写的选项。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  textCapitalization: TextCapitalization.sentences,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>选项有：</p><ol><li><p><strong>TextCapitalization.sentences</strong></p><p>这可以使每个句子的首字母大写。</p><p><img src="/images/textfield6.png" alt=""></p></li><li><p><strong>TextCapitalization.characters</strong></p><p>大写句子中的所有字符。</p><p><img src="/images/textfield7.png" alt=""></p></li><li><p><strong>TextCapitalization.words</strong></p><p>大写每个单词的首字母。</p><p><img src="/images/textfield8.png" alt=""></p><h2 id="Text-Style-Alignment-和-Cursor"><a href="#Text-Style-Alignment-和-Cursor" class="headerlink" title="Text Style, Alignment 和 Cursor"></a>Text Style, Alignment 和 Cursor</h2></li></ol><p>Flutter 允许自定义 TextField 内的文本样式和对齐方式以及 TextField 内的光标。</p><h3 id="TextField-内的文本对齐方式"><a href="#TextField-内的文本对齐方式" class="headerlink" title="TextField 内的文本对齐方式"></a>TextField 内的文本对齐方式</h3><p>使用 textAlign 属性调整 TextField 中光标的位置。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  textAlign: TextAlign.center,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield9.png" alt=""></p><p>通常的对齐属性有：<strong>start, end, left, right, center, justify</strong>.</p><h3 id="在-TextField-中设置文本样式"><a href="#在-TextField-中设置文本样式" class="headerlink" title="在 TextField 中设置文本样式"></a>在 TextField 中设置文本样式</h3><p>我们使用 style 属性来更改 TextField 内部文本的样式。 使用它来更改颜色，字体大小等。这类似于文本组件中的样式属性，这里我们不多做介绍。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  style: TextStyle(color: Colors.red, fontWeight: FontWeight.w300),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield10.png" alt=""></p><h3 id="更改-TextField-中的光标"><a href="#更改-TextField-中的光标" class="headerlink" title="更改 TextField 中的光标"></a>更改 TextField 中的光标</h3><p>可以直接自定义 TextField 组件的光标。</p><p>您可以更改光标颜色，宽度和半径。 例如，在这里我自定义了一个圆形红色光标。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  cursorColor: Colors.red,</span><br><span class="line">  cursorRadius: Radius.circular(<span class="number">16.0</span>),</span><br><span class="line">  cursorWidth: <span class="number">16.0</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield11.png" alt=""></p><h3 id="控制-TextField-中的大小和最大长度"><a href="#控制-TextField-中的大小和最大长度" class="headerlink" title="控制 TextField 中的大小和最大长度"></a>控制 TextField 中的大小和最大长度</h3><p>TextFields 可以控制其中写入的最大字符数、最大行数并在键入文本时展开。</p><h4 id="控制最大字符数"><a href="#控制最大字符数" class="headerlink" title="控制最大字符数"></a>控制最大字符数</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  maxLength: <span class="number">4</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield12.png" alt=""></p><p>通过设置 maxLength 属性，将强制执行最大长度，并且默认情况下会将计数器添加到 TextField 。</p><h4 id="制作可扩展的TextField"><a href="#制作可扩展的TextField" class="headerlink" title="制作可扩展的TextField"></a>制作可扩展的TextField</h4><p>有时，我们需要 TextField 当一行完成时会扩展。 在Flutter中，做法有点奇怪（但很容易）。 我们将 maxLines 设置为 null ，默认为1。 </p><p><img src="/images/textfield13.png" alt=""></p><p><strong>注意：默认情况下，将 maxLines 设置为直接值会将其自动扩展为该行数。</strong></p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  maxLines: <span class="number">3</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/textfield14.png" alt=""></p><h4 id="模糊文字"><a href="#模糊文字" class="headerlink" title="模糊文字"></a>模糊文字</h4><p>要隐藏 TextField 中的文本，请将 obscureText 设置为true 。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  obscureText: <span class="keyword">true</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield15.png" alt=""></p><h2 id="装饰-TextField"><a href="#装饰-TextField" class="headerlink" title="装饰 TextField"></a>装饰 TextField</h2><p>至此，我们专注于 Flutter 提供的输入功能。 现在我们来实际设计一个漂亮的 TextField 。</p><p>为了装饰 TextField，我们使用了带有 InputDecoration 的 decoration 属性。 由于 InputDecoration 类非常庞大，我们快速过一遍它的重要属性。</p><h3 id="使用提示和标签属性向用户提供信息"><a href="#使用提示和标签属性向用户提供信息" class="headerlink" title="使用提示和标签属性向用户提供信息"></a>使用提示和标签属性向用户提供信息</h3><p>提示和标签都是字符串，可帮助用户理解要在 TextField 中输入的信息。 不同之处在于，当标签浮动在 TextField上时，一旦用户开始输入，提示就会消失。</p><p><img src="/images/textfield16.png" alt="Hint"></p><p><img src="/images/textfield17.png" alt="Label"></p><h3 id="您可以使用-“icon”，“prefixIcon”-和-“suffixIcon”-添加图标"><a href="#您可以使用-“icon”，“prefixIcon”-和-“suffixIcon”-添加图标" class="headerlink" title="您可以使用 “icon”，“prefixIcon” 和 “suffixIcon” 添加图标"></a>您可以使用 “icon”，“prefixIcon” 和 “suffixIcon” 添加图标</h3><p>您可以直接向 TextFields 添加图标。 您也可以使用 prefixText 和 suffixText 代替 Text。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    icon: Icon(Icons.<span class="built_in">print</span>)</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield18.png" alt=""></p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    prefixIcon: Icon(Icons.<span class="built_in">print</span>)</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield19.png" alt=""></p><h3 id="对于其他任何组件，使用-“prefix”-而不是-“prefixIcon”"><a href="#对于其他任何组件，使用-“prefix”-而不是-“prefixIcon”" class="headerlink" title="对于其他任何组件，使用 “prefix” 而不是 “prefixIcon”"></a>对于其他任何组件，使用 “prefix” 而不是 “prefixIcon”</h3><p>要使用通用组件而不是仅仅一个图标，请使用 prefix field 。让我们在 TextField 中添加一个圆形进度框。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    prefix: CircularProgressIndicator(),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield20.png" alt=""></p><h3 id="像-hint-，label-等每个属性都有各自的样式字段"><a href="#像-hint-，label-等每个属性都有各自的样式字段" class="headerlink" title="像 hint ，label 等每个属性都有各自的样式字段"></a>像 <strong>hint</strong> ，<strong>label</strong> 等每个属性都有各自的样式字段</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    hintText: <span class="string">"Demo Text"</span>,</span><br><span class="line">    hintStyle: TextStyle(fontWeight: FontWeight.w300, color: Colors.red)</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><strong>注意：虽然我在此示例中这样操作，但通常不会更改提示颜色。</strong></p><h3 id="如果您不想要标签而想要为用户提供持久消息，请使用-“helperText”-。"><a href="#如果您不想要标签而想要为用户提供持久消息，请使用-“helperText”-。" class="headerlink" title="如果您不想要标签而想要为用户提供持久消息，请使用 “helperText” 。"></a>如果您不想要标签而想要为用户提供持久消息，请使用 “helperText” 。</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    helperText: <span class="string">"Hello"</span></span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield21.png" alt=""></p><h3 id="使用-“decoration：null”-或-InputDecoration-collapsed-删除-TextField-上的默认下划线"><a href="#使用-“decoration：null”-或-InputDecoration-collapsed-删除-TextField-上的默认下划线" class="headerlink" title="使用 “decoration：null” 或 InputDecoration.collapsed 删除 TextField 上的默认下划线"></a>使用 “decoration：null” 或 InputDecoration.collapsed 删除 TextField 上的默认下划线</h3><p>使用这些删除 TextField 上的默认下划线。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration.collapsed(hintText: <span class="string">""</span>)</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield22.png" alt=""></p><h3 id="使用-“border”-为-TextField-设置边框"><a href="#使用-“border”-为-TextField-设置边框" class="headerlink" title="使用 “border” 为 TextField 设置边框"></a>使用 “border” 为 TextField 设置边框</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    border: OutlineInputBorder()</span><br><span class="line">  )</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/textfield23.png" alt=""></p><p>您可以进一步做大量的装饰，我不可能将所有你需要的样式做出来。 但我希望这我已经让你知道怎么将它做出来！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】Flutter进阶：深入探究 ListView 和 ScrollPhysics</title>
      <link href="/2019/01/26/flutter-exploring-list/"/>
      <url>/2019/01/26/flutter-exploring-list/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/listview.png" alt=""></p><a id="more"></a><p>Flutter 中的 ListView 可以对比 Android 中的 ListView 或者 RecycleView（当然也有不同之处） ，是可滚动项的线性列表。 我们可以用它来制作可滚动项目列表或重复项目列表。</p><h2 id="探究各类型的-ListView"><a href="#探究各类型的-ListView" class="headerlink" title="探究各类型的 ListView"></a>探究各类型的 ListView</h2><p>构建 ListView 有以下几种方式：</p><ol><li><strong>ListView</strong></li><li><strong>ListView.builder</strong></li><li><strong>ListView.separated</strong></li><li><strong>ListView.custom</strong></li></ol><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>这是 ListView 类的默认构造函数。 ListView 内有任意个数的子元素都可使其滚动。</p><p>代码的格式为：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    ItemOne(),</span><br><span class="line">    ItemTwo(),</span><br><span class="line">    ItemThree(),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>通常这里应该放少量的子元素，因为 ListView 也会将当前不可见的元素构建起来，因此大量的子元素可能使 App 性能降低。</p><h3 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder()"></a>ListView.builder()</h3><p>builder() 构造函数可以用来构造重复的子项列表，这里我们就可以类比 Android 中的 ListView 。 这个构造函数有两个主要参数：列表中项目数的 itemCount 和构造每个列表子项的 itemBuilder。</p><p><img src="/images/listview2.gif" alt="/images/listview2.gif"></p><p>代码的格式为：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemCount: itemCount,</span><br><span class="line">  itemBuilder: (context, position) &#123;</span><br><span class="line">    <span class="keyword">return</span> listItem();</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>列表项是<strong>懒加载</strong>的，这表明 Flutter 只构造了特定数量的列表项，当用户滚动时，早期的列表项被销毁。</p><p><strong>技巧</strong>：由于元素是懒加载的，只加载了所需数量的元素，我们并不需要将 itemCount 作为必需参数，列表可以是<strong>无限长</strong>的。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.builder(</span><br><span class="line">  itemBuilder: (context, position) &#123;</span><br><span class="line">    <span class="keyword">return</span> Card(</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        child: Text(position.toString(), style: TextStyle(fontSize: <span class="number">22.0</span>),),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="/images/listview3.gif" alt="/images/listview3.gif"></p><h3 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated()"></a>ListView.separated()</h3><p>在 separate() 的构造函数中，我们同样生成一个列表，但这里我们可以指定每个项之间的分隔符。</p><p><img src="/images/listview4.gif" alt="/images/listview4.gif"></p><p>实质上，这里，<strong>我们构造了两个交织列表</strong>：一个作为主列表，一个作为分隔符列表。</p><p>要注意的是，这里不能应用前面构造函数中所说的无限长度，因为此构造函数会强制执行 itemCount 。</p><p>代码的格式为：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.separated(</span><br><span class="line">      itemBuilder: (context, position) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListItem();</span><br><span class="line">      &#125;,</span><br><span class="line">      separatorBuilder: (context, position) &#123;</span><br><span class="line">        <span class="keyword">return</span> SeparatorItem();</span><br><span class="line">      &#125;,</span><br><span class="line">      itemCount: itemCount,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这种类型的列表允许您动态定义分隔符，为不同类型的子项分配不同类型的分隔符，在需要时添加或删除分隔符等。</p><p>该实现还可以在列表中方便地插入其他类型的子元素（例如广告），而不需要对列表项中的主列表进行任何修改。</p><p><img src="/images/listview5.png" alt="/images/listview5.png"></p><p><strong>注意：</strong>通常分隔符列表长度比项目列表小 1，因为在最后一个元素之后不存在分隔符。</p><h3 id="ListView-custom"><a href="#ListView-custom" class="headerlink" title="ListView.custom()"></a>ListView.custom()</h3><p>正如其名，custom() 构造函数允许我们自定义构建 ListViews。 需要的主要参数是 SliverChildDelegate ，用于构建子项。 SliverChildDelegates 的类型是：</p><ol><li><strong>verChildListDelegate</strong></li><li><strong>SliverChildBuilderDelegate</strong></li></ol><p>SliverChildListDelegate 接受一个子项的直接列表，而 SliverChildBuiderDelegate 接受 IndexedWidgetBuilder（我们使用的构造函数）。</p><p><strong>您可以使用或子类化这些来构建自己的委托。</strong></p><p><strong>ListView 默认构造函数的行为类似于带有 SliverChildListDelegate 的 ListView.custom 。</strong></p><p>我们已经介绍完了 ListViews 的各种类型，让我们来看看 ScrollPhysics 。</p><h2 id="探究-ScrollPhysics"><a href="#探究-ScrollPhysics" class="headerlink" title="探究 ScrollPhysics"></a>探究 ScrollPhysics</h2><p>为了控制列表滚动的发生方式，我们在 ListView 的构造函数中通常需要设置 physics 参数。 各种类型的 physics 参数有：</p><h3 id="NeverScrollablePhysics"><a href="#NeverScrollablePhysics" class="headerlink" title="NeverScrollablePhysics"></a>NeverScrollablePhysics</h3><p>NeverScrollablePhysics 表现为不可滚动的列表。 使用此选项可以完全禁用 ListView 的滚动。</p><h3 id="BouncingScrollPhysics"><a href="#BouncingScrollPhysics" class="headerlink" title="BouncingScrollPhysics"></a>BouncingScrollPhysics</h3><p>BouncingScrollPhysics 在列表结束时<strong>退回</strong>列表。 iOS 中有类似的效果。</p><p><img src="/images/listview6.gif" alt="/images/listview6.gif"></p><h3 id="ClampingScrollPhysics"><a href="#ClampingScrollPhysics" class="headerlink" title="ClampingScrollPhysics"></a>ClampingScrollPhysics</h3><p>这是 Android 上使用的默认滚动方式。 列表在结尾处停止并给出一定的效果。</p><p><img src="/images/listview7.gif" alt="/images/listview7.gif"></p><h3 id="FixedExtentScrollPhysics"><a href="#FixedExtentScrollPhysics" class="headerlink" title="FixedExtentScrollPhysics"></a>FixedExtentScrollPhysics</h3><p>该方法与其他方法略有不同，因为它仅适用于 FixedExtendScrollControllers 和使用它们的列表。 举个例子，我们用 ListWheelScrollView 来制作类似轮子的列表。</p><p>FixedExtentScrollPhysics 仅滚动到子项而不存在任何偏移。</p><p><img src="/images/listview8.gif" alt="/images/listview8.gif"></p><p>样例代码非常简单：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">FixedExtentScrollController fixedExtentScrollController =</span><br><span class="line">    <span class="keyword">new</span> FixedExtentScrollController();</span><br><span class="line">ListWheelScrollView(</span><br><span class="line">  controller: fixedExtentScrollController,</span><br><span class="line">  physics: FixedExtentScrollPhysics(),</span><br><span class="line">  children: monthsOfTheYear.map((month) &#123;</span><br><span class="line">    <span class="keyword">return</span> Card(</span><br><span class="line">        child: Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Expanded(</span><br><span class="line">            child: Padding(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">          child: Text(</span><br><span class="line">            month,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">18.0</span>),</span><br><span class="line">          ),</span><br><span class="line">        )),</span><br><span class="line">      ],</span><br><span class="line">    ));</span><br><span class="line">  &#125;).toList(),</span><br><span class="line">  itemExtent: <span class="number">60.0</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="你应当知道的其他事情"><a href="#你应当知道的其他事情" class="headerlink" title="你应当知道的其他事情"></a>你应当知道的其他事情</h2><h3 id="如何在列表中保留被破坏的元素？"><a href="#如何在列表中保留被破坏的元素？" class="headerlink" title="如何在列表中保留被破坏的元素？"></a>如何在列表中保留被破坏的元素？</h3><p>Flutter 提供了一个 KeepAlive() 小组件，它可以使子元素保持活跃状态，否则会被破坏。 在列表中，默认情况下，元素包装在 AutomaticKeepAlive 中。</p><p><img src="/images/listview9.png" alt="/images/listview9.png"></p><h3 id="为什么我的-ListView-在列表和外部小部件之间有空格？"><a href="#为什么我的-ListView-在列表和外部小部件之间有空格？" class="headerlink" title="为什么我的 ListView 在列表和外部小部件之间有空格？"></a>为什么我的 ListView 在列表和外部小部件之间有空格？</h3><p>ListView 在它与外部窗口组件之间有默认填充，将填充设置为 EdgeInsets.all(0.0) 就可以删除它。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>利用时间整理分析自己所学的知识是件非常有意义的事情，希望这也能帮到其他正在学习的同学。同时我也正在用Flutter写几个项目，写好之后就会开源给大家。</p><p>Github：<a href="https://github.com/MeandNi" target="_blank" rel="noopener">https://github.com/MeandNi</a></p><p>微信：yangjk128</p><p>原文博客：<a href="https://meandni.com/2019/01/26/1be6/">https://meandni.com/2019/01/26/1be6/</a></p><p>欢迎一起交流移动开发的技术！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019第一次阅读记录</title>
      <link href="/2019/01/18/reading-record1/"/>
      <url>/2019/01/18/reading-record1/</url>
      
        <content type="html"><![CDATA[<h4 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h4><p><a href="http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html" target="_blank" rel="noopener">《Node 定时器详解》</a></p><p><a href="https://juejin.im/post/5c408f40e51d455222642b1c" target="_blank" rel="noopener">一位年度作者的年度总结 | 掘金年度征文</a></p><p><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a> ？</p><a id="more"></a><p><a href="https://juejin.im/post/5aad40e4f265da237f1e12ed" target="_blank" rel="noopener">前端笔试题面试题记录（上）| 掘金技术征文</a></p><p><a href="https://github.com/KieSun/Blog/issues/2" target="_blank" rel="noopener">深度解析原型中的各个难点</a></p><hr><p><a href="https://juejin.im/post/5c0dbe7ee51d451dac076e6c" target="_blank" rel="noopener">Android MVVM组件化架构方案</a></p><p><a href="https://juejin.im/post/5c404cca5188251e10159d09" target="_blank" rel="noopener">基于源码分析 Android View 事件分发机制</a></p><p><a href="https://juejin.im/post/5bdfaed0e51d4505086fa4cd" target="_blank" rel="noopener">回到最初：开发不需要“编译” 的 WebApp</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/01/weekly-issue-40.html" target="_blank" rel="noopener">每周分享第 40 期</a></p><p><a href="https://www.cnblogs.com/xueweihan/p/5220513.html" target="_blank" rel="noopener">什么是真正的程序员</a></p><p><a href="https://hellogithub.com/periodical/volume/32/" target="_blank" rel="noopener">分享 GitHub 上 有趣、入门级的开源项目</a></p><hr><p><a href="https://juejin.im/post/5b2b4c36f265da59b243cac9" target="_blank" rel="noopener">flutter-dart 类的构造函数</a></p><p><a href="https://juejin.im/post/5c453f97f265da61776c3fed" target="_blank" rel="noopener">2018年值得熬夜看完的书</a></p><p><a href="https://juejin.im/post/5c2c31d3f265da61553aee34" target="_blank" rel="noopener">Android绘制函数图象及正弦函数的介绍</a></p><p><a href="https://juejin.im/post/5c2dd2f75188250fa8362647" target="_blank" rel="noopener">Android多媒体之认识声音、录音与播放(PCM)</a></p><p><a href="https://www.jianshu.com/p/c0e30769ea7e" target="_blank" rel="noopener">Flutter进阶篇（4）– Flutter的Future异步详解</a></p><p><a href="https://juejin.im/post/5b431bff5188251b166ee0c1" target="_blank" rel="noopener">教你如何用 Flutter 的 GestureDetector 构建自定义滑块</a></p><p><a href="https://github.com/xitu/gold-miner/blob/master/TODO/a-blurring-view-for-android.md" target="_blank" rel="noopener">在 Android 下进行实时模糊渲染</a></p><p><a href="https://github.com/ljianshu/Blog/issues/22" target="_blank" rel="noopener">关于Http协议，你必须要知道的</a></p><hr><p><a href="https://www.cnblogs.com/yjiyjige/p/3263858.html#commentform" target="_blank" rel="noopener">详解KMP算法</a></p><p><a href="https://www.jianshu.com/p/aaafcd72c127" target="_blank" rel="noopener">要点提炼|开发艺术之Bitmap&amp;Cache</a></p><p><a href="https://www.jianshu.com/p/10dc575896d3" target="_blank" rel="noopener">要点提炼|开发艺术之Animation</a></p><p><a href="https://mp.weixin.qq.com/s/PCkVsD8nPJV3wXkPg_6yDw" target="_blank" rel="noopener">分享一个我开发的MVVM架构的开源小项目 —— 郭霖</a></p><p><a href="https://medium.com/flutter-community/flutter-push-pop-push-1bb718b13c31" target="_blank" rel="noopener">Flutter: Push, Pop, Push</a></p><p><a href="https://docs.flutter.io/flutter/widgets/Navigator-class.html" target="_blank" rel="noopener">Navigator class</a></p><p><a href="https://www.cnblogs.com/guoyaohua/p/8600214.html" target="_blank" rel="noopener">十大经典排序算法最强总结（含JAVA代码实现）</a></p><p><a href="https://www.jianshu.com/p/06ff0dfeed39" target="_blank" rel="noopener">要点提炼|开发艺术之View</a></p><p><a href="https://www.jianshu.com/p/02962454adf7?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=qq" target="_blank" rel="noopener">Android 消息处理机制（Looper、Handler、MessageQueue,Message）</a>🌟</p><p><a href="https://github.com/sucese/android-interview-guide/blob/master/doc/Android%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86.md" target="_blank" rel="noopener">Android网络编程面试题集</a>🌟</p><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html" target="_blank" rel="noopener">深入解析String#intern —— 美团技术</a></p><hr><p><a href="https://www.jianshu.com/p/e8955f525f4c" target="_blank" rel="noopener">【大揭秘】Android架构组件ViewModel来龙去脉</a></p><p><a href="https://juejin.im/entry/586a12c5128fe10057037fba" target="_blank" rel="noopener">RecyclerView 源码解析</a></p><p><a href="https://iamasoldier6.com/2017/03/25/%E6%B7%B1%E5%85%A5-RecyclerView-%E6%BA%90%E7%A0%81%E6%8E%A2%E7%A9%B6%E4%B8%80%EF%BC%9A%E5%AE%8F%E8%A7%82%E8%AE%BE%E8%AE%A1/" target="_blank" rel="noopener">深入 RecyclerView 源码探究一：宏观设计</a></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解Java虚拟机》笔记6——高效并发</title>
      <link href="/2019/01/18/jvm_note6/"/>
      <url>/2019/01/18/jvm_note6/</url>
      
        <content type="html"><![CDATA[<h1 id="第五部分-高效并发"><a href="#第五部分-高效并发" class="headerlink" title="第五部分 高效并发"></a>第五部分 高效并发</h1><h2 id="第十二章-Java内存模型与线程"><a href="#第十二章-Java内存模型与线程" class="headerlink" title="第十二章 Java内存模型与线程"></a>第十二章 Java内存模型与线程</h2><p>并发处理的广泛应用是使得Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类“压榨”计算机运算能力的最有力武器。</p><a id="more"></a><h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><ul><li>多任务处理在现代计算机操作系统中几乎已是一项必备的功能了；</li><li>除了充分利用计算机处理器的能力外，一个服务端同时对多个客户端提供服务则是另一个更具体的并发应用场景；</li><li>服务端是Java语言最擅长的领域之一，不过如何写好并发应用程序却又是服务端程序开发的难点之一，处理好并发方面的问题通常需要更多的编码经验来支持，幸好Java语言和虚拟机提供了许多工具，把并发编码的门槛降低了不少；</li></ul><h3 id="12-2-硬件的效率与一致性"><a href="#12-2-硬件的效率与一致性" class="headerlink" title="12.2 硬件的效率与一致性"></a>12.2 硬件的效率与一致性</h3><ul><li>绝大多数的运算任务不可能只靠处理器计算就能完成，处理器至少要与内存交互，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速运行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了；</li><li>基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也为计算机系统带来更高的复杂度，因为它引入了一个新的问题：缓存一致性；为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI、MOSI、Synapse、Firefly及Dragon Protocol等；</li><li>本章将会多次提到内存模型一词，可以理解在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象；不同架构的物理机器可以拥有不一样的内存模型，而Java虚拟机也有自己的内存模型，并且这里介绍的内存访问操作与硬件的缓存访问具有很高的可比性；</li><li>除了增加高速缓存之外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的；</li></ul><h3 id="12-3-Java内存模型"><a href="#12-3-Java内存模型" class="headerlink" title="12.3 Java内存模型"></a>12.3 Java内存模型</h3><p>Java虚拟机规范中视图定义一种Java内存模型（JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p><h4 id="12-3-1-主内存与工作内存"><a href="#12-3-1-主内存与工作内存" class="headerlink" title="12.3.1 主内存与工作内存"></a>12.3.1 主内存与工作内存</h4><ul><li>Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节；此处的变量与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会被共享；</li><li>Java内存模型规定了所有的变量都存储在主内存中，每个线程还有自己的工作内存，线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量；</li><li>这里所讲的主内存、工作内存与第二章所讲的Java内存区域中的Java堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的；线程、主内存和工作内存的关系如下所示：</li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-01c9d97d757d8c1f.png" alt="线程、主内存和工作内存的关系"></p><h4 id="12-3-2-内存间交互操作"><a href="#12-3-2-内存间交互操作" class="headerlink" title="12.3.2 内存间交互操作"></a>12.3.2 内存间交互操作</h4><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下八种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于double和long类型的变量的某些操作在某些平台允许有例外）：</p><ul><li>lock</li><li>unlock</li><li>read</li><li>load</li><li>use</li><li>assign</li><li>store</li><li>write</li></ul><p>基于理解难度和严谨性考虑，最新的JSR-133文档中，已经放弃采用这八种操作去定义Java内存模型的访问协议了，后面将会介绍一个等效判断原则 — 先行发生原则，用来确定一个访问在并发环境下是否安全；</p><h4 id="12-3-3-对于volatile型变量的特殊规则"><a href="#12-3-3-对于volatile型变量的特殊规则" class="headerlink" title="12.3.3 对于volatile型变量的特殊规则"></a>12.3.3 对于volatile型变量的特殊规则</h4><ul><li>关键字volatile可以说是Java虚拟机提供的最轻量级的同步机制；</li><li>当一个变量定义为volatile之后，它将具备两种特性：第一是保证此变量对所有线程的可见性，这里的可见性是指当一个线程修改了这个变量的值，新的值对于其他线程来说是可以立即得知的，而普通的变量的值在线程间传递均需要通过主内存来完成；另外一个是禁止指令重排序优化，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致；</li><li>volatile变量在各个线程的工作内存中不存在一致性问题，但是Java里面的运算并非原子操作，导致volatile变量的运算在并发下一样是不安全的；</li><li>在不符合以下两条规则的运算场景中，我们仍然要通过加锁来保证原子性：运算结果并不依赖变量的当前值或者能够确保只有单一的线程修改变量的值、变量不需要与其他的状态变量共同参与不变约束；</li><li>volatile变量读操作的性能消耗与普通变量几乎没有任何差别，但是写操作则可能会慢一些；不过大多数场景下volatile的总开销仍然要比锁低，我们在volatile与锁之中选择的唯一依据仅仅是volatile的语义能否满足使用场景的需求；</li></ul><h4 id="12-3-4-对于long和double型变量的特殊规则"><a href="#12-3-4-对于long和double型变量的特殊规则" class="headerlink" title="12.3.4 对于long和double型变量的特殊规则"></a>12.3.4 对于long和double型变量的特殊规则</h4><ul><li>允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行，即允许虚拟机实现选择可以不保证64位数据类型的load、store、read和write这4个操作的原子性，这点就是所谓的long和double的非原子性协定；</li><li>但允许虚拟机选择把这些操作实现为具有原子性的操作，目前各种平台下的商用虚拟机几乎都选择把64位数据的读写操作作为原子操作来对待；</li></ul><h4 id="12-3-5-原子性、可见性与有序性"><a href="#12-3-5-原子性、可见性与有序性" class="headerlink" title="12.3.5 原子性、可见性与有序性"></a>12.3.5 原子性、可见性与有序性</h4><ul><li>原子性（Atomicity）：由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write；在synchronized块之间的操作也具备原子性；</li><li>可见性（Visibility）：是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改；除了volatile之外，Java还有synchronized和final关键字能实现可见性；</li><li>有序性（Ordering）：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的；Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性；</li></ul><h4 id="12-3-6-先行发生原则"><a href="#12-3-6-先行发生原则" class="headerlink" title="12.3.6 先行发生原则"></a>12.3.6 先行发生原则</h4><ul><li>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，影响包括了修改了内存中共享变量的值、发送了消息、调用了方法等；</li><li>下面是Java内存模型下一些天然的先行发生关系：程序次序规则、管程锁定规则、volatile变量规则、线程启动规则、线程终止规则、线程中断规则、对象终结规则、传递性；</li><li>时间先后顺序与先行发生原则之间基本没有太大的关系，所以我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准；</li></ul><h3 id="12-4-Java与线程"><a href="#12-4-Java与线程" class="headerlink" title="12.4 Java与线程"></a>12.4 Java与线程</h3><h4 id="12-4-1-线程的实现"><a href="#12-4-1-线程的实现" class="headerlink" title="12.4.1 线程的实现"></a>12.4.1 线程的实现</h4><ul><li>线程是比进程更轻量级的调度执行单位，线程的引入可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源又可以独立调度；</li><li>Thread类与大部分的Java API有显著的差别，它的所有关键方法都是声明为Native的；</li><li>实现线程主要有三种方式：使用内核线程实现（系统调用代价相对较高、一个系统支持轻量级进程的数量是有限的）、使用用户线程实现（优势在于不需要系统内核支援，劣势在于所有线程操作都需要用户程序自己处理）和使用用户线程加轻量级进程混合实现（用户线程是完全建立在用户空间中，因此用户线程的创建、切换等操作依然廉价，并且可以支持大规模的用户线程并发；而操作系统提供支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级线程来完成，大大降低了整个进程被完全阻塞的风险）；</li><li>对于Sun JDK来说，它的Windows版与Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windows和Linux系统提供的线程模式就是一对一的；</li></ul><h4 id="12-4-2-Java线程调度"><a href="#12-4-2-Java线程调度" class="headerlink" title="12.4.2 Java线程调度"></a>12.4.2 Java线程调度</h4><ul><li>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度（线程的执行时间由线程本身来控制）和抢占式线程调度（线程由系统来分配执行时间，线程的切换不由线程本身来决定）；</li><li>Java语言一共设置了10个级别的线程优先级，不过线程优先级并不是太靠谱，原因就是操作系统的线程优先级不见得总是与Java线程的优先级一一对应，另外优先级还可能被系统自行改变；</li></ul><h4 id="12-4-3-状态转换"><a href="#12-4-3-状态转换" class="headerlink" title="12.4.3 状态转换"></a>12.4.3 状态转换</h4><ul><li>Java语言定义了五种线程状态，在任意一个时间点，一个线程只能有且只有其中一种状态，分别是新建（New）、运行（Runnable）、无限期等待（Waiting）、限期等待（Timed Waiting）、阻塞（Blocled）、结束（Terminated）。它们之间相互的转换关系如下所示：</li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-68f2cc99d1439039.png" alt="线程状态转换关系"></p><h3 id="12-5-本章小结"><a href="#12-5-本章小结" class="headerlink" title="12.5 本章小结"></a>12.5 本章小结</h3><p>本章我们首先了解了虚拟机Java内存模型的结构及操作，然后讲解了原子性、可见性、有序性在Java内存模型中的体现，最后介绍了先行发生原则的规则及使用。另外，我们还了解了线程在Java语言之中是如何实现的。</p><p>在本章主要介绍了虚拟机如何实现并发，而在下一章我们主要关注点将是虚拟机如何实现高效，以及虚拟机对我们编写的并发代码提供了什么样的优化手段。</p><h2 id="第十三章-线程安全与锁优化"><a href="#第十三章-线程安全与锁优化" class="headerlink" title="第十三章 线程安全与锁优化"></a>第十三章 线程安全与锁优化</h2><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><ul><li>首先需要保证并发的正确性，然后在此基础上实现高效；</li></ul><h3 id="13-2-线程安全"><a href="#13-2-线程安全" class="headerlink" title="13.2 线程安全"></a>13.2 线程安全</h3><p>Brian Goetz对线程安全有一个比较恰当的定义：当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。</p><h4 id="13-2-1-Java语言中的线程安全"><a href="#13-2-1-Java语言中的线程安全" class="headerlink" title="13.2.1 Java语言中的线程安全"></a>13.2.1 Java语言中的线程安全</h4><ul><li>我们可以将Java语言中各个操作共享的数据分为以下五类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立；</li><li>不可变：不可变带来的安全性是最简单和最纯粹的，如final的基本数据类型；如果共享的数据是一个对象，那就需要保证对象的行为不会对其状态产生任何影响才行，比如String类的substring、replace方法；Number类型的大部分子类都符合不可变要求的类型，但是AtomicInteger和AtomicLong则并非不可变的；</li><li>线程绝对安全：Java API中标注自己是线程安全的类，大多数都不是绝对的线程安全；比如java.util.Vector，不意味着调用它的是时候永远都不再需要同步手段了；</li><li>线程相对安全：是我们通常意义上所讲的线程安全，在Java语言中，大部分的线程安全类都属于这种类型；</li><li>线程兼容：指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用；我们说一个类不是线程安全的，绝大多数时候指的是这一种情况；</li><li>线程对立：无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码，Java语言中很少出现；</li></ul><h4 id="13-2-2-线程安全的实现方法"><a href="#13-2-2-线程安全的实现方法" class="headerlink" title="13.2.2 线程安全的实现方法"></a>13.2.2 线程安全的实现方法</h4><ul><li>互斥同步：同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个线程使用，而互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式；Java中最基本的互斥同步手段就是synchronized关键字，它对同一个线程来说是可重入的且会阻塞后面其他线程的进入；另外还可以使用java.util.concurrent包中的重入锁（ReentrantLock）来实现同步，相比synchronized关键字ReentrantLock增加了一些高级功能：等待可中断、可实现公平锁以及锁可以绑定多个条件；</li><li>非阻塞同步：互斥同步最主要的问题就是进行线程阻塞和唤醒带来的性能问题，其属于一种悲观的并发策略；随着硬件指令集的发展，我们有了另外一个选择即基于冲突检测的乐观并发策略，就是先进行操作，如果没有其他线程争用共享数据那就操作成功了，如果有争用产生了冲突，那就再采取其他的补偿措施（最常见的就是不断重试直至成功），这种同步操作称为非阻塞同步；Java并发包的整数原子类，其中的compareAndSet和getAndIncrement等方法都使用了Unsafe类的CAS操作；</li><li>无同步方案：要保证线程安全，并不是一定就要进行同步；有一些代码天生就是线程安全的，比如可重入代码和线程本地存储的代码；</li></ul><h3 id="13-3-锁优化"><a href="#13-3-锁优化" class="headerlink" title="13.3 锁优化"></a>13.3 锁优化</h3><h4 id="13-3-1-自旋锁与自适应自旋"><a href="#13-3-1-自旋锁与自适应自旋" class="headerlink" title="13.3.1 自旋锁与自适应自旋"></a>13.3.1 自旋锁与自适应自旋</h4><ul><li>互斥同步对性能最大的影响是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给系统的并发性能带来了很大的压力；另外在共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程并不值得，如果让两个或以上的线程同时并行执行，让后面请求锁的那个线程稍等一下，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁；为了让线程等待，我们只需让线程执行一个忙循环，这些技术就是所谓的自旋锁；</li><li>在JDK 1.6已经默认开启自旋锁；如果锁被占用的时间很短自旋等待的效果就会非常好，反之则会白白消耗处理器资源；</li><li>在JDK 1.6中引入了自适应的自旋锁，这意味着自旋的时间不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定；</li></ul><h4 id="13-3-2-锁消除"><a href="#13-3-2-锁消除" class="headerlink" title="13.3.2 锁消除"></a>13.3.2 锁消除</h4><ul><li>锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除；</li><li>锁消除的主要判断依据来源于逃逸分析的数据支持；</li></ul><h4 id="13-3-3-锁粗化"><a href="#13-3-3-锁粗化" class="headerlink" title="13.3.3 锁粗化"></a>13.3.3 锁粗化</h4><ul><li>原则上总是推荐将同步块的作用范围限制得尽量小 — 只有在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁；</li><li>但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗；</li></ul><h4 id="13-3-4-轻量级锁"><a href="#13-3-4-轻量级锁" class="headerlink" title="13.3.4 轻量级锁"></a>13.3.4 轻量级锁</h4><ul><li>轻量级锁是JDK 1.6之中加入的新型锁机制，它是相对于使用操作系统互斥量来实现的传统锁而言的；它并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗；</li><li>要理解轻量级锁，以及后面会讲到的偏向锁的原理和运作过程，必须从HotSpot虚拟机的对象的内存布局开始介绍；HotSpot虚拟机的对象头分为两部分信息：第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄等，这部分官方称之为Mark Word，是实现轻量级锁和偏向锁的关键，另外一部分用于存储指向方法区对象类型数据的指针； Mark Word被设计成一个非固定的数据结构以便在极小的空间存储尽量多的信息，在32位的HotSpot虚拟机中对象未被锁定的状态下，25bit用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0；在其他状态（轻量级锁定、重量级锁定、GC标志、可偏向）下对象的存储内容如下：</li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-5ab1ae52e69821c1.png" alt="HotSpot虚拟机对象头"></p><ul><li>在代码进入同步块的时候，如果此同步对象没有被锁定，虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储对象目前的Mark Word的拷贝（官方称之为Displaced Mark Word）；然后虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，如果更新成功了那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位将转变为“00”，即表示此对象处于轻量级锁定状态；如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就可以直接进入同步块继续执行，否则说明这个锁对象已经被其他线程抢占了；如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁的指针，后面等待锁的线程也要进行阻塞状态；</li><li>轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据；</li></ul><h4 id="13-3-5-偏向锁"><a href="#13-3-5-偏向锁" class="headerlink" title="13.3.5 偏向锁"></a>13.3.5 偏向锁</h4><ul><li>偏向锁也是JDK 1.6中引入的一项锁优化，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能；如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了；</li><li>偏向锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步；</li><li>假设当前虚拟机启动了偏向锁，那么当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设为“01”，即偏向模式；同时使用CAS操作把获取到这个锁的线程ID记录在对象的Mark Word之中；如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作；当有另外一个线程去尝试获取这个锁时，偏向模式就宣告结束，根据锁对象目前是否被锁定的状态，撤销偏向后恢复到未锁定或轻量级锁定的状态，后续的同步操作就如上面介绍的轻量级锁那样执行；偏向锁、轻量级锁的状态转化以及对象Mark Work的关系如下图所示：</li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-2501d5d148f80a2d.png" alt="偏向锁、轻量级锁的状态转化"></p><ul><li>偏向锁可以提高带有同步但无竞争的程序性能，它同样是一个带有效益权衡性质的优化；</li></ul><h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><p>本章介绍了线程安全所涉及的概念和分类、同步实现的方式及虚拟机的底层运行原理，并且介绍了虚拟机为了实现高效并发所采取的一系列锁优化措施。</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解Java虚拟机》笔记5——类加载机制与字节码执行引擎</title>
      <link href="/2019/01/15/jvm_note5/"/>
      <url>/2019/01/15/jvm_note5/</url>
      
        <content type="html"><![CDATA[<h2 id="第七章-虚拟机类加载机制"><a href="#第七章-虚拟机类加载机制" class="headerlink" title="第七章 虚拟机类加载机制"></a>第七章 虚拟机类加载机制</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><ul><li>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</li><li>在Java语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成，这虽然增量一些性能开销，但是会为Java应用程序提供高度的灵活性。</li></ul><a id="more"></a><h3 id="7-2-类加载的时机"><a href="#7-2-类加载的时机" class="headerlink" title="7.2 类加载的时机"></a>7.2 类加载的时机</h3><ul><li>类的整个生命周期：加载、验证、准备、解析、初始化、使用和卸载；其中验证、准备和解析统称为连接；</li><li>虚拟机规范没有强制约束类加载的时机，但严格规定了有且只有5种情况必须立即对类进行初始化：遇到new、getstatic、putstatic和invokestatic指令；对类进行反射调用时如果类没有进行过初始化；初始化时发现父类还没有进行初始化；虚拟机启动指定的主类；动态语言中MethodHandle实例最后解析结果REF_getStatic等的方法句柄对应的类没有初始化时；</li></ul><h3 id="7-3-类加载的过程"><a href="#7-3-类加载的过程" class="headerlink" title="7.3 类加载的过程"></a>7.3 类加载的过程</h3><h4 id="7-3-1-加载"><a href="#7-3-1-加载" class="headerlink" title="7.3.1 加载"></a>7.3.1 加载</h4><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流；</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；</li></ul><h4 id="7-3-2-验证"><a href="#7-3-2-验证" class="headerlink" title="7.3.2 验证"></a>7.3.2 验证</h4><ul><li>验证是连接阶段的第一步，其目的是确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全；</li><li>验证阶段是非常重要的，这个阶段是否严谨决定了Java虚拟机是否能承受恶意代码的攻击；</li><li>校验动作：文件格式验证（基于二进制字节流）、元数据验证（对类的元数据语义分析）、字节码验证（对方法体语义分析）、符号引用验证（对类自身以外的信息进行匹配性校验）；</li></ul><h4 id="7-3-3-准备"><a href="#7-3-3-准备" class="headerlink" title="7.3.3 准备"></a>7.3.3 准备</h4><ul><li>正式为变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在这个方法区中进行分配；</li><li>需要强调两点：这时候内存分配的仅包括类变量，而不包括类实例变量；这里所说的初始化通常情况下是数据类型的零值，真正的赋值是在初始化阶段，<strong>如果是static final的则是直接赋值</strong>；</li></ul><h4 id="7-3-4-解析"><a href="#7-3-4-解析" class="headerlink" title="7.3.4 解析"></a>7.3.4 解析</h4><ul><li>解析阶段是虚拟机将常量池内的符号引用（如CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等7种）替换为直接引用的过程；</li><li>符号引用可以是任何形式的字面量，与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中；而直接引用是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄，它和虚拟机实现的内存布局相关，引用的目标必定以及在内存中存在；</li><li>对同一个符号引用进行多次解析请求是很常见的事情，虚拟机实现可以对第一次解析的结果进行缓存；</li></ul><h4 id="7-3-5-初始化"><a href="#7-3-5-初始化" class="headerlink" title="7.3.5 初始化"></a>7.3.5 初始化</h4><ul><li>是类加载过程的最后一步，真正开始执行类中定义的Java程序代码（或者说是字节码）；</li><li>初始化阶段是执行类构造器<clinit>方法的过程，该方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的；</li><li><clinit>方法与类的构造函数（或者说是实例构造器<init>方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<clinit>方法执行之前，父类的<clinit>方法已执行完毕；</li><li>执行接口的<clinit>方法不需要先执行父接口的<clinit>方法，只有当父接口中定义的变量使用时父接口才会初始化，接口的实现类在初始化时也一样不会执行接口的<clinit>方法；</li><li><clinit>方法初始化是加锁阻塞等待的，应当避免在<clinit>方法中有耗时很长的操作；</li></ul><h3 id="7-4-类加载器"><a href="#7-4-类加载器" class="headerlink" title="7.4 类加载器"></a>7.4 类加载器</h3><ul><li>虚拟机设计团队把类加载阶段的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到虚拟机外部去实现，实现这个动作的代码模块称为类加载器；</li><li>这时Java语言的一项创新，也是Java语言流行的重要原因，在类层次划分、OSGI、热部署、代码加密等领域大放异彩；</li></ul><h4 id="7-4-1-类与类加载器"><a href="#7-4-1-类与类加载器" class="headerlink" title="7.4.1 类与类加载器"></a>7.4.1 类与类加载器</h4><ul><li>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机的唯一性，每一个类加载器都拥有一个独立的类名称空间；</li><li>比较两个类是否相等（如Class对象的equals方法、isAssignableFrom方法、isInstance方法），只有在这两个类是由同一个类加载器加载的前提下才有意义；</li></ul><h4 id="7-4-2-双亲委派模型"><a href="#7-4-2-双亲委派模型" class="headerlink" title="7.4.2 双亲委派模型"></a>7.4.2 双亲委派模型</h4><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-4e150bb5176ab73d.png" alt="双亲委派模型"></p><ul><li>三种系统提供的类加载器：启动类加载器（Bootstrap ClassLoader）、扩展类加载器（Extension ClassLoader）、应用程序类加载器（Application ClassLoader）；</li><li>双亲委派模型要求除了顶层的启动类加载器外，其他的类加载器都应当有自己的父类加载器，这里一般不会以继承的关系来实现，而是使用组合的关系来复用父加载器的代码；</li><li>其工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，只有父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到所需的类），子加载器才会尝试自己去加载；</li><li>这样的好处是Java类随着它的类加载器具备了一种带有优先级的层次关系，对保证Java程序的稳定运作很重要；</li><li>实现双亲委派的代码都集中在java.lang.ClassLoader的loadClass方法中，逻辑清晰易懂；</li></ul><h4 id="7-4-3-破坏双亲委派模型"><a href="#7-4-3-破坏双亲委派模型" class="headerlink" title="7.4.3 破坏双亲委派模型"></a>7.4.3 破坏双亲委派模型</h4><ul><li>上一小节的双亲委派模型是Java设计者推荐给开发者的类加载器实现方法，但不是一个强制性的约束模型；</li><li>典型的两种情况：为了解决JNI接口提供者（SPI）引入的线程上下文类加载器；为了程序动态性加强的OSGI的Bundle类加载器；</li></ul><h3 id="7-5-本章小结"><a href="#7-5-本章小结" class="headerlink" title="7.5 本章小结"></a>7.5 本章小结</h3><p>本章介绍了类加载过程的加载、验证、准备、解析和初始化五个阶段中虚拟机进行了哪些动作，还介绍了类加载器的工作原理及其对虚拟机的意义。下一章将一起看看虚拟机如果执行定义在Class文件里的字节码。</p><h2 id="第八章-虚拟机字节码执行引擎"><a href="#第八章-虚拟机字节码执行引擎" class="headerlink" title="第八章 虚拟机字节码执行引擎"></a>第八章 虚拟机字节码执行引擎</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><ul><li>执行引擎是Java虚拟机最核心的组成部分之一，区别于物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，虚拟机的执行引擎是自己实现的，可以自行制定指令集与执行引擎的结构体系，并且能够执行那些不被硬件直接支持的指令集格式；</li><li>在虚拟机规范中制定了虚拟机字节码执行引擎的概念模型，该模型成为各种虚拟机执行引擎的统一外观；</li><li>在不同的虚拟机实现里面，执行引擎在执行Java代码时可能会有解释执行和编译执行两种选择，也可能两者兼备，甚至还可能会包含几个不同级别的编译器执行引擎，但从外观来说是一致的：输入的都是字节码文件，处理过程是字节码解析的等效过程，输出的是执行结果。</li></ul><h3 id="8-2-运行时栈帧结构"><a href="#8-2-运行时栈帧结构" class="headerlink" title="8.2 运行时栈帧结构"></a>8.2 运行时栈帧结构</h3><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-009d0f0efe9f528e.png" alt="运行时栈帧结构"></p><ul><li>栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素；</li><li>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息，每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程；</li><li>栈帧需要分配多少内存在编译时就完全确定并写入到方法表的Code属性之中了，不会受到程序运行期变量数据的影响；</li><li>对于执行引擎来说，在活动线程中只有位于栈顶的栈帧才算有效的，称为当前栈帧，与这个栈帧相关联的方法称为当前方法，执行引擎运行的所有字节码指令都只针对当前栈帧进行操作。</li></ul><h4 id="8-2-1-局部变量表"><a href="#8-2-1-局部变量表" class="headerlink" title="8.2.1 局部变量表"></a>8.2.1 局部变量表</h4><ul><li>是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，Code属性的max_locals确定了该方法所需要分配的局部变量表的最大容量；</li><li>其容量以变量槽（Variable Slot）为最小单位，虚拟机规范允许Slot的长度随处理器、操作系统或虚拟机的不同而发生变化；</li><li>一个Slot可以存放一个32位以内的数据类型，包括boolean、byte、char。short、int、float、reference和returnAddress这八种类型；对于64位的数据类型（long和double），虚拟机会以高位对齐的方式为其分配两个连续的Slot空间；</li></ul><h4 id="8-2-2-操作数栈"><a href="#8-2-2-操作数栈" class="headerlink" title="8.2.2 操作数栈"></a>8.2.2 操作数栈</h4><ul><li>也常称为操作栈，它是一个后入先出栈；Code属性的max_stacks确定了其最大深度；</li><li>比如整数加法的字节码指令iadd在运行的时候操作数栈中最接近栈顶的两个元素已经存入了两个int型的数值，当执行这个指令时，会将这两个int值出栈并相加，然后将相加的结果入栈；</li><li>操作数栈中元素的类型必须与字节码指令的序列严格匹配；</li><li>Java虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的栈就是操作数栈；</li></ul><h4 id="8-2-3-动态连接"><a href="#8-2-3-动态连接" class="headerlink" title="8.2.3 动态连接"></a>8.2.3 动态连接</h4><ul><li>每个栈帧都包含一个执行运行时常量池中该栈帧所属方法引用，持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）；</li><li>Class文件的常量池的符号引用，有一部分在类加载阶段或者第一次使用时就转换为直接引用，这种称为静态解析，而另外一部分在每一次运行期间转换为直接引用，这部分称为动态连接；</li></ul><h4 id="8-2-4-方法返回地址"><a href="#8-2-4-方法返回地址" class="headerlink" title="8.2.4 方法返回地址"></a>8.2.4 方法返回地址</h4><ul><li>退出方法的方式：正常完成出口和异常完成出口；</li><li>方法退出的过程实际上就等同于把当前栈帧出栈，因此退出时可能只需的操作有：恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈帧的操作数中，调整PC计数器的值以只需方法调用指令后面的一套指令等；</li></ul><h4 id="8-2-5-附加信息"><a href="#8-2-5-附加信息" class="headerlink" title="8.2.5 附加信息"></a>8.2.5 附加信息</h4><ul><li>虚拟机规范允许具体的虚拟机实现增加一些规范里没有描述的信息到栈帧中，例如与调试相关的信息，这部分完成取决于具体的虚拟机实现；</li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本即调用哪一个方法，暂时还不涉及方法内部的具体运行过程；</li><li>Class文件的编译过程中不报警传统编译的连接步骤，一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局的入口地址。这个特性给Java带来了更强大的动态扩展能力，但也使得Java方法调用过程变得相对复杂；</li></ul><h4 id="8-3-1-解析"><a href="#8-3-1-解析" class="headerlink" title="8.3.1 解析"></a>8.3.1 解析</h4><ul><li>方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的，这类方法的调用称为解析；</li><li>在Java语言中符合编译器可知、运行期不可变这个要求的方法，主要包括静态方法和私有方法两大类；</li><li>五条方法调用字节码指令：invokestatic、invokespecial、invokevirtual、invokeinterface、invokedynamic；</li><li>解析调用是一个静态的过程，在编译期间就完全确定，在类加载的解析阶段就会把涉及的符号引用全部转变为可确定的直接引用；而分派调用则可能是静态的也可能是动态的；</li></ul><h4 id="8-3-2-分派"><a href="#8-3-2-分派" class="headerlink" title="8.3.2 分派"></a>8.3.2 分派</h4><ul><li>静态分派：“Human man = new Man();”语句中Human称为变量的静态类型，后面的Man称为变量的实际类型；静态类型和实际类型在程序中都可以发生一些变化，区别是静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，并且最终的静态类型是在编译器可知的；而实际类型的变化在运行期才确定，编译器在编译程序的时候并不知道一个对象的实际类型是什么；编译器在重载时是通过参数的静态类型而不是实际类型作为判定依据的；所有根据静态类型来定位方法执行版本的分派动作称为静态分派，其典型应用是方法重载；</li><li>动态分派：invokevirtual指令执行的第一步就是在运行期间确定接收者的实际类型，所以两次调用中invokevirtual指令把常量池中的类方法符号引用解析到了不同的直接引用上，这个过程就是Java语言中方法重写的本质；我们把这种在运行期根据实际类型确定方法执行版本的分派过程称为动态分派；</li><li>单分派与多分派：方法的接收者与方法的参数统称为方法的宗量，根据分派基于多少种宗量，可以将分派分为单分派（根据一个宗量对目标方法进行选择）与多分派（根据多于一个宗量对目标方法进行选择）两种；今天的Java语言是一门静态多分派、动态单分派的语言；</li><li>虚拟机动态分派的实现：在方法区中建立一个虚方法表（Virtual Method Table），使用虚方法表索引来代替元数据查找以提高性能；方法表一般在类加载的连接阶段进行初始化，准备了类的变量初始化值后，虚拟机会把该类的方法表也初始化完毕；</li></ul><h4 id="8-3-3-动态类型语言支持"><a href="#8-3-3-动态类型语言支持" class="headerlink" title="8.3.3 动态类型语言支持"></a>8.3.3 动态类型语言支持</h4><ul><li>JDK 1.7发布增加的invokedynamic指令实现了“动态类型语言”支持，也是为JDK 1.8顺利实现Lambda表达式做技术准备；</li><li>动态类型语言的关键特征是它的类型检查的主体过程是在运行期而不是编译器，比如JavaScript、Python等；</li><li>Java语言在编译期间就将方法完整的符号引用生成出来，作为方法调用指令的参数存储到Class文件中；这个符号引用包含了此方法定义在哪个具体类型之中、方法的名字以及参数顺序、参数类型和方法返回值等信息；而在ECMAScript等动态语言中，变量本身是没有类型的，变量的值才具有类型，编译时最多只能确定方法名称、参数、返回值这些信息，而不会去确定方法所在的具体类型；变量无类型而变量值才有类型，这个特点也是动态类型语言的一个重要特征；</li><li>JDK 1.7实现了JSR-292，新加入的java.lang.invoke包的主要目的是在之前单纯依靠符号引用来确定调用的目标方法外，提供一种新的动态确定目标方法的机制，称为MethodHandle；</li><li>从本质上讲，Reflection（反射）和MethodHandle机制都是在模拟方法调用，但Reflection是在模拟Java代码层次的方法调用，而MethodHandle是在模拟字节码层次的方法调用，前者是重量级，而后者是轻量级；另外前者只为Java语言服务，后者可服务于所有Java虚拟机之上的语言；</li><li>每一处含有invokedynamic指令的位置都称为“动态调用点(Dynamic Call Site)”，这条指令的第一个参数不再是代表符号引用的CONSTANT_Methodref_info常量，而是CONSTANT_InvokeDynamic_info常量（可以得到引导方法、方法类型和名称）；</li><li>invokedynamic指令与其他invoke指令的最大差别就是它的分派逻辑不是由虚拟机决定的，而是由程序员决定的；</li></ul><h3 id="8-4-基于栈的字节码解释执行引擎"><a href="#8-4-基于栈的字节码解释执行引擎" class="headerlink" title="8.4 基于栈的字节码解释执行引擎"></a>8.4 基于栈的字节码解释执行引擎</h3><p>上节主要讲虚拟机是如何调用方法的，这节探讨虚拟机是如何执行方法中的字节码指令的。</p><h4 id="8-4-1-解释执行"><a href="#8-4-1-解释执行" class="headerlink" title="8.4.1 解释执行"></a>8.4.1 解释执行</h4><ul><li>只有确定了谈论对象是某种具体的Java实现版本和执行引擎运行模式时，谈解释执行还是编译执行才比较确切；</li><li>Java语言中，javac编译器完成了程序代码经过词法分析、语法分析到抽象语法树，再遍历语法树生成线性的字节码指令流的过程；因为这一部分动作是在Java虚拟机之外进行的，而解释器在虚拟机的内部，所以Java程序的编译就是半独立的实现；</li></ul><h4 id="8-4-2-基于栈的指令集与基于寄存器的指令集"><a href="#8-4-2-基于栈的指令集与基于寄存器的指令集" class="headerlink" title="8.4.2 基于栈的指令集与基于寄存器的指令集"></a>8.4.2 基于栈的指令集与基于寄存器的指令集</h4><ul><li>Java编译器输出的指令集，基本上是一种基于栈的指令集架构，指令流中的指令大部分是零地址指令，它们依赖操作数栈进行工作；</li><li>基于栈的指令集主要的优点是可移植性，寄存器由硬件直接提供，程序直接依赖这些硬件寄存器则不可避免地要受到硬件的约束；主要缺点是执行速度相对来说会稍慢一点；</li></ul><h4 id="8-4-3-基于栈的解释器执行过程"><a href="#8-4-3-基于栈的解释器执行过程" class="headerlink" title="8.4.3 基于栈的解释器执行过程"></a>8.4.3 基于栈的解释器执行过程</h4><p>一段简单的算法代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int calc()&#123;</span><br><span class="line">    int a &#x3D; 100;</span><br><span class="line">    int b &#x3D; 200;</span><br><span class="line">    int c &#x3D; 300;</span><br><span class="line">    return (a + b) * c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的字节码表示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int calc();</span><br><span class="line">Code:</span><br><span class="line">Stack&#x3D;2, Locals&#x3D;4, Args_size&#x3D;1</span><br><span class="line">0:bipush 100</span><br><span class="line">2:istore_1</span><br><span class="line">3:sipush 200</span><br><span class="line">6:istore_2</span><br><span class="line">7:sipush 300</span><br><span class="line">10:istore_3</span><br><span class="line">11:iload_1</span><br><span class="line">12:iload_2</span><br><span class="line">13:iadd</span><br><span class="line">14:iload_3</span><br><span class="line">15:imul</span><br><span class="line">16:ireturn</span><br></pre></td></tr></table></figure><p>javap提示这段代码需要深度为2的操作数栈和4个Slot的局部变量空间，作者根据这些信息画了示意图来说明执行过程中的变化情况：</p><p>执行偏移地址为0的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-ae7f979f896ae750.png" alt="执行偏移地址为0的指令"></p><p>执行偏移地址为2的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-4cc3955b129175a3.png" alt="执行偏移地址为2的指令"></p><p>执行偏移地址为11的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-b640506135b2ccd3.png" alt="执行偏移地址为11的指令"></p><p>执行偏移地址为12的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-ddf83219167aca0f.png" alt="img"></p><p>执行偏移地址为13的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-8d58d9d3f21a08e2.png" alt="执行偏移地址为13的指令"></p><p>执行偏移地址为14的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-ede2baf8e9d01bc6.png" alt="执行偏移地址为14的指令"></p><p>执行偏移地址为16的指令</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-3ddc95e842532183.png" alt="执行偏移地址为16的指令"></p><p>注：上面的执行过程仅仅是一种概念模型，虚拟机中解析器和即时编译器会对输入的字节码进行优化。</p><h3 id="8-5-本章小结"><a href="#8-5-本章小结" class="headerlink" title="8.5 本章小结"></a>8.5 本章小结</h3><p>本章分析了虚拟机在执行代码时，如何找到正确的方法、如何执行方法内的字节码以及执行代码时涉及的内存结构。这第六、七、八三章中，我们针对Java程序是如何存储的、如何载入的以及如何执行的问题进行了讲解，下一章一起看看这些理论知识在具体开发中的经典应用。</p><h2 id="第九章-类加载及执行子系统的案例与实战"><a href="#第九章-类加载及执行子系统的案例与实战" class="headerlink" title="第九章 类加载及执行子系统的案例与实战"></a>第九章 类加载及执行子系统的案例与实战</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><ul><li>在Class文件格式与执行引擎这部分中，用户的程序能直接影响的内容并不多；</li><li>能通过程序进行操作的，主要是字节码生成与类加载器这两部分的功能，但仅仅在如何处理这两点上，就已经出现了许多值得欣赏和借鉴的思路；</li></ul><h3 id="9-2-案例分析"><a href="#9-2-案例分析" class="headerlink" title="9.2 案例分析"></a>9.2 案例分析</h3><h4 id="9-2-1-Tomcat：正统的类加载器架构"><a href="#9-2-1-Tomcat：正统的类加载器架构" class="headerlink" title="9.2.1 Tomcat：正统的类加载器架构"></a>9.2.1 Tomcat：正统的类加载器架构</h4><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-6a33f07ebfd24e1e.png" alt="Tomcat服务器的类加载架构"></p><ul><li>Java Web服务器：部署在同一个服务器上的两个Web应用程序所使用的Java类库可以实现相互隔离又要可以互相共享；尽可能保证自身的安全不受部署的Web应用程序影响；要支持JSP生成类的热替换；</li><li>上图中，灰色背景的三个类加载器是JDK默认提供的类加载器，而CommonClassLoader、CatalinaClassLoader、SharedClassLoader和WebappClassLoader是Tomcat自己定义的类加载器，分别加载/common/<em>（可被Tomcat和Web应用共用）、/server/</em>（可被Tomcat使用）、/shared/<em>（可被Web应用使用）和/WebApp/WEB-INF/</em>（可被当前Web应用使用）中的Java类库，Tomcat 6.x把前面三个目录默认合并到一起变成一个/lib目录（作用同原先的common目录）；</li></ul><h4 id="9-2-2-OSGI：灵活的类加载架构"><a href="#9-2-2-OSGI：灵活的类加载架构" class="headerlink" title="9.2.2 OSGI：灵活的类加载架构"></a>9.2.2 OSGI：灵活的类加载架构</h4><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-5c270d4c6018cee3.png" alt="OSGI的类加载架构"></p><ul><li>OSGI的每个模块称为Bundle，可以声明它所依赖的Java Package（通过Import-Package描述），也可以声明它允许导出发布的Java Package（通过Export-Package描述）；</li><li>除了更精确的模块划分和可见性控制外，引入OSGI的另外一个重要理由是基于OSGI的程序很可能可以实现模块级的热插拔功能；</li><li>OSGI的类加载器之间只有规则，没有固定的委派关系；加载器之间的关系更为复杂、运行时才能确定的网状结构，提供灵活性的同时，可能会产生许多的隐患；</li></ul><h4 id="9-2-3-字节码生成技术与动态代理的实现"><a href="#9-2-3-字节码生成技术与动态代理的实现" class="headerlink" title="9.2.3 字节码生成技术与动态代理的实现"></a>9.2.3 字节码生成技术与动态代理的实现</h4><ul><li>在Java里面除了javac和字节码类库外，使用字节码生成的例子还有Web服务器中的JSP编译器、编译时植入的AOP框架和很常用的动态代理技术等，这里选择其中相对简单的动态代理来看看字节码生成技术是如何影响程序运作的；</li><li>动态代理的优势在于实现了在原始类和接口还未知的时候就确定类的代理行为，可以很灵活地重用于不同的应用场景之中；</li><li>以下的例子中生成的代理类“$Proxy0.class”文件可以看到代理为传入接口的每一个方法统一调用了InvocationHandler对象的invoke方法；其生成代理类的字节码大致过程其实就是根据Class文件的格式规范去拼接字节码；</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DynamicProxyTest &#123;</span><br><span class="line"></span><br><span class="line">    interface IHello &#123;</span><br><span class="line">        void sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Hello implements IHello &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void sayHello() &#123;</span><br><span class="line">            System.out.println(&quot;Hello world&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class DynamicProxy implements InvocationHandler &#123;</span><br><span class="line">        Object originalObj;</span><br><span class="line"></span><br><span class="line">        Object bind(Object originalObj) &#123;</span><br><span class="line">            this.originalObj &#x3D; originalObj;</span><br><span class="line">            return Proxy.newProxyInstance(originalObj.getClass().getClassLoader(), originalObj.getClass().getInterfaces(), this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            System.out.println(&quot;Welcome&quot;);</span><br><span class="line">            return method.invoke(originalObj, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; add this property to generate proxy class file</span><br><span class="line">        System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">        IHello hello &#x3D; (IHello) new DynamicProxy().bind(new Hello());</span><br><span class="line">        hello.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-4-Retrotranslator：跨越JDK版本"><a href="#9-2-4-Retrotranslator：跨越JDK版本" class="headerlink" title="9.2.4 Retrotranslator：跨越JDK版本"></a>9.2.4 Retrotranslator：跨越JDK版本</h4><ul><li>Retrotranslator的作用是将JDK 1.5编译出来的Class文件转变为可以在JDK 1.4或JDK 1.3部署的版本，它可以很好地支持自动装箱、泛型、动态注解、枚举、变长参数、遍历循环、静态导入这些语法特性，甚至还可以支持JDK 1.5中新增的集合改进、并发包以及对泛型、注解等的反射操作；</li><li>JDK升级通常包括四种类型：编译器层面的做的改进、Java API的代码增强、需要再字节码中进行支持的活动以及虚拟机内部的改进，Retrotranslator只能模拟前两类，第二类通过独立类库实现，第一类则通过ASM框架直接对字节码进行处理；</li></ul><h3 id="9-3-实战：自己动手实现远程执行功能"><a href="#9-3-实战：自己动手实现远程执行功能" class="headerlink" title="9.3 实战：自己动手实现远程执行功能"></a>9.3 实战：自己动手实现远程执行功能</h3><ul><li>目标：不依赖JDK版本、不改变原有服务端程序的部署，不依赖任何第三方类库、不侵入原有程序、临时代码的执行结果能返回到客户端；</li><li>思路：如何编译提交到服务器的Java代码（客户端编译好上传Class文件而不是Java代码）、如何执行编译之后的Java代码（要能访问其他类库，要能卸载）、如何收集Java代码的执行结果（在执行的类中把System.out的符号引用替换为我们准备的PrintStream的符号引用）；</li><li>具体实现：HotSwapClassLoader用于实现同一个类的代码可以被多次加载，通过公开父类ClassLoader的defineClass实现；HackSystem是为了替换java.lang.System，它直接修改Class文件格式的byte[]数组中的常量池部分，将常量池中指定内容的CONSTANT_Utf8_info常量替换为新的字符串；ClassModifier涉及对byte[]数组操作的部分，主要是将byte[]与int和String互相转换，以及把对byte[]数据的替换操作封装在ByteUtils类中；经过ClassModifier处理过的byte[]数组才会传给HotSwapClassLoader.loadByte方法进行类加载；而JavaClassExecutor是提供给外部调用的入口；</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JavaClassExecutor &#123;</span><br><span class="line"></span><br><span class="line">    public static String execute(byte[] classByte) &#123;</span><br><span class="line">        HackSystem.clearBuffer();</span><br><span class="line">        ClassModifier cm &#x3D; new ClassModifier(classByte);</span><br><span class="line">        byte[] modifiedBytes &#x3D; cm.modifyUTF8Constant(&quot;java&#x2F;lang&#x2F;System&quot;, &quot;org&#x2F;fenixsoft&#x2F;classloading&#x2F;execute&#x2F;HackSystem&quot;);</span><br><span class="line">        HotSwapClassLoader hotSwapClassLoader &#x3D; new HotSwapClassLoader();</span><br><span class="line">        Class clazz &#x3D; hotSwapClassLoader.loadByte(modifiedBytes);</span><br><span class="line">        try &#123;</span><br><span class="line">            Method method &#x3D; clazz.getMethod(&quot;main&quot;, new Class[]&#123;String[].class&#125;);</span><br><span class="line">            method.invoke(null, new String[]&#123;null&#125;);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            t.printStackTrace(HackSystem.out);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return HackSystem.getBufferString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于测试的JSP</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@page import&#x3D;&quot;java.lang.*&quot; %&gt;</span><br><span class="line">&lt;%@page import&#x3D;&quot;java.io.*&quot; %&gt;</span><br><span class="line">&lt;%@page import&#x3D;&quot;org.fenixsoft.classloading.execute.*&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">InputStream is &#x3D; new FileInputStream(&quot;c:&#x2F;TestClass.class&quot;);</span><br><span class="line">byte[] b &#x3D; new byte[is.available()];</span><br><span class="line">is.read(b);</span><br><span class="line">is.close();</span><br><span class="line"></span><br><span class="line">out.println(JavaClassExecutor.execute(b));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="9-4-本章小结"><a href="#9-4-本章小结" class="headerlink" title="9.4 本章小结"></a>9.4 本章小结</h3><p>只有了解虚拟机如何执行程序，才能更好地理解怎样写出优秀的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解Java虚拟机》笔记4——类文件结构</title>
      <link href="/2019/01/14/jvm_note4/"/>
      <url>/2019/01/14/jvm_note4/</url>
      
        <content type="html"><![CDATA[<p>代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。</p><p>由于最近十年内虚拟机以及大量建立在虚拟机之上的程序语言如雨后春笋般出现并蓬勃发展，将我们编写的程序编译成二进制本地机器码（Native Code）已不再是唯一的选择，越来越多的程序语言选择了操作系统和机器指令集无关的、平台中立的格式作为程序编译后的存储格式。</p><a id="more"></a><h1 id="无关性的基石"><a href="#无关性的基石" class="headerlink" title="无关性的基石"></a>无关性的基石</h1><ul><li>Java刚诞生的宣传口号：一次编写，到处运行（Write Once, Run Anywhere）。其最终实现在操作系统的应用层：Sun公司以及其他虚拟机提供商发布了许多可以运行在各种不同平台的虚拟机，这些虚拟机都可以载入和执行同一种平台无关的字节码。</li><li>字节码（ByteCode）是构成平台无关的基石；</li><li>另外虚拟机的语言无关性也越来越被开发者所重视，JVM设计者在最初就考虑过实现让其他语言运行在Java虚拟机之上的可能性，如今已发展出一大批在JVM上运行的语言，比如Clojure、Groovy、JRuby、Jython、Scala；</li><li>实现语言无关性的基础仍是虚拟机和字节码存储格式，Java虚拟机不和包括Java在内的任何语言绑定，它只与Class文件这种特定的二进制文件格式所关联，这使得任何语言的都可以使用特定的编译器将其源码编译成Class文件，从而在虚拟机上运行。</li></ul><p><div align="center"> <img src="http://pic.yupoo.com/meandni/b630efe6/16c836f2.png" width=""/> </div><br></p><p>Java虚拟机提供的语言无关性</p><h1 id="Class类文件的结构"><a href="#Class类文件的结构" class="headerlink" title="Class类文件的结构"></a>Class类文件的结构</h1><ul><li>Class文件是一组以8个字节为基础单位的二进制流（可能是磁盘文件，也可能是类加载器直接生成的），各个数据项目严格按照顺序紧凑地排列，中间没有任何分隔符；</li><li>Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，其中只有两种数据类型：无符号数和表；</li><li>无符号数属于基本的数据类型，以u1、u2、u4和u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值；</li><li>表是由多个无符号数获取其他表作为数据项构成的复合数据类型，习惯以“_info”结尾；</li><li>无论是无符号数还是表，当需要描述同一个类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项的形式，这时称这一系列连续的某一类型的数据未某一类型的集合。</li></ul><p><div align="center"> <img src="http://pic.yupoo.com/meandni/0afa8e94/1aaadf08.png" width=""/> </div><br></p><p>下面我以自己本机写的一个简单的Java文件来学习其中各个部分的含义：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/65326165/8b3cad31.png" width=""/> </div><br>使用javac编译成TestClass.class文件，使用16进制打开：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/4b862df8/2676ca8a.png" width=""/> </div><br></p><p>使用javap命令输出Class文件信息：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/05bb5ca8/4bcf1947.png" width=""/> </div><br></p><h4 id="魔数和版本（magic、version）"><a href="#魔数和版本（magic、version）" class="headerlink" title="魔数和版本（magic、version）"></a>魔数和版本（magic、version）</h4><ul><li>Class文件的头4个字节，唯一作用是确定文件是否为一个可被虚拟机接受的Class文件，固定为“0xCAFEBABE”。</li><li>第5和第6个字节是次版本号，第7和第8个字节是主版本号（0x0034为52，对应JDK版本1.8）；能向下兼容之前的版本，无法运行后续的版本；</li></ul><h4 id="常量池（constant-pool）"><a href="#常量池（constant-pool）" class="headerlink" title="常量池（constant_pool）"></a>常量池（constant_pool）</h4><ul><li>常量池可以理解为Class文件之中的资源仓库，是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的数据项之一；</li><li>由于常量池中的常量数量不固定，因此需要在常量池前放置一项u2类型的数据来表示容量，该值是从1开始的，上图的0x0013为十进制的19，代表常量池中有18项常量，索引值范围为1~18；</li><li>常量池主要存放两大类常量：字面量（Literal，比较接近Java的常量概念，比如文本字符串和final常量等）和符号引用（Symbolic References，主要包括类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）；</li><li>Java代码在javac编译时不会有“连接”这一步骤，而是在虚拟机加载Class文件的时候进行动态连接；所以在Class文件不会保存各个方法、字段和最终内存布局信息；当虚拟机运行时需要从常量池获取对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址中；</li><li>JDK 1.7中常量池共有14种不同的表结构数据，这些表结构开始的第一位是一个u1类型的标志位，代表当前常量的类型，具体如下图所示：</li></ul><p><div align="center"> <img src="http://pic.yupoo.com/meandni/81488f7b/0de93189.png" width=""/> </div><br></p><ul><li>之所以说常量池是最繁琐的数据就是因为这14种常量类型都有自己的结结构。可以结合下图中各个表结构的说明和之前使用javap解析的文件内容一起看。</li></ul><p><div align="center"> <img src="http://pic.yupoo.com/meandni/ecd4f473/607e8836.png" width=""/> </div><br></p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/d7e0e573/94dbf52c.png" width=""/> </div><br></p><ul><li>第1项：0x0A（15标志为方法句柄），0x0004（指向第4项的类描述符），0x000F（指向第15项的名称及类型描述符）；</li><li>第2项：0x09（9标志为字段符号引用），0x0003（指向第3项类描述符），0x0010（指向第16项的名称及类型描述符）；</li><li>第3项：0x07（7标志为类符号引用），0x0011（指向第17项全限定名常量项）；</li><li>第4项：0x07（7标志为类符号引用），0x0012（指向第18项全限定名常量项）；</li><li>第5项：0x01（1标志为UTF-字符串常量），0x0001（字符串占用1个字节），6D（字符“m”）；</li><li>第6项：0x01（1标志为UTF-字符串常量），0x0001（字符串占用1个字节），49（字符“I”）；</li><li>第7项：0x01（1标志为UTF-字符串常量），0x0006（字符串占用6个字节），3C 69 6E 69 74 3E（字符“<init>”）；</li><li>第8项：0x01（1标志为UTF-字符串常量），0x0003（字符串占用3个字节），28 29 56（字符“()V”）；</li><li>第9项：0x01（1标志为UTF-字符串常量），0x0004（字符串占用4个字节），43 6F 64 65（字符“Code”）；</li><li>第10项：0x01（1标志为UTF-字符串常量），0x000F（字符串占用15个字节），4C 69 6E 65 4E 75 6D 62 65 72 54 61 62 6C 65（字符“LineNumberTable”）；</li><li>第11项：0x01（1标志为UTF-字符串常量），0x0003（字符串占用3个字节），69 6E 63（字符“inc”）；</li><li>第12项：0x01（1标志为UTF-字符串常量），0x0003（字符串占用3个字节），28 29 49（字符“()I”）；</li><li>第13项：0x01（1标志为UTF-字符串常量），0x000A（字符串占用10个字节），53 6F 75 72 63 65 46 69 6C 65（字符“SourceFile”）；</li><li>第14项：0x01（1标志为UTF-字符串常量），0x000E（字符串占用14个字节），54 65 73 74 43 6C 61 73 73 2E 6A 61 76 61（字符“TestClass.java”）；</li><li>第15项：0x0C（12标志为名称和类型符号引用），0x0007（指向第7项名称常量项）， 0x0008（指向第8项描述符常量项）；</li><li>第16项：0x0C（12标志为名称和类型符号引用），0x0005（指向第5项名称常量项）， 0x0006（指向第6项描述符常量项）；</li><li>第17项：0x01（1标志为UTF-字符串常量），0x001F（字符串占用31个字节），63 6F 6D 2F 67 69 6E 6F 62 65 66 75 6E 6E 79 2F 63 6C 61 7A 7A 2F 54 65 73 74 43 6C 61 73 73（字符“com/ginobefunny/clazz/TestClas”）；</li><li>第18项：0x01（1标志为UTF-字符串常量），0x0010（字符串占用16个字节），6A 61 76 61 2F 6C 61 6E 67 2F 4F 62 6A 65 63 74（字符“java/lang/Object”）；</li></ul><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><ul><li>紧接在常量池后面的是两个字节的访问标志，用于标识类或接口的访问信息；</li><li>访问标志一个有16个标志位，但目前只采用了其中8位，本例子中的0x0021标识为一个public的普通类；</li></ul><h4 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h4><ul><li>类索引：u2类型的数据，用于确定类的全限定名。本例子中为0x0003，指向常量池中第3项；</li><li>父类索引：u2类型的数据，用于确定父类的全限定名。本例子中为0x0004，指向常量池中第4项；</li><li>接口索引计算器：u2类型的数据，用于表示索引集合的容量。本例子中为0x0000，说明没有实现接口；</li><li>接口索引集合：一组u2类型的数据的集合，用于确定实现的接口（对于接口来说就是extend的接口）。本例子不存在。</li></ul><h4 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/57c3e621/bd0f2fcb.png" width=""/> </div><br></p><ul><li>用于描述接口或者类中声明的变量，包括类级变量和实例级变量，但不包括方法内部声明的局部变量；它不会列出从父类和超类继承而来的字段；</li><li>0x0001表示这个类只有一个字段表数据；</li><li>字段修饰符放在access_flag中，是一个u2的数据类型，0x0002表示为private的属性；</li><li>字段名称name_index，是一个u2的数据类型，0x0005表示该属性的名称为常量池的第5项；</li><li>字段描述符descriptor_index，是一个u2的数据类型，0x0006表示该属性的描述符为常量池的第6项，其值“I”表示类型为整形；</li><li>字段属性计算器和属性集合：0x0000表示该例子中不存在；</li></ul><h4 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h4><ul><li>和字段表集合的方式几乎一样；</li><li>方法里面的代码经过编译器编译成字节码指令后，存放在方法属性表集合中一个名为Code的属性里面；</li><li>0x0002表示这个类有两个方法表数据，分别是编译器添加的实例构造器<init>和源码中的方式inc()；</li><li>第一个方法的访问标志是0x0001（public方法），名称索引值为0x0007（常量池第7项，“<init>”），描述符索引值为0x0008（常量池第8项，“()V”），属性表计算器为0x0001（有一项属性），属性名称索引为0x0009（常量池第9项，“Code”）；</li><li>根据“6.3.7.1 Code属性”说明，属性值的长度为23（0x0000001D表示29，但需要减去属性名称索引和属性长度固定的6个字节长度），操作数栈深度的最大值为1（0x0001，虚拟机运行时根据这个值来分配栈帧中操作栈深度），局部变量表所需要的存储空间为1个Slot（0x0001，Slot是内存分配的最小单位），字节码长度为5（0x00000005），分别为2A（aload_0，将第0个Slot中为reference类型的本地变量推送到操作数栈顶）、B7（invokespecial，以栈顶的reference类型的数据所指向的对象作为方法接收者，调用此对象的实例构造器方法、private方法或者它父类的方法，后面接着一个u2的参数指向常量池的方法引用）、0x0001（表示常量池的第1项，即Object类的<init>方法）、B1（对应的指令为return，返回值为void）；显式异常表为空（0x0000，计数器为0）；该Code属性还内嵌1个属性（0x0001），属性的名称索引为0x000A（即“LineNumberTable”属性，用于记录对应的代码行数），该内嵌属性的长度为6（0x00000006），对应的行数信息为源码的第3行（0x000100000003）；</li><li>第二个方法的访问标志是0x0001（public方法），名称索引值为0x000B（常量池第11项，“inc”），描述符索引值为0x000C（常量池第12项，“()I”），属性表计算器为0x0001（有一项属性），属性名称索引为0x0009（常量池第9项，“Code”）；</li><li>根据“6.3.7.1 Code属性”说明，属性值的长度为25（0x0000001F表示31，但需要减去属性名称索引和属性长度固定的6个字节长度），操作数栈深度的最大值为2（0x0002），局部变量表所需要的存储空间为1个Slot（0x0001），字节码长度为7（0x00000007），分别为2A（aload_0）、B4（getfield，后面接着一个u2的参数指向常量池的属性引用）、0x0002（表示常量池的第2项，即TestClass类的m属性）、04（对应的指令为iconst_1）、60（对应的指令为iadd，整形求和）、AC（对应的指令为ireturn，返回值为整形）；显式异常表为空（0x0000，计数器为0）；该Code属性还内嵌1个属性（0x0001），属性的名称索引为0x000A（即“LineNumberTable”属性，用于记录对应的代码行数），该内嵌属性的长度为6（0x00000006），对应的行数信息为源码的第8行（0x000100000008）；</li></ul><h4 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h4><ul><li>在Class文件、字段表、方法表都可以携带自己的属性表集合；</li><li>属性表集合的限制较为宽松，不再要求严格的顺序，只要属性名不重复即可；</li><li>以下是Java虚拟机规范里预定义的虚拟机实现应当能识别的属性：</li></ul><p><div align="center"> <img src="http://pic.yupoo.com/meandni/8f0a69c4/90a97e5a.png" width=""/> </div><br></p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/4faf2ec0/e70f3e68.png" width=""/> </div><br></p><p>虚拟机规范预定义的属性2</p><ul><li>接着我们的例子的Class文件还有最后一段：0x0001表示该Class有一个属性，0x000D表示属性名索引为第13项（对应“SourceFile”），0x00000002表示该属性长度为2，0x000E表示该类的SourceFile名称为第14项（对应“TestClass.java”）。</li></ul><h5 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h5><p>Java程序方法体中的代码经过javac编译后，字节码指令存放在Code属性，其属性表结构如下：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/c7da9cd4/f4e72867.png" width=""/> </div><br></p><h5 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h5><p>方法描述时throws关键字后面列举的异常，和Code属性里的异常表不同。其属性表结构如下：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/c92bfd15/ce2d3cf7.png" width=""/> </div><br></p><h5 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h5><p>用于描述Java源码行号与字节码行号之间的对应关系，它不是必须的，可以通过javac -g:none取消该信息。没有该信息的影响是运行时抛异常不会显示出错的行号，在代码调试时无法按照源码行来设置断点。</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/63fd6dbe/c879e713.png" width=""/> </div><br></p><h5 id="LocalVariableTable属性"><a href="#LocalVariableTable属性" class="headerlink" title="LocalVariableTable属性"></a>LocalVariableTable属性</h5><p>用于描述栈帧中局部变量与Java源码中定义的变量之间的关系，它不是运行时必须的，可以通过javac -g:none取消该信息。如果没有这个属性，所有的参数名称都会丢失，取之以arg0、arg1这样的占位符来替代。</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/547e1b38/aa184bbf.png" width=""/> </div><br></p><p>其中local_variable_info项代表了一个栈帧与源码中局部变量的关联，如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/3709321-ff864df8cdb95d59.png?imageMogr2/auto-orient/" alt="img"></p><h5 id="SourceFile属性"><a href="#SourceFile属性" class="headerlink" title="SourceFile属性"></a>SourceFile属性</h5><p>用于记录生成这个Class的源码文件名称，这个属性也是可选的。</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-0433c421ea6631bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/888/format/webp" alt="img"></p><h5 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h5><p>作用是通知虚拟机自动为静态变量赋值，只有被static关键字修饰的变量才可以用这个属性。对于非static类型的变量的赋值是在实例构造器<init>方法中进行的；而对于类变量有两种方式：在类构造器<clinit>方法中或者使用ConstantValue属性。目前Sun javac编译器的选择是：同时使用final和static修饰的变量且为基本数据类型或String类型使用ConstantValue属性初始化，否则使用<clinit>初始化。</p><p><img src="https://upload-images.jianshu.io/upload_images/3709321-0433c421ea6631bd.png?imageMogr2/auto-orient/" alt="ConstantValue属性"></p><h5 id="InnerClass属性"><a href="#InnerClass属性" class="headerlink" title="InnerClass属性"></a>InnerClass属性</h5><p>用于记录内部类与宿主类之间的关联。</p><p><img src="https://upload-images.jianshu.io/upload_images/3709321-084cd6c878ad90e3.png?imageMogr2/auto-orient/" alt="InnerClass属性"></p><p>其中number_of_class代表需要记录多少个内部类信息，每个内部类的信息都由一个inner_class_info表进行描述。</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-e4ed4191050b93ae.png" alt="inner_class_info表的结构"></p><h5 id="Deprecated及Synthetic属性"><a href="#Deprecated及Synthetic属性" class="headerlink" title="Deprecated及Synthetic属性"></a>Deprecated及Synthetic属性</h5><p>Deprecated（不推荐使用）和Synthetic（不是由Java源码直接产生编译器自行添加的，有两个例外是实例构造器<init>和类构造器<clinit>）这两个属性都属于布尔属性，只存在有和没有的区别，没有属性值的概念。在属性结构中attribute_length的数据值必须为0x00000000。</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-7eee2ac1a903c987.png" alt="Deprecated及Synthetic属性"></p><h5 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h5><p>这是一个复杂的变长属性，位于Code属性的属性表中。这个属性会在虚拟机类加载的字节码验证阶段被新类型检查验证器使用，目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器。</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-ffb7cc6ecb3d041b.png" alt="StackMapTable属性"></p><h5 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h5><p>一个可选的定长属性，在JDK 1.5发布后增加的，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量或参数化类型，则Signature属性会为它记录泛型签名信息。这主要是因为Java的泛型采用的是擦除法实现的伪泛型，在字节码中泛型信息编译之后统统被擦除，在运行期无法将泛型类型与用户定义的普通类型同等对待。通过Signature属性，Java的反射API能够获取泛型类型。</p><p><img src="https:////upload-images.jianshu.io/upload_images/3709321-1412b798df574705.png" alt="Signature属性"></p><h5 id="BootstrapMethods属性"><a href="#BootstrapMethods属性" class="headerlink" title="BootstrapMethods属性"></a>BootstrapMethods属性</h5><p>一个复杂的变长属性，位于类文件的属性表中，用于保存invokedynamic指令引用的引导方法限定符。</p><h1 id="字节码指令简介"><a href="#字节码指令简介" class="headerlink" title="字节码指令简介"></a>字节码指令简介</h1><p>Java虚拟机的指令由一个字节长度的、代表着特定操作含义的数字（操作码）以及跟随其后的零至多个代表此操作所需参数（称为操作数）而构成。由于Java虚拟机采用面向操作数栈而不是寄存器的架构，所以大多数的指令都不包含操作数，只有一个操作码。</p><p>在指令集中大多数的指令都包含了其操作所对应的数据类型信息，如iload指令用于从局部变量表中加载int类型的数据到操作数栈中。</p><ul><li>加载和存储指令：iload/iload_<n>等（加载局部变量到操作栈）、istore/istore_<n>等（从操作数栈存储到局部变量表）、bipush/sipush/ldc/iconst_<n>（加载常量到操作数栈）、wide（扩充局部变量表访问索引）；</li><li>运算指令：没有直接支持byte、short、char和boolean类型的算术指令而采用int代替；iadd/isub/imul/idiv加减乘除、irem求余、ineg取反、ishl/ishr位移、ior按位或、iand按位与、ixor按位异或、iinc局部变量自增、dcmpg/dcmpl比较；</li><li>类型转换指令：i2b/i2c/i2s/l2i/f2i/f2l/d2i/d2l/d2f；</li><li>对象创建与访问指令：new创建类实例、newarray/anewarray/multianewarray创建数组、getfield/putfield/getstatic/putstatic访问类字段或实例字段、baload/iaload/aaload把一个数组元素加载到操作数栈、bastore/iastore/aastore将一个操作数栈的值存储到数组元素中、arraylength取数组长度、instanceof/checkcast检查类实例类型；</li><li>操作数栈管理指令：pop/pop2一个或两个元素出栈、dup/dup2复制栈顶一个或两个数组并将复制值或双份复制值重新压力栈顶、swap交互栈顶两个数值；</li><li>控制转移指令：ifeq/iflt/ifnull条件分支、tableswitch/lookupswitch复合条件分支、goto/jsr/ret无条件分支；</li><li>方法调用和返回指令：invokevirtual/invokeinterface/invokespecial/invokestatic/invokedynamic方法调用、ireturn/lreturn/areturn/return方法返回；</li><li>异常处理指令：athrow</li><li>同步指令：monitorenter/monitorexit</li></ul><h1 id="公有设计和私有实现"><a href="#公有设计和私有实现" class="headerlink" title="公有设计和私有实现"></a>公有设计和私有实现</h1><ul><li>Java虚拟机的实现必须能够读取Class文件并精确实现包含在其中的Java虚拟机代码的含义；</li><li>但一个优秀的虚拟机实现，通常会在满足虚拟机规范的约束下具体实现做出修改和优化；</li><li>虚拟机实现的方式主要有两种：将输入的Java虚拟机代码在加载或执行时翻译成另外一种虚拟机的指令集或宿主主机CPU的本地指令集。</li></ul><h1 id="Class文件结构的发展"><a href="#Class文件结构的发展" class="headerlink" title="Class文件结构的发展"></a>Class文件结构的发展</h1><ul><li>Class文件结构一直比较稳定，主要的改进集中向访问标志、属性表这些可扩展的数据结构中添加内容；</li><li>Class文件格式所具备的平台中立、紧凑、稳定和可扩展的特点，是Java技术体系实现平台无关、语言无关两项特性的重要支柱；</li></ul><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><p>本章详细讲解了Class文件结构的各个部分，通过一个实例演示了Class的数据是如何存储和访问的，后面的章节将以动态的、运行时的角度去看看字节码在虚拟机执行引擎是怎样被解析执行的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机——JVM高级特性与最佳实践》－周志明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战中学习Flutter2：打造一款通用的APPUI结构，从此走上人生巅峰！</title>
      <link href="/2019/01/12/flutter-practice2/"/>
      <url>/2019/01/12/flutter-practice2/</url>
      
        <content type="html"><![CDATA[<p>打造一款通用的AppUI结构，包括登录、注册、首页及各中共用部分，最后能够构成一款完整的APP，目前还在完善，希望大家一起加入。</p><a id="more"></a><p>引用我在<a href="https://github.com/MeandNi/AndroidEfficientBaseUtils" target="_blank" rel="noopener">AndroidEfficientBaseUtils</a>说过的话，相当于给你一个完完整整地漂亮的盒子，你只需把自己需要的东西放进去就好。而且这是跨平台的呀。</p><p><img src="https://github.com/MeandNi/flutter_commonApp/raw/master/show/appshow.jpg" alt=""></p><h2 id="结构清单"><a href="#结构清单" class="headerlink" title="结构清单"></a>结构清单</h2><ul><li>[x] Welcome - 首页</li><li>[x] Login - 登录</li><li>[ ] Register - 注册</li><li>[x] Home - 首页</li><li>[ ] Personal information - 个人信息</li><li>[ ] ….</li></ul><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><ul><li>Yangjiakang, <a href="https://github.com/MeandNi/flutter_commonApp" target="_blank" rel="noopener"><strong>MeandNi</strong></a></li><li><p>….</p></li><li><p>相信这一套结构可以适用于大部分App（当然自己要根据需求修改。），这里追求的是通用而不是花哨的效果。</p></li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/MeandNi/flutter_commonApp" target="_blank" rel="noopener">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解Java虚拟机》笔记3——7种垃圾收集器</title>
      <link href="/2019/01/11/jvm_note3/"/>
      <url>/2019/01/11/jvm_note3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://meandni.com/2019/01/05/winter_vacation/">2019大三的寒假计划</a>——利用在公司每天早起的时间读书，第一本是周志明老师的《深入理解Java虚拟机——JVM高级特性与最佳实践》，这一系列是通过对原文的拜读与自己理解加上网络上的资料文章整理出的读书笔记。</p></blockquote><a id="more"></a><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。**Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。接下来讨论的收集器基于JDK1.7 Update 14 之后的HotSpot虚拟机（在此版本中正式提供了商用的G1收集器，之前G1仍处于实验状态），该虚拟机包含的所有收集器如下图所示：</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/e8793494/27df7474.jpg" width=""/> </div><br></p><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；</li><li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li></ul><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h4 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h4><ul><li><strong>并行（Parallel）</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li><li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行。而垃圾收集程序运行在另一个CPU上。</li></ul><h4 id="吞吐量（Throughput）"><a href="#吞吐量（Throughput）" class="headerlink" title="吞吐量（Throughput）"></a>吞吐量（Throughput）</h4><p>吞吐量就是<strong>CPU用于运行用户代码的时间</strong>与<strong>CPU总消耗时间</strong>的比值，即</p><p><strong>吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。</strong></p><p>假设虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p><h4 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h4><ul><li><strong>新生代GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。具体原理见上一篇文章。</li><li><strong>老年代GC（Major GC / Full GC）</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ul><h1 id="各收集器阐述"><a href="#各收集器阐述" class="headerlink" title="各收集器阐述"></a>各收集器阐述</h1><h4 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/5c861f07/b1ac068e.jpg" width=""/> </div><br></p><p>Serial 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 模式下的默认新生代收集器，因为在该应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><h4 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/a5c6e277/481e1ca1.jpg" width=""/> </div><br></p><p>它是 Serial 收集器的多线程版本。</p><p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p><p>默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p><h4 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h4><p>与 ParNew 一样是多线程收集器。</p><p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><h4 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4. Serial Old 收集器"></a>4. Serial Old 收集器</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/14f72c5c/367020d3.jpg" width=""/> </div><br></p><p>是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途：</p><ul><li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ul><h4 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/2d1989e5/6e965e83.jpg" width=""/> </div><br></p><p>是 Parallel Scavenge 收集器的老年代版本。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><h4 id="6-CMS-收集器"><a href="#6-CMS-收集器" class="headerlink" title="6. CMS 收集器"></a>6. CMS 收集器</h4><p><div align="center"> <img src="http://pic.yupoo.com/meandni/14f72c5c/367020d3.jpg" width=""/> </div><br></p><p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程：</p><ul><li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ul><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li></ul><h4 id="7-G1-收集器"><a href="#7-G1-收集器" class="headerlink" title="7. G1 收集器"></a>7. G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/400d294e/1d022e13.png" width="600"/> </div><br></p><p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/5393369d/5f8cbd42.png" width="600"/> </div><br></p><p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><p><div align="center"> <img src="http://pic.yupoo.com/meandni/ce8ef9fc/10c8999f.jpg" width=""/> </div><br></p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点：</p><ul><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">收集器</th><th style="text-align:center">串行、并行or并发</th><th style="text-align:center">新生代/老年代</th><th style="text-align:center">算法</th><th style="text-align:center">目标</th><th>适用场景</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"><strong>Serial</strong></td><td style="text-align:center">串行</td><td style="text-align:center">新生代</td><td style="text-align:center">复制算法</td><td style="text-align:center">响应速度优先</td><td>单CPU环境下的Client模式</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>Serial Old</strong></td><td style="text-align:center">串行</td><td style="text-align:center">老年代</td><td style="text-align:center">标记-整理</td><td style="text-align:center">响应速度优先</td><td>单CPU环境下的Client模式、CMS的后备预案</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>ParNew</strong></td><td style="text-align:center">并行</td><td style="text-align:center">新生代</td><td style="text-align:center">复制算法</td><td style="text-align:center">响应速度优先</td><td>多CPU环境时在Server模式下与CMS配合</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>Parallel Scavenge</strong></td><td style="text-align:center">并行</td><td style="text-align:center">新生代</td><td style="text-align:center">复制算法</td><td style="text-align:center">吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>Parallel Old</strong></td><td style="text-align:center">并行</td><td style="text-align:center">老年代</td><td style="text-align:center">标记-整理</td><td style="text-align:center">吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>CMS</strong></td><td style="text-align:center">并发</td><td style="text-align:center">老年代</td><td style="text-align:center">标记-清除</td><td style="text-align:center">响应速度优先</td><td>集中在互联网站或B/S系统服务端上的Java应用</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>G1</strong></td><td style="text-align:center">并发</td><td style="text-align:center">both</td><td style="text-align:center">标记-整理+复制算法</td><td style="text-align:center">响应速度优先</td><td>面向服务端应用，将来替换CMS</td><td></td></tr></tbody></table></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机——JVM高级特性与最佳实践》－周志明</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md" target="_blank" rel="noopener">CS-Note——Java：java虚拟机</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解java虚拟机》笔记2——GC算法与内存分配策略</title>
      <link href="/2019/01/11/jvm_note2/"/>
      <url>/2019/01/11/jvm_note2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://meandni.com/2019/01/05/winter_vacation/">2019大三的寒假计划</a>——利用在公司每天早起的时间读书，第一本是周志明老师的《深入理解Java虚拟机——JVM高级特性与最佳实践》，这一系列是通过对原文的拜读与自己理解加上网络上的资料文章整理出的读书笔记。</p></blockquote><a id="more"></a><p>说起<strong>垃圾收集（Garbage Collection, GC）</strong>，想必大家都不陌生，它是JVM实现里非常重要的一环，JVM成熟的内存动态分配与回收技术使Java（当然还有其他运行在JVM上的语言，如Scala等）程序员在提升开发效率上获得了惊人的便利。理解GC，对于理解JVM和Java语言有着非常重要的作用。并且当我们需要排查各种内存溢出、内存泄漏问题时，当垃圾收集称为系统达到更高并发量的瓶颈时，只有深入理解GC和内存分配，才能对这些“自动化”的技术实施必要的监控和调节。</p><p>在Java的运行时数据区中，程序计数器、虚拟机栈、本地方法栈三个区域都是线程私有的，随线程而生，随线程而灭，在方法结束或线程结束时，内存自然就跟着回收了，不需要过多考虑回收的问题。而<strong>Java堆</strong>和<strong>方法区</strong>则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾回收器关注的是这部分内存，后续讨论的“内存”分配回收也是指这一块，尤其需要注意。</p><p>GC主要回答了以下三个问题：</p><ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul><p>这三个问题的具体解决方案，也就是本文接下来要讲解的内容。</p><h1 id="对象已死吗？"><a href="#对象已死吗？" class="headerlink" title="对象已死吗？"></a>对象已死吗？</h1><p>在堆里存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，首要的就是确定这些对象中哪些还“存活”着，哪些已经“死去”（即不可能再被任何途径使用的对象）。</p><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>引用计数算法是在JVM中被摒弃的一种对象存活判定算法，不过它也有一些知名的应用场景（如Python、FlashPlayer），因此在这里也简单介绍一下。</p><p>用引用计数器判断对象是否存活的过程是这样的：<strong>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。</strong></p><p>引用计数算法的实现简单，判定效率也很高，大部分情况下是一个不错的算法。它没有被JVM采用的原因是<strong>它很难解决对象之间循环引用的问题</strong>。例如以下例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * testGC()方法执行后，objA和objB会不会被GC呢？ </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个成员属性的唯一意义就是占点内存，以便在能在GC日志中看清楚是否有回收过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bigSize = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        objA.instance = objB;</span><br><span class="line">        objB.instance = objA;</span><br><span class="line"></span><br><span class="line">        objA = <span class="keyword">null</span>;</span><br><span class="line">        objB = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设在这行发生GC，objA和objB是否能被回收？</span></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这段代码中，对象objA 和对象objB都有字段instance，赋值令<code>objA.instance = objB;</code>、<code>objB.instance = objA;</code>，除此之外，这两个对象再无引用。如果JVM采用引用计数算法来管理内存，<strong>这两个对象不可能再被访问，但是他们互相引用着对方，导致它们引用计数不为0，所以引用计数器无法通知GC收集器回收它们</strong>。</p><p>而事实上执行这段代码，objA和objB是可以被回收的，下面一节将介绍JVM实际使用的存活判定算法。</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>在主流商用程序语言的实现中，都是通过<strong>可达性分析（tracing GC）</strong>来判定对象是否存活的。此算法的基本思路是：通过一系列的称为<strong>“GC Roots”</strong>的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为<strong>引用链（Reference Chain）</strong>，当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是GC Roots 到这个对象不可达）时，则证明此对象时不可用的。用下图来加以说明：</p><center><img src="https://pic.yupoo.com/crowhawk/5d0246eb/0635cbe8.png"></center><p>上图中，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。</p><p>可以看到，GC Roots在对象图之外，是特别定义的<strong>“起点”</strong>，不可能被对象图内的对象所引用。</p><p>准确地说，<strong>GC Roots其实不是一组对象，而通常是一组特别管理的指向引用类型对象的指针</strong>，这些指针是tracing GC的trace的起点。它们不是对象图里的对象，对象也不可能引用到这些“外部”的指针，这也是tracing GC算法不会出现循环引用问题的基本保证。因此也容易得出，<strong>只有引用类型的变量才被认为是Roots，值类型的变量永远不被认为是Roots</strong>。只有深刻理解引用类型和值类型的内存分配和管理的不同，才能知道为什么root只能是引用类型。</p><p>在Java中，可作为GC Roots的对象包括以下几种：</p><ul><li><strong>虚拟机栈（栈帧中的局部变量表，Local Variable Table）</strong>中引用的对象。</li><li><strong>方法区中<em>类静态属性</em></strong>引用的对象。</li><li><strong>方法区中<em>常量</em></strong>引用的对象。</li><li><strong>本地方法栈中JNI（即一般说的Native方法）</strong>引用的对象。</li></ul><p>看到这里你可能要问，选择这些对象的依据是什么呢？</p><p>可以概括得出，可作为GC Roots的节点主要在<strong>全局性的引用</strong>与<strong>执行上下文</strong>中。要明确的是，tracing gc必须<strong>以当前存活的对象集为Roots</strong>，因此必须选取确定存活的引用类型对象。GC管理的区域是Java堆，<strong>虚拟机栈</strong>、<strong>方法区</strong>和<strong>本地方法栈</strong>不被GC所管理，因此选用这些区域内引用的对象作为GC Roots，是<strong>不会被GC所回收</strong>的。其中虚拟机栈和本地方法栈都是线程私有的内存区域，只要线程没有终止，就能确保它们中引用的对象的存活。而方法区中类静态属性引用的对象是显然存活的。常量引用的对象在当前可能存活，因此，也可能是GC roots的一部分。</p><h4 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h4><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。在JDK1.2之前，Java中的应用定义跟很传统，如若reference类型的数据引用了一块内存地址，则这块内存代表一个引用，这样一个对象仅有被引用或没有被引用两种状态，对于一些“<strong>食之无味，弃之可惜</strong>”的无法描述。</p><p>JDK1.2之后，Java 提供了四种强度不同的引用类型。</p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>被强引用关联的对象不会被回收。</p><p>使用 new 一个新对象的方式来创建强引用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p><p>使用 SoftReference 类来创建软引用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><p>使用 WeakReference 类来实现弱引用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。</p><p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来实现虚引用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="两次标记与-finalize-方法"><a href="#两次标记与-finalize-方法" class="headerlink" title="两次标记与 finalize()方法"></a>两次标记与 finalize()方法</h4><p>即使在可达性分析算法中不可达的对象，也不是一定会死亡的，它们暂时都处于<strong>“缓刑”</strong>阶段，要真正宣告一个对象“死亡”，至少要经历两次标记过程：</p><p>如果对象在进行可达性分析后发现没有与 GC Roots相连接的引用链，那它将会被<strong>第一次标记</strong>并且进行一次筛选，筛选的条件是<strong>此对象是否有必要执行<code>finaliza()</code>方法</strong>。当对象没有覆盖<code>finaliza()</code>方法，或者<code>finaliza()</code>方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行<code>finaliza()</code>方法，那么此对象将会放置在一个叫做 F-Queue 的队列中，并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发此方法，但并不承诺会等待它运行结束，原因是：如果一个对象在<code>finaliza()</code>方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能导致F-Queue 队列中的其它对象永久处于等待，甚至导致整个内存回收系统崩溃。</p><p><code>finaliza()</code>方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue 队列中的对象进行<strong>第二次小规模的标记</strong>。如果对象想在<code>finaliza()</code>方法中成功拯救自己，<strong>只要重新与引用链上的任何一个对象建立关联即可，例如把自己（this关键字）赋值给某个类变量或者对象的成员变量，这样在第二次标记时它将被移出“即将回收”的集合</strong>；如果对象这时候还没有逃脱，基本上它就真的被回收了。</p><p>值得注意的是，如果代码中有两段一模一样的代码段，执行结果却是一次逃脱成功，一次失败。这是因为任何一个对象的<code>finalize()</code>方法都只会被系统调用一次，如果对象面临下一次回收，它的<code>finalize()</code>方法不会再被执行，因此第二次逃脱行动失败。</p><p>需要说明的是，使用<code>finalize()</code>方法来“拯救”对象是不值得提倡的，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做的一个妥协。<strong>它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。</strong><code>finalize()</code>能做的工作，使用<code>try-finally</code>或者其它方法都更适合、及时，所以笔者建议大家可以忘掉此方法存在。</p><h4 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h4><p>很多人认为方法区没有垃圾回收，Java虚拟机规范中确实说过不要求，而且在方法区中进行垃圾收集的“性价比”较低：在堆中，尤其是新生代，常规应用进行一次垃圾收集可以回收70%~95%的空间，而方法区的效率远低于此。在JDK 1.8中，JVM摒弃了永久代，用元空间来作为方法区的实现，下面介绍的将是元空间的垃圾回收。</p><p>元空间的内存管理由<strong>元空间虚拟机</strong>来完成。先前，对于类的元数据我们需要不同的垃圾回收器进行处理，现在只需要执行元空间虚拟机的C++代码即可完成。<strong>在元空间中，类和其元数据的生命周期</strong>和<strong>其对应的类加载器</strong>是相同的。话句话说，<strong>只要类加载器存活，其加载的类的元数据也是存活的</strong>，因而不会被回收掉。</p><p>我们从行文到现在提到的元空间稍微有点不严谨。准确的来说，<strong>每一个<em>类加载器的存储区域</em>都称作一个元空间，所有的元空间合在一起就是我们一直说的元空间。</strong>当一个类加载器被垃圾回收器标记为不再存活，其对应的元空间会被回收。在元空间的回收过程中没有重定位和压缩等操作。但是元空间内的元数据会进行扫描来确定Java引用。</p><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><p>本节将介绍几种垃圾收集算法的思想及其发展过程，具体的实现将在稍后介绍。</p><h4 id="标记－清除（Mark-Sweep）算法"><a href="#标记－清除（Mark-Sweep）算法" class="headerlink" title="标记－清除（Mark-Sweep）算法"></a>标记－清除（Mark-Sweep）算法</h4><p><strong>标记－清除（Mark-Sweep）</strong>算法是最基础的垃圾收集算法，后续的收集算法都是基于它的思路并对其不足进行改进而得到的。顾名思义，算法分成“标记”、“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象，标记过程在前一节讲述对象标记判定时已经讲过了。</p><p>标记－清除算法的不足主要有以下两点：</p><ul><li><strong>空间问题</strong>，标记清除之后会产生大量不连续的<strong>内存碎片</strong>，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不触发另一次垃圾收集动作。</li><li><strong>效率问题</strong>，因为内存碎片的存在，操作会变得更加费时，因为查找下一个可用空闲块已不再是一个简单操作。</li></ul><p>标记－清除算法的执行过程如下图所示：</p><center><img src="https://pic.yupoo.com/crowhawk/5a3494ae/efc6204a.png"></center><h4 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h4><p>为了解决标记-清除算法的效率问题，一种称为<strong>“复制”（Copying）</strong>的收集算法出现了，思想为：它<strong>将可用内存按容量分成大小相等的两块</strong>，每次只使用其中的一块。<strong>当这一块内存用完，就将还存活着的对象复制到另一块上面</strong>，然后再把已使用过的内存空间一次清理掉。</p><p>这样做使得<strong>每次都是对整个半区进行内存回收</strong>，内存分配时也就<strong>不用考虑内存碎片</strong>等复杂情况，只要<strong>移动堆顶指针，按顺序分配内存</strong>即可，实现简单，运行高效。只是这种算法的代价是<strong>将内存缩小为原来的一半</strong>，代价可能过高了。复制算法的执行过程如下图所示：</p><center><img src="https://pic.yupoo.com/crowhawk/62b8a3a8/f1cada8a.png"></center><big>**Minor GC与复制算法**</big><p><strong>现在的商业虚拟机都使用复制算法来回收新生代。</strong>新生代的GC又叫<strong>“Minor GC”</strong>，IBM公司的专门研究表明：新生代中的对象98%是<strong>“朝生夕死”</strong>的，所以Minor GC非常频繁，一般回收速度也比较快，同时<strong>“朝生夕死”</strong>的特性也使得Minor GC使用复制算法时不需要按照1:1的比例来划分新生代内存空间。</p><big>**Minor GC过程**</big><p>事实上，新生代将内存分为<strong>一块较大的Eden空间</strong>和<strong>两块较小的Survivor空间（From Survivor和To Survivor）</strong>，<strong>每次Minor GC都使用Eden和From Survivor</strong>，当回收时，<strong>将Eden和From Survivor中还存活着的对象都一次性地复制到另外一块To Survivor空间上</strong>，最后清理掉Eden和刚使用的Survivor空间。<strong>一次Minor GC结束的时候</strong>，<strong>Eden</strong>空间和<strong>From Survivor</strong>空间都是空的，而<strong>To Survivor</strong>空间里面存储着存活的对象。<strong>在下次MinorGC的时候</strong>，两个Survivor空间交换他们的标签，现在是空的<strong>“From” Survivor</strong>标记成为<strong>“To”</strong>，<strong>“To” Survivor</strong>标记为<strong>“From”</strong>。因此，在MinorGC结束的时候，Eden空间是空的，两个Survivor空间中的一个是空的，而另一个存储着存活的对象。</p><p>HotSpot虚拟机默认的<strong>Eden : Survivor</strong>的比例是<strong>8 : 1</strong>，由于一共有两块Survivor，所以<strong>每次新生代中可用内存空间为整个新生代容量的90%（80%＋10%）</strong>，只有10%的容量会被“浪费”。</p><big>**分配担保**</big><p>上文说的98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，<strong>当Survivor空间不够用时</strong>，需要依赖<strong>老年代内存</strong>进行<strong>分配担保（Handle Promotion）</strong>。如果另外一块Survivor上没有足够空间存放上一次新生代收集下来的存活对象，这些对象将直接通过分配担保机制进入老年代。</p><h5 id="标记－整理（Mark-Compact）算法"><a href="#标记－整理（Mark-Compact）算法" class="headerlink" title="标记－整理（Mark-Compact）算法"></a>标记－整理（Mark-Compact）算法</h5><p>复制算法在对象存活率较高时要进行较多的复制操作，效率将会变低。更关键的是：如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在<strong>老年代一般不能直接选用复制算法</strong>。</p><p>根据老年代的特点，<strong>标记－整理（Mark-Compact）</strong>算法被提出来，主要思想为：此算法的标记过程与<strong>标记－清除</strong>算法一样，但后续步骤不是直接对可回收对象进行清理，而是<strong>让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</strong>具体示意图如下所示：</p><center><img src="https://pic.yupoo.com/crowhawk/d046244a/d3d3277f.png"></center><h5 id="分代收集（Generational-Collection）算法"><a href="#分代收集（Generational-Collection）算法" class="headerlink" title="分代收集（Generational Collection）算法"></a>分代收集（Generational Collection）算法</h5><p>当前商业虚拟机的垃圾收集都采用<strong>分代收集（Generational Collection）算法</strong>，此算法相较于前几种没有什么新的特征，主要思想为：根据对象存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适合的收集算法：</p><ul><li><strong>新生代</strong><br>在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集。</li><li><strong>老年代</strong><br>在老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用<strong>“标记-清除”</strong>或<strong>“标记-整理”</strong>算法来进行回收。</li></ul><h1 id="HotSpot的算法实现"><a href="#HotSpot的算法实现" class="headerlink" title="HotSpot的算法实现"></a>HotSpot的算法实现</h1><p>前面两大节主要从理论上介绍了对象存活判定算法和垃圾收集算法，而在HotSpot虚拟机上实现这些算法时，必须对算法的执行效率有严格的考量，才能保证虚拟机高效运行。</p><h4 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h4><p>从可达性分析中<strong>从GC Roots节点找引用链</strong>这个操作为例，可作为GC Roots的节点主要在<strong>全局性的引用</strong>（例如常量或类静态属性）与<strong>执行上下文</strong>（例如栈帧中的局部变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。</p><big>**GC停顿（"Stop The World"）**</big><p>另外，可达性分析工作必须在一个<strong>能确保一致性的快照</strong>中进行——这里<strong>“一致性”</strong>的意思是指<strong>在整个分析期间整个执行系统看起来就像被冻结在某个时间点上</strong>，不可以出现分析过程中对象引用关系还在不断变化的情况，这是保证分析结果准确性的基础。这点是导致GC进行时必须<strong>停顿所有Java执行线程</strong>（Sun将这件事情称为<strong>“Stop The World”</strong>）的其中一个重要原因，即使是在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p><big>**准确式GC与OopMap**</big><p>由于目前的主流Java虚拟机使用的都是<strong>准确式GC（即使用准确式内存管理，虚拟机可用知道内存中某个位置的数据具体是什么类型）</strong>，所以当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为<strong>OopMap</strong>的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把<strong>对象内什么偏移量上是什么类型的数据</strong>计算出来，在JIT编译过程中，也会在特定的位置记录下<strong>栈和寄存器中哪些位置是引用</strong>。这样，GC在扫描时就可以直接得知这些信息了。</p><h4 id="安全点（Safepoint）——进行GC时程序停顿的位置"><a href="#安全点（Safepoint）——进行GC时程序停顿的位置" class="headerlink" title="安全点（Safepoint）——进行GC时程序停顿的位置"></a>安全点（Safepoint）——进行GC时程序停顿的位置</h4><p>在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，<strong>如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。</strong></p><p>为此，HotSpot选择不为每条指令都生成OopMap，而是只在“特定的位置”记录这些信息，这些位置便被称为<strong>安全点（Safepoint）</strong>。也就是说，<strong>程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停</strong>。Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。所以，安全点的选定基本上是以程序<strong>“是否具有让程序长时间执行的特征”</strong>为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是<strong>指令序列复用</strong>，例如<strong>方法调用</strong>、<strong>循环跳转</strong>、<strong>异常跳转</strong>等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于Sefepoint，另一个需要考虑的问题是如何<strong>在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来</strong>。这里有两种方案可供选择：</p><ul><li><strong>抢先式中断（Preemptive Suspension）</strong><br>抢先式中断不需要线程的执行代码主动去配合，<strong>在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。</strong>现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。</li><li><strong>主动式中断（Voluntary Suspension）</strong>：<br>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地<strong>设置一个标志</strong>，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。<strong>轮询标志的地方和安全点是重合的</strong>，另外<strong>再加上创建对象需要分配内存的地方</strong>。</li></ul><h4 id="安全区域（Safe-Region）"><a href="#安全区域（Safe-Region）" class="headerlink" title="安全区域（Safe Region）"></a>安全区域（Safe Region）</h4><p><strong>Safepoint</strong>机制保证了<strong>程序执行时</strong>，在不太长的时间内就会遇到可进入GC的Safepoint。但是，<strong>程序“不执行”的时候（如线程处于Sleep状态或Blocked状态）</strong>，这时线程无法响应JVM的中断请求，“走到”安全的地方去中断挂起，这时候就需要<strong>安全区域（Safe Region）</strong>来解决。</p><p>安全区域是指<strong>在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。</strong>我们也可以把Safe Region看做是被扩展了的Safepoint。</p><p>在线程执行到Safe Region中的代码时，首先<strong>标识自己已经进入了Safe Region</strong>，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。<strong>在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程）</strong>，如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</p><h1 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h1><p>Java的自动内存管理最终可以归结为自动化地解决了两个问题：</p><ul><li><strong>给对象分配内存</strong></li><li><strong>回收分配给对象的内存</strong></li></ul><p>对象的内存分配通常是在堆上分配（除此以外还有可能经过JIT编译后被拆散为标量类型并间接地栈上分配），对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是固定的，实际取决于垃圾收集器的具体组合以及虚拟机中与内存相关的参数的设置。至于内存回收策略，在上文已经描述得很详尽了。</p><p>下面以使用Serial/Serial Old收集器（将在下一篇文章中讲解）为例，介绍内存分配的策略。</p><h4 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h4><p>大多数情况下，对象在新生代的Eden区中分配。<strong>当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</strong></p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是很长的字符串以及数组。大对象对虚拟机的内存分配来说是一个坏消息（尤其是遇到朝生夕灭的“短命大对象”，写程序时应避免），<strong>经常出现大对象容易导致内存还有不少空间时就提前触发GC以获取足够的连续空间来安置它们</strong>。</p><p>虚拟机提供了一个<strong>-XX:PretenureSizeThreshold</strong>参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是<strong>避免在Eden区及两个Survivor区之间发生大量的内存复制</strong>（新生代采用复制算法回收内存）。</p><h4 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个<strong>对象年龄（Age）计数器</strong>。<strong>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</strong>对象晋升老年代的年龄阈值，可以通过参数<strong>-XX:MaxTenuringThreshold</strong>设置。</p><h4 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h4><p>为了能更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了<strong>MaxTenuringThreshold</strong>才能晋升老年代，<strong>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代</strong>，无须等到<strong>MaxTenuringThreshold</strong>中要求的年龄。</p><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><p><strong>在发生Minor GC之前</strong>，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看<strong>HandlePromotionFailure</strong>设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者<strong>HandlePromotionFailure</strong>设置不允许冒险，那这时也要改为进行一次<strong>Full GC</strong>。</p><p>前面提到过，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此<strong>当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。</strong>与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。</p><p>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致<strong>担保失败（Handle Promotion Failure）</strong>。如果出现了<strong>HandlePromotionFailure</strong>失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将<strong>HandlePromotionFailure</strong>开关打开，避免Full GC过于频繁。</p><h1 id="Full-GC的触发条件"><a href="#Full-GC的触发条件" class="headerlink" title="Full GC的触发条件"></a>Full GC的触发条件</h1><p>对于Minor GC，其触发条件非常简单，当Eden区空间满时，就将触发一次Minor GC。而Full GC则相对复杂，因此本节我们主要介绍Full GC的触发条件。</p><h4 id="调用System-gc"><a href="#调用System-gc" class="headerlink" title="调用System.gc()"></a>调用System.gc()</h4><p>此方法的调用是建议JVM进行Full GC,虽然只是建议而非一定,但很多情况下它会触发 Full GC,从而增加Full GC的频率,也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存，可通过<strong>-XX:+ DisableExplicitGC</strong>来禁止RMI调用System.gc()。</p><h4 id="老年代空间不足"><a href="#老年代空间不足" class="headerlink" title="老年代空间不足"></a>老年代空间不足</h4><p>老年代空间不足的常见场景为前文所讲的<strong>大对象直接进入老年代</strong>、<strong>长期存活的对象进入老年代</strong>等，当执行Full GC后空间仍然不足，则抛出如下错误：<br><code>Java.lang.OutOfMemoryError: Java heap space</code><br>为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p><h4 id="空间分配担保失败"><a href="#空间分配担保失败" class="headerlink" title="空间分配担保失败"></a>空间分配担保失败</h4><p>前文介绍过，使用复制算法的Minor GC需要老年代的内存空间作担保，如果出现了<strong>HandlePromotionFailure</strong>担保失败，则会触发Full GC。</p><h4 id="JDK-1-7及以前的永久代空间不足"><a href="#JDK-1-7及以前的永久代空间不足" class="headerlink" title="JDK 1.7及以前的永久代空间不足"></a>JDK 1.7及以前的永久代空间不足</h4><p>在JDK 1.7及以前，HotSpot虚拟机中的方法区是用永久代实现的，永久代中存放的为一些class的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下也会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：<br><code>java.lang.OutOfMemoryError: PermGen space</code><br>为避免PermGen占满造成Full GC现象，可采用的方法为增大PermGen空间或转为使用CMS GC。</p><p>在JDK 1.8中用元空间替换了永久代作为方法区的实现，元空间是本地内存，因此减少了一种Full GC触发的可能性。</p><h4 id="Concurrent-Mode-Failure"><a href="#Concurrent-Mode-Failure" class="headerlink" title="Concurrent Mode Failure"></a>Concurrent Mode Failure</h4><p>执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足（有时候“空间不足”是CMS GC时当前的浮动垃圾过多导致暂时性的空间不足触发Full GC），便会报<code>Concurrent Mode Failure</code>错误，并触发Full GC。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文简要地介绍了HotSpot虚拟机如何去发起内存回收的问题，也解答了文章开头提出的三个问题中的前两个——“哪些内存需要回收”和“何时回收”，同时对于第三个问题——“如何回收”，在原理层面作出了解答。在下一篇文章中，笔者将通过介绍几种具体的垃圾收集器，来更深入地回答第三个问题。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机——JVM高级特性与最佳实践》－周志明</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md" target="_blank" rel="noopener">CS-Note——Java：java虚拟机</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html" target="_blank" rel="noopener">JVM 垃圾回收器工作原理及使用实例介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解java虚拟机》笔记1——Java内存区域与Java对象</title>
      <link href="/2019/01/10/jvm_note1/"/>
      <url>/2019/01/10/jvm_note1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://meandni.com/2019/01/05/winter_vacation/">2019大三的寒假计划</a>——利用在公司每天早起的时间读书，第一本是周志明老师的《深入理解Java虚拟机——JVM高级特性与最佳实践》，这一系列是通过对原文的拜读与自己理解加上网络上的资料文章整理出的读书笔记。</p></blockquote><a id="more"></a><h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>JVM载执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。具体如下图所示：（其中程序计数器、Java虚拟机栈、本地方法栈为线程私有；Java堆、方法区位线程共享的内存区域。）</p><p><img src="https://pic.yupoo.com/crowhawk/3d24df02/776c8d55.png" alt=""></p><h4 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h4><p><strong>程序计数器（Program Counter Register）</strong>是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。在虚拟机概念模型中，<strong>字节码解释器</strong>工作时就是通过改变计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>程序计数器是一块<strong>“线程私有”</strong>的内存，如上文的图所示，每条线程都有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储。这样设计使得在多线程环境下，线程切换后能恢复到正确的执行位置。</p><p>如果线程正在执行的是一个<strong>Java方法</strong>，这个计数器记录的是正在执行的<strong>虚拟机字节码指令的地址</strong>；若执行的是<strong>Native方法</strong>，则<strong>计数器为空（Undefined）</strong>（因为对于Native方法而言，它的方法体并不是由Java字节码构成的，自然无法应用上述的“字节码指令的地址”的概念）。程序计数器也是唯一一个在Java虚拟机规范中<strong>没有</strong>规定任何<strong>OutOfMemoryError</strong>情况的内存区域。</p><h4 id="Java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#Java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="Java虚拟机栈（Java Virtual Machine Stacks）"></a>Java虚拟机栈（Java Virtual Machine Stacks）</h4><p><strong>Java虚拟机栈（Java Virtual Machine Stacks）</strong>描述的是<strong>Java方法执行的内存模型</strong>：每个方法在执行的同时都会创建一个<strong>栈帧（Stack Frame）</strong>，栈帧中存储着<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。<strong>每一个方法从调用直至执行完成的过程，会对应一个栈帧在虚拟机栈中入栈到出栈的过程。</strong>与程序计数器一样，Java虚拟机栈也是<strong>线程私有</strong>的。</p><p>函数的调用有完美的嵌套关系——调用者的生命期总是长于被调用者的生命期，并且后者在前者的之内。这样，被调用者的局部信息所占空间的分配总是后于调用者的（后入），而其释放则总是先于调用者的（先出），所以正好可以满足栈的LIFO顺序，选用栈这种数据结构来实现调用栈是一种很自然的选择。</p><p><strong>局部变量表</strong>中存放了编译期可知的各种：</p><ul><li><strong>基本数据类型</strong>(boolen、byte、char、short、int、 float、 long、double）</li><li><strong>对象引用</strong>（reference类型，它不等于对象本身，可能是一个指向对象起始地址的指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）</li><li><strong>returnAddress类型</strong>（指向了一条字节码指令的地址）</li></ul><p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余数据类型只占用1个。<strong>局部变量表所需的内存空间在编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>Java虚拟机规范中对这个区域规定了两种异常状况：</p><ul><li><strong>StackOverflowError</strong>：线程请求的栈深度大于虚拟机所允许的深度，将会抛出此异常。</li><li><strong>OutOfMemoryError</strong>：当可动态扩展的虚拟机栈在扩展时无法申请到足够的内存，就会抛出该异常。</li></ul><h4 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h4><p><strong>本地方法栈（Native Method Stack）</strong>与Java虚拟机栈作用很相似，它们的区别在于虚拟机栈为虚拟机执行Java方法（即字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p><p>在虚拟机规范中对本地方法栈中使用的语言、方式和数据结构并无强制规定，因此具体的虚拟机可实现它。甚至<strong>有的虚拟机（Sun HotSpot虚拟机）直接把本地方法栈和虚拟机栈合二为一</strong>。与虚拟机一样，本地方法栈会抛出<strong>StackOverflowError</strong>和<strong>OutOfMemoryError</strong>异常。</p><h4 id="Java堆（Heap）"><a href="#Java堆（Heap）" class="headerlink" title="Java堆（Heap）"></a>Java堆（Heap）</h4><p>对于大多数应用而言，<strong>Java堆（Heap）</strong>是Java虚拟机所管理的内存中最大的一块，它<strong>被所有线程共享的</strong>，在虚拟机启动时创建。此内存区域<strong>唯一的目的</strong>是<strong>存放对象实例</strong>，几乎所有的对象实例都在这里分配内存，且每次分配的空间是<strong>不定长</strong>的。在Heap 中分配一定的内存来保存对象实例，实际上只是保存<strong>对象实例的属性值</strong>，<strong>属性的类型</strong>和<strong>对象本身的类型标记</strong>等，<strong>并不保存对象的方法（方法是指令，保存在Stack中）</strong>,在Heap 中分配一定的内存保存对象实例和对象的序列化比较类似。对象实例在Heap 中分配好以后，需要<strong>在Stack中保存一个4字节的Heap 内存地址</strong>，用来定位该对象实例在Heap 中的位置，便于找到该对象实例。</p><p>Java虚拟机规范中描述道：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展和逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都在堆上分配的定论也并不<strong>“绝对”</strong>了。</p><p>Java堆是垃圾收集器管理的主要区域，因此也被称为<strong>“GC堆（Garbage Collected Heap）”</strong>。从内存回收的角度看内存空间可如下划分：<br><img src="https://pic.yupoo.com/crowhawk/5cf46998/fe5079d3.png" alt=""></p><ul><li><strong>新生代（Young）</strong>： 新生成的对象优先存放在新生代中，新生代对象朝生夕死，存活率很低。在新生代中，常规应用进行一次垃圾收集一般可以回收70% ~ 95% 的空间，回收效率很高。新生代又可细分为<strong>Eden空间</strong>、<strong>From Survivor空间</strong>、<strong>To Survivor空间</strong>，默认比例为8:1:1。它们的具体作用将在下一篇文章讲解GC时介绍。</li><li><strong>老年代（Tenured/Old）</strong>：在新生代中经历了多次（具体看虚拟机配置的阀值）GC后仍然存活下来的对象会进入老年代中。老年代中的对象生命周期较长，存活率比较高，在老年代中进行GC的频率相对而言较低，而且回收的速度也比较慢。</li><li><strong>永久代（Perm）</strong>：永久代存储类信息、常量、静态变量、即时编译器编译后的代码等数据，对这一区域而言，Java虚拟机规范指出可以不进行垃圾收集，一般而言不会进行垃圾回收。</li></ul><p>其中<strong>新生代和老年代组成了Java堆的全部内存区域</strong>，而<strong>永久代不属于堆空间，它在JDK 1.8以前被Sun HotSpot虚拟机用作方法区的实现</strong>，关于方法区的具体内容将在稍后介绍。</p><h4 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h4><p><strong>方法区（Method Area）</strong>与Java堆一样，是各个线程共享的内存区域。<strong>Object Class Data(类定义数据)</strong>是存储在方法区的，此外，<strong>常量</strong>、<strong>静态变量</strong>、<strong>JIT编译后的代码</strong>也存储在方法区。正因为方法区所存储的数据与堆有一种类比关系，所以它还被称为 <strong>Non-Heap</strong>。</p> <big>**JDK 1.8以前的永久代（PermGen）**</big><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集，也就是说，Java虚拟机规范只是规定了方法区的概念和它的作用，并没有规定如何去实现它。<strong>对于JDK 1.8之前的版本，HotSpot虚拟机设计团队选择把GC分代收集扩展至方法区，即用永久代来实现方法区</strong>，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存，能够省去专门为方法区编写内存管理代码的工作。对于其他的虚拟机（如<strong>Oracle JRockit</strong>、<strong>IBM J9</strong>等）来说是不存在永久代的概念的。</p><p>如果运行时有大量的类产生，可能会导致方法区被填满，直至溢出。常见的应用场景如：</p><ul><li>Spring和ORM框架使用CGLib操纵字节码对类进行增强，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载入内存。</li><li>大量JSP或动态产生JSP文件的应用（JSP第一次运行时需要编译为Java类）。</li><li>基于OSGi的应用（即使是同一个类文件，被不同的类加载器加载也会视为不同的类）。<br>……</li></ul><p>这些都会导致方法区溢出，报出<code>java.lang.OutOfMemoryError: PermGen space</code>。</p><big>**JDK 1.8的元空间（Metaspace）—— 书中没有的内容**</big><p>在JDK 1.8中，HotSpot虚拟机设计团队为了促进<strong>HotSpot</strong>与 <strong>JRockit</strong>的融合，修改了方法区的实现，移除了永久代，选择使用<strong>本地化的内存空间</strong>（而不是JVM的内存空间）存放类的元数据，这个空间叫做<strong>元空间（Metaspace）</strong>。</p><p>做了这个改动以后，<code>java.lang.OutOfMemoryError: PermGen</code>的空间问题将不复存在，并且不再需要调整和监控这个内存空间。且虚拟机需要为方法区设计额外的GC策略：如果类元数据的空间占用达到参数<strong>“MaxMetaspaceSize”</strong>设置的值，将会触发对死亡对象和类加载器的垃圾回收。 为了限制垃圾回收的频率和延迟，适当的监控和调优<strong>元空间</strong>是非常有必要的。元空间过多的垃圾收集可能表示类、类加载器内存泄漏或对你的应用程序来说空间太小了。</p><p>元空间的内存管理由<strong>元空间虚拟机</strong>来完成。先前，对于类的元数据我们需要不同的垃圾回收器进行处理，现在只需要执行元空间虚拟机的C++代码即可完成。<strong>在元空间中，类和其元数据的生命周期</strong>和<strong>其对应的类加载器</strong>是相同的。话句话说，<strong>只要类加载器存活，其加载的类的元数据也是存活的</strong>，因而不会被回收掉。</p><p>我们从行文到现在提到的元空间稍微有点不严谨。准确的来说，<strong>每一个<em>类加载器的存储区域</em>都称作一个元空间，所有的元空间合在一起就是我们一直说的元空间。</strong>当一个类加载器被垃圾回收器标记为不再存活，其对应的元空间会被回收。在元空间的回收过程中没有重定位和压缩等操作。但是元空间内的元数据会进行扫描来确定Java引用。</p><p><strong>元空间虚拟机</strong>负责元空间的分配，其采用的形式为<strong>组块分配</strong>。组块的大小因类加载器的类型而异。在元空间虚拟机中存在一个<strong>全局的空闲组块列表</strong>。当一个类加载器需要组块时，它就会从这个全局的组块列表中获取并维持一个自己的组块列表。当一个类加载器不再存活，那么其持有的组块将会被释放，并返回给全局组块列表。类加载器持有的组块又会被分成多个块，每一个块存储一个单元的元信息。组块中的块<strong>是线性分配（指针碰撞分配形式）</strong>。组块分配自内存映射区域。这些全局的虚拟内存映射区域以链表形式连接，一旦某个虚拟内存映射区域清空，这部分内存就会返回给操作系统。</p><center><img src="https://pic.yupoo.com/crowhawk/cdaea117/7bdf00c4.png"></center><p>上图展示的是虚拟内存映射区域如何进行元组块的分配。类加载器1和3表明使用了反射或者为匿名类加载器，他们使用了特定大小组块。 而类加载器2和4根据其内部条目的数量使用小型或者中型的组块。</p><big>**运行时常量池（Runtime Constant Pool）**</big><p><strong>运行时常量池（Runtime Constant Pool）</strong>是方法区的一部分。<strong>Class文件</strong>中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池（Constant Pool Table）</strong>，用于存放编译期生成的各种字面量和符号引用，<strong>这部分内容将在类加载后进入方法区的运行时常量池存放</strong>。</p><p>Java虚拟机对Class文件每一部分（自然包括常量池）的格式有严格规定，每一个字节用于存储那种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行。但<strong>对于运行时常量池，Java虚拟机规范没有做任何有关细节的要求</strong>，不同的提供商实现的虚拟机可以按照自己的需求来实现此内存区域。不过一般而言，除了保存<strong>Class文件中的描述符号引用</strong>外，还会把<strong>翻译出的直接引用</strong>也存储在运行时常量池中。</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备<strong>动态性</strong>，Java语言并不要求常量一定只有编译器才能产生，也就是<strong>并非置入Class文件中的常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中</strong>，此特性被开发人员利用得比较多的便是String类的<code>intern()</code>方法。</p><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p><strong>直接内存（Direct Memory）</strong>并不是虚拟机<strong>运行时数据区</strong>的一部分，也不是Java虚拟机规范中定义的内存区域。但这部分内存也被频繁运用，而却可能导致<strong>OutOfMemoryError</strong>异常出现，所以这里放到一起讲解。</p><p>以<strong>NIO（New Input/Output）</strong>类为例，NIO引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能避免在Java堆和Native堆中来回复制数据，在一些场景里显著提高性能。</p><p>本机直接内存的分配不会受到Java堆大小的限制，但是既然是内存，还是会受到本机总内存（包括RAM以及SWAP区或分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统的限制），从而导致动态扩展时出现<strong>OutOfMemoryError</strong>异常。</p><h1 id="HotSpot中的对象"><a href="#HotSpot中的对象" class="headerlink" title="HotSpot中的对象"></a>HotSpot中的对象</h1><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>Java的对象创建大致有如下四种方式：</p><ul><li><strong>new关键字</strong><br>这应该是我们最常见和最常用最简单的创建对象的方式。</li><li><strong>使用<code>newInstance()</code>方法</strong><br>这里包括<strong>Class</strong>类的<code>newInstance()</code>方法和<strong>Constructor</strong>类的<code>newInstance()</code>方法（前者其实也是调用的后者）。</li><li><strong>使用<code>clone()</code>方法</strong><br>要使用<code>clone()</code>方法我们必须实现实现<strong>Cloneable</strong>接口，用<code>clone()</code>方法创建对象并不会调用任何构造函数。即我们所说的<strong>浅拷贝</strong>。</li><li><strong>反序列化</strong><br>要实现反序列化我们需要让我们的类实现<strong>Serializable</strong>接口。当我们序列化和反序列化一个对象，JVM会给我们创建一个单独的对象，在反序列化时，JVM创建对象并不会调用任何构造函数。即我们所说的<strong>深拷贝</strong>。</li></ul><p>上面的四种创建对象的方法除了第一种使用new指令之外，其他三种都是使用<strong>invokespecial(构造函数的直接调用)</strong>。这里我们只说new创建对象的方式，关于invokespecial的内容将在后续文章中介绍。下面我们来看看当虚拟机遇到new指令的时候对象是如何创建的。</p><big>**1. 类加载检查**</big><p>虚拟机遇到一条new指令时，首先将去检查<strong>这个指令的参数是否能在常量池中定位到一个类的符号引用</strong>，并且检查<strong>这个符号引用代表的类是否已被加载、解析和初始化过的</strong>，如果没有，则必须先执行相应的类加载过程，关于类加载机制和类加载器的详细内容将在后续文章中介绍。</p><big>**2. 分配内存**</big><p>在类加载检查通过后，虚拟机就将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定（如何确定在下一节对象内存布局时再详细讲解），为对象分配空间的任务具体便等同于<strong>从Java堆中划出一块大小确定的内存空间</strong>，可以分如下两种情况讨论：</p><ul><li><strong>Java堆中内存绝对规整</strong><br>所有用过的内存都被放在一边，空闲的内存被放在另一边，<strong>中间放着一个指针作为分界点的指示器</strong>，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为<strong>“指针碰撞”（Bump The Pointer）</strong>。</li><li><strong>Java堆中的内存不规整</strong><br>已被使用的内存和空闲的内存相互交错，那就没有办法简单的进行指针碰撞了，虚拟机就必须<strong>维护一个列表，记录哪些内存块是可用的</strong>，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为<strong>“空闲列表”（Free List）</strong>。</li></ul><p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的<strong>垃圾收集器是否带有压缩整理功能</strong>决定。因此在使用Serial、ParNew等带<strong>Compact</strong>过程的收集器时，系统采用的分配算法是<strong>指针碰撞</strong>，而使用CMS这种基于<strong>Mark-Sweep</strong>算法的收集器时（说明一下，CMS收集器可以通过UseCMSCompactAtFullCollection或CMSFullGCsBeforeCompaction来整理内存），就通常采用<strong>空闲列表</strong>。关于垃圾收集器的具体内容将在下一篇文章中介绍。</p><p>除如何划分可用空间之外，另外一个需要考虑的问题是对象创建在虚拟机中是非常频繁的行为，即使是仅仅修改一个指针所指向的位置，在并发情况下也<strong>并非线程安全</strong>的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存。解决这个问题有如下两个方案：</p><ul><li><strong>对分配内存空间的动作进行同步</strong><br>实际上虚拟机是采用<strong>CAS</strong>配上<strong>失败重试</strong>的方式保证更新操作的原子性。</li><li><strong>把内存分配的动作按照线程划分在不同的空间之中进行</strong><br>即每个线程在Java堆中预先分配一小块内存，称为<strong>本地线程分配缓冲（TLAB ，Thread Local Allocation Buffer）</strong>，哪个线程要分配内存，就在哪个线程的TLAB上分配，只有TLAB用完，分配新的TLAB时才需要同步锁定。虚拟机是否使用TLAB，可以通过<strong>-XX:+/-UseTLAB</strong>参数来设定。</li></ul><big>**3. 初始化**</big><p>内存分配完成之后，虚拟机需要<strong>将分配到的内存空间都初始化为零值（不包括对象头）</strong>，如果使用TLAB的话，这一个工作也可以提前至TLAB分配时进行。这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用。</p><big>**4. 设置对象头**</big><p>接下来，虚拟机要<strong>设置对象的信息</strong>（如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息）并存放在对象的<strong>对象头（Object Header）</strong>中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。关于对象头的具体内容，在下一节再详细介绍。</p><big>**5. 执行`<init>`方法**</big><p>在上面工作都完成之后，在虚拟机的视角来看，一个新的对象已经产生了。但是在Java程序的视角看来，对象创建才刚刚开始——<code>&lt;init&gt;</code>方法还没有执行，所有的字段都还为零值。所以一般来说（由字节码中是否跟随有invokespecial指令所决定），new指令之后会接着执行<code>&lt;init&gt;</code>方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>HotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：<strong>对象头（Header）</strong>、<strong>实例数据（Instance Data）</strong>和<strong>对齐填充（Padding）</strong>。</p><big>**1. 对象头**</big><p>HotSpot虚拟机的对象头包括两部分信息：</p><ul><li><strong>对象自身的运行时数据 “Mark Word”</strong><br>如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为<strong>“Mark Word”</strong>。对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个<strong>非固定的数据结构</strong>以便在极小的空间内存储尽量多的信息，它会<strong>根据对象的状态复用自己的存储空间</strong>。例如在32位的HotSpot虚拟机中对象<strong>未被锁定</strong>的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下图所示：</li></ul><center><img src="https://pic.yupoo.com/crowhawk/4f006175/8be38542.png"></center><ul><li><strong>类型指针</strong><br>类型指针即<strong>对象指向它的类元数据的指针</strong>，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说<strong>查找对象的元数据信息并不一定要经过对象本身</strong>，这点我们在下一节讨论。另外，如果对象是一个Java数组，那在对象头中还必须有一块用于<strong>记录数组长度</strong>的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小。</li></ul><big>**2. 实例数据**</big><p>实例数据是对象真正存储的有效信息，也既是我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义顺序的影响。HotSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers），从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），那子类之中较窄的变量也可能会插入到父类变量的空隙之中。</p><big>**3. 对齐填充**</big><p>对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。对象头部分正好似8字节的倍数（1倍或者2倍），因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>我们的Java程序需要通过<strong>栈上的对象引用（reference）数据（存储在栈上的局部变量表中）</strong>来操作堆上的具体对象。由于reference类型在Java虚拟机规范里面也只规定了是一个指向对象的引用，并没有定义这个引用的具体实现，对象访问方式也是取决于虚拟机实现而定的。主流的访问方式有使用<strong>句柄</strong>和<strong>直接指针</strong>两种。</p><big>**1. 使用句柄访问**</big><p>如果使用句柄访问的话，<strong>Java堆中</strong>将会划分出一块内存来作为<strong>句柄池</strong>，reference中存储的就是对象的句柄地址，而句柄中包含了<strong>对象实例数据</strong>与<strong>类型数据</strong>的各自的<strong>具体地址信息</strong>。如下图所示：</p><p><img src="https://pic.yupoo.com/crowhawk/af3c02ef/bfd967c5.png" alt=""></p><big>**2. 使用直接指针访问**</big><p>如果使用直接指针访问的话，Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如下图所示：</p><p><img src="https://pic.yupoo.com/crowhawk/5c1acdb8/f5086a4d.png" alt=""></p><hr><p>这两种对象访问方式各有优势，下面分别来谈一谈：</p><ul><li><strong>句柄</strong><br>使用句柄访问的最大好处就是<strong>reference中存储的是稳定的句柄地址</strong>，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时<strong>只会改变句柄中的实例数据指针，而reference本身不需要被修改</strong>。</li><li><strong>直接指针</strong><br>使用直接指针来访问最大的好处就是<strong>速度更快</strong>，它<strong>节省了一次指针定位的时间开销</strong>，由于对象访问的在Java中非常频繁，因此这类开销积小成多也是一项 非常可观的执行成本。从上一部分讲解的对象内存布局可以看出，<strong>HotSpot是使用直接指针进行对象访问的</strong>，不过在整个软件开发的范围来 看，各种语言、框架中使用句柄来访问的情况也十分常见。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机——JVM高级特性与最佳实践》－周志明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年寒假计划</title>
      <link href="/2019/01/05/winter_vacation/"/>
      <url>/2019/01/05/winter_vacation/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><ul><li>[x] 细读《Android 进阶之光》</li><li>[x] 细读《Android 群英传》</li><li>[x] 读《Android 开发艺术探索》</li><li>[ ] 读《Android 音视频开发》</li><li>[x] 读《深入理解 JAVA 虚拟机》</li><li>[x] 复习 Java 基础（《 Java 编程思想》、Cs-Note）</li><li>[x] 复习《算法（第四版）》</li><li>[ ] 读《kotlin 实战》</li><li>[ ] 读《深度学习入门：基于 python 的理论与实现》</li><li>[x] 重温细读《第一行代码》</li><li>[x] 重温细读《The Modern Javascript Tutorial》</li></ul><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul><li>[x] Android基础总结（依据第一行代码）</li><li>[x] Android进阶总结（依据进阶书籍）</li><li>[x] 输出两本以上读书笔记</li><li>[x] 跟着 Google 学习架构系列</li><li>[x] 5 篇以上 Flutter 实战文章</li><li>[x] 翻译书 4 章以上</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul><li>[x] android 架构组件实战 —— MVP、MVVM</li><li>[x] Flutter 样例实战</li><li>[x] Redux 实战</li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战中学习Flutter1：简易聊天AppUI</title>
      <link href="/2019/01/04/flutter-practice1/"/>
      <url>/2019/01/04/flutter-practice1/</url>
      
        <content type="html"><![CDATA[<p>希望尽一点点薄力让大家有兴趣学习这门新技术。</p><p>这里暂不介绍环境配置等操作，不了解的朋友请先移步官网：<a href="https://flutter.io/" target="_blank" rel="noopener">https://flutter.io/</a></p><p>开发环境：VS Code</p><p>本套课程适合直接上手，无需各种基础，dart基础也不需要～～</p><a id="more"></a><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><p>废话不多说了，看下这次我们需要开发的UI界面吧：</p><p><img src="/images/Flutter.gif" alt="Flutter"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="首先我们替换入口文件lib-main-dart下的代码"><a href="#首先我们替换入口文件lib-main-dart下的代码" class="headerlink" title="首先我们替换入口文件lib/main.dart下的代码"></a>首先我们替换入口文件<code>lib/main.dart</code>下的代码</h3><p>代码如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>import &#39;package:flutter/material.dart&#39;;</code></p><p> Flutter默认帮我们导入了<code>flutter/material.dart</code>包，这个包也是我们开发FlutterApp必备的包，其实也是一个UI库，其内部实现了大量优秀炫酷的组件(Widgets)，有App结构和导航、按钮、输入框和选择框、对话框、Alert、Panel、动画等等等等Material Design风格的控件。</p><p>   Material Design：熟悉Android开发的童鞋一定非常了解了，是谷歌推出的一套视觉设计语言。其风格简单大方是我个人非常喜欢的设计风格，有兴趣的同学可以学习了解一下<a href="https://material.io/guidelines/" target="_blank" rel="noopener">Material Design官方原版</a>和<a href="http://wiki.jikexueyuan.com/project/material-design/material-design-intro/introduction.html" target="_blank" rel="noopener">Material Design中文翻译版</a>。</p><p>   在本项目中还需倒入其他哦两个库：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;  <span class="comment">//IOS风格适配</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/foundation.dart'</span>; <span class="comment">//flutter核心库之一</span></span><br></pre></td></tr></table></figure></li><li><p><code>void main() =&gt; runApp(new MyApp());</code></p><p>是Dart程序的入口，也就是说，Flutter程序在运行的时候，第一个执行的函数就是main()函数，Flutter默认会找到<code>lib</code>目录下的<code>main.dart</code>并运行<code>void main() =&gt; runApp(new MyApp());</code></p></li><li><p>第一个组件</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   这是我们在主函数中调用的第一个控件(Widget)。</p></li></ul><h3 id="定义添加两种Theme-主题-分别适配Android和IOS"><a href="#定义添加两种Theme-主题-分别适配Android和IOS" class="headerlink" title="定义添加两种Theme(主题)分别适配Android和IOS"></a>定义添加两种Theme(主题)分别适配Android和IOS</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/cupertino.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/foundation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ThemeData iOSTheme = <span class="keyword">new</span> ThemeData(</span><br><span class="line">  primarySwatch: Colors.red,</span><br><span class="line">  primaryColor: Colors.grey[<span class="number">400</span>],</span><br><span class="line">  primaryColorBrightness: Brightness.dark,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ThemeData androidTheme = <span class="keyword">new</span> ThemeData(</span><br><span class="line">  primarySwatch: Colors.blue,</span><br><span class="line">  accentColor: Colors.green,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> defaultUserName = <span class="string">"MeandNi"</span>; <span class="comment">//默认用户名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关注一下其中的primary颜色对双平台的设置，并且我们将ThemeData变量设置为final不可变的变量。</p><h3 id="定义一个无状态StatelessWidget组件"><a href="#定义一个无状态StatelessWidget组件" class="headerlink" title="定义一个无状态StatelessWidget组件"></a>定义一个无状态<code>StatelessWidget</code>组件</h3><p><strong>继承 StatelessWidget，通过 build 方法返回一个布局好的静态控件</strong>。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext ctx) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">"Chat Application"</span>,</span><br><span class="line">      theme: defaultTargetPlatform == TargetPlatform.iOS</span><br><span class="line">          ? iOSTheme</span><br><span class="line">          : androidTheme,</span><br><span class="line">      home: <span class="keyword">new</span> Chat(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在这里返回了一个MaterialApp，其中可以设置<code>title(标题)</code>、<code>theme(主题)</code>、<code>home(主页)</code>等属性。</p><p>其他属性参考：<a href="https://docs.flutter.io/flutter/widgets/WidgetsApp-class.html" target="_blank" rel="noopener">https://docs.flutter.io/flutter/widgets/WidgetsApp-class.html</a></p><p><code>title</code>：App标题</p><p><code>theme</code>：App主题</p><p><code>home</code>：App根路径</p><p>我们通过判断用户平台给出不同的主题。</p><h3 id="定义一个有状态StatefulWidget组件-——-Chat"><a href="#定义一个有状态StatefulWidget组件-——-Chat" class="headerlink" title="定义一个有状态StatefulWidget组件 —— Chat"></a>定义一个有状态<code>StatefulWidget</code>组件 —— Chat</h3><p><strong>继承 <code>StatefulWidget</code>，通过 build 方法返回一个布局好的动态控件</strong>。所谓动态控件，这里我们主要关注<code>State</code>，通过 State 的 <code>build</code> 方法去构建控件。在 State 中，你可以动态改变数据，这类似 MVVM 实现，在 <code>setState</code> 之后，改变的数据会触发 Widget 重新构建刷新。而下方代码中，我们咋State中定义了_messages、_textController、_isWriting三个变量，我们需要在改变着三个变量时触发 Widget 重新刷新。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State createState() =&gt; <span class="keyword">new</span> ChatWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatWindow</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Chat</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Msg&gt; _messages = &lt;Msg&gt;[];</span><br><span class="line">  <span class="keyword">final</span> TextEditingController _textController = <span class="keyword">new</span> TextEditingController();</span><br><span class="line">  <span class="built_in">bool</span> _isWriting = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext ctx) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"Chat Application"</span>),</span><br><span class="line">        elevation:</span><br><span class="line">        Theme.of(ctx).platform == TargetPlatform.iOS ? <span class="number">0.0</span> : <span class="number">6.0</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Column(children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> Flexible(</span><br><span class="line">            child: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">              itemBuilder: (_, <span class="built_in">int</span> index) =&gt; _messages[index],</span><br><span class="line">              itemCount: _messages.length,</span><br><span class="line">              reverse: <span class="keyword">true</span>,</span><br><span class="line">              padding: <span class="keyword">new</span> EdgeInsets.all(<span class="number">6.0</span>),</span><br><span class="line">            )),</span><br><span class="line">        <span class="keyword">new</span> Divider(height: <span class="number">1.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Container(</span><br><span class="line">          child: _buildComposer(),</span><br><span class="line">          decoration: <span class="keyword">new</span> BoxDecoration(color: Theme.of(ctx).cardColor),</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="定义底部输入框和submit按钮："><a href="#定义底部输入框和submit按钮：" class="headerlink" title="定义底部输入框和submit按钮："></a>定义底部输入框和submit按钮：</h3><p>此Widget被放在ChatWindow的底部用于用户的输入提交。我们可以放关注点聚焦在<code>TextField</code>组件上，我们通过对输入值的监听修改_isWriting的值并对输入框组件和下方的按钮组件刷新达到一定用户体验。</p><p>对于放松按钮，我们在IOS端使用<code>CupertinoButton</code>，android端使用<code>IconButton</code>。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget _buildComposer() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IconTheme(</span><br><span class="line">      data: <span class="keyword">new</span> IconThemeData(color: Theme.of(context).accentColor),</span><br><span class="line">      child: <span class="keyword">new</span> Container(</span><br><span class="line">          margin: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">9.0</span>),</span><br><span class="line">          child: <span class="keyword">new</span> Row(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              <span class="keyword">new</span> Flexible(</span><br><span class="line">                child: <span class="keyword">new</span> TextField(</span><br><span class="line">                  controller: _textController,</span><br><span class="line">                  onChanged: (<span class="built_in">String</span> txt) &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _isWriting = txt.length &gt; <span class="number">0</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  onSubmitted: _submitMsg,</span><br><span class="line">                  decoration:</span><br><span class="line">                  <span class="keyword">new</span> InputDecoration.collapsed(hintText: <span class="string">"Enter some text to send a message"</span>),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> Container(</span><br><span class="line">                  margin: <span class="keyword">new</span> EdgeInsets.symmetric(horizontal: <span class="number">3.0</span>),</span><br><span class="line">                  child: Theme.of(context).platform == TargetPlatform.iOS</span><br><span class="line">                      ? <span class="keyword">new</span> CupertinoButton(</span><br><span class="line">                      child: <span class="keyword">new</span> Text(<span class="string">"Submit"</span>),</span><br><span class="line">                      onPressed: _isWriting ? () =&gt; _submitMsg(_textController.text)</span><br><span class="line">                          : <span class="keyword">null</span></span><br><span class="line">                  )</span><br><span class="line">                      : <span class="keyword">new</span> IconButton(</span><br><span class="line">                    icon: <span class="keyword">new</span> Icon(Icons.message),</span><br><span class="line">                    onPressed: _isWriting</span><br><span class="line">                        ? () =&gt; _submitMsg(_textController.text)</span><br><span class="line">                        : <span class="keyword">null</span>,</span><br><span class="line">                  )</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          decoration: Theme.of(context).platform == TargetPlatform.iOS</span><br><span class="line">              ? <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">              border:</span><br><span class="line">              <span class="keyword">new</span> Border(top: <span class="keyword">new</span> BorderSide(color: Colors.brown))) :</span><br><span class="line">          <span class="keyword">null</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="定义发送数据的函数"><a href="#定义发送数据的函数" class="headerlink" title="定义发送数据的函数"></a>定义发送数据的函数</h3><p>通过<code>_textController</code>清除输入框的旧数据。定义<code>Msg</code>插入到<code>_messages</code>数组中。</p><p>这里我们可以关注动画效果的操作,<code>animationController</code>将作为传输传递到<code>Msg</code>组件当中。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _submitMsg(<span class="built_in">String</span> txt) &#123;</span><br><span class="line">    _textController.clear();</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isWriting = <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    Msg msg = <span class="keyword">new</span> Msg(</span><br><span class="line">      txt: txt,</span><br><span class="line">      animationController: <span class="keyword">new</span> AnimationController(</span><br><span class="line">          vsync: <span class="keyword">this</span>,</span><br><span class="line">          duration: <span class="keyword">new</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">800</span>)</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _messages.insert(<span class="number">0</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line">    msg.animationController.forward();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="定义Msg消息的模版组件"><a href="#定义Msg消息的模版组件" class="headerlink" title="定义Msg消息的模版组件"></a>定义<code>Msg</code>消息的模版组件</h3><p>实际上我们点击Submit消息发送时，发送的就是这样一个<code>StatelessWidget</code>，其中携带两个变量：<code>txt</code>消息内容、<code>animationController</code>动画控制器。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Msg</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Msg(&#123;<span class="keyword">this</span>.txt, <span class="keyword">this</span>.animationController&#125;);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> txt;</span><br><span class="line">  <span class="keyword">final</span> AnimationController animationController;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext ctx) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SizeTransition(</span><br><span class="line">      sizeFactor: <span class="keyword">new</span> CurvedAnimation(</span><br><span class="line">          parent: animationController, curve: Curves.easeOut),</span><br><span class="line">      axisAlignment: <span class="number">0.0</span>,</span><br><span class="line">      child: <span class="keyword">new</span> Container(</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.symmetric(vertical: <span class="number">8.0</span>),</span><br><span class="line">        child: <span class="keyword">new</span> Row(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Container(</span><br><span class="line">              margin: <span class="keyword">const</span> EdgeInsets.only(right: <span class="number">18.0</span>),</span><br><span class="line">              child: <span class="keyword">new</span> CircleAvatar(child: <span class="keyword">new</span> Text(defaultUserName[<span class="number">0</span>])),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> Expanded(</span><br><span class="line">              child: <span class="keyword">new</span> Column(</span><br><span class="line">                crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  <span class="keyword">new</span> Text(defaultUserName, style: Theme.of(ctx).textTheme.subhead),</span><br><span class="line">                  <span class="keyword">new</span> Container(</span><br><span class="line">                    margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">6.0</span>),</span><br><span class="line">                    child: <span class="keyword">new</span> Text(txt),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们的第一个实战App旧大功告成了，是不是很简单的样子，没错，就是这么简单就能做出这么漂亮的UI，其中有些Flutter基础可能没有涉及，如果又需要会尽量更新！</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/MeandNi/Flutter1-Chat_APP" target="_blank" rel="noopener">github demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经验：Flutter项目IOS真机部署及问题</title>
      <link href="/2019/01/04/5671/"/>
      <url>/2019/01/04/5671/</url>
      
        <content type="html"><![CDATA[<p>用flutter开发ios应用在真机调试时出现的问题以及处理方式</p><a id="more"></a><h2 id="无法连接iphone手机"><a href="#无法连接iphone手机" class="headerlink" title="无法连接iphone手机"></a>无法连接iphone手机</h2><p>flutter找不到真机，已经安装Xcode，Xcode里面可以打开真机运行，但Android Studio环境和Vscode环境下，不能找到连接的iPhone真机，其实很简单，终端运行一下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>即可，控制台提示如下：</p><p><img src="http://pan.94ht.com/image-20190104201612194.png" alt="image-20190104201612194"></p><p>按照提示终端执行 截图绿色部分的命令即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --HEAD usbmuxd</span><br><span class="line">brew link usbmuxd</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller</span><br></pre></td></tr></table></figure><h2 id="Signing-for-“xxx”-requires-a-development-team-Select-a-development-team"><a href="#Signing-for-“xxx”-requires-a-development-team-Select-a-development-team" class="headerlink" title="Signing for “xxx” requires a development team. Select a development team"></a>Signing for “xxx” requires a development team. Select a development team</h2><p>首次用vscode连上真机以后，点击调试，会出现如下问题：</p><blockquote><p>No Provisioning Profile was found for your project’s Bundle Identifier or your<br>device. You can create a new Provisioning Profile for your project in Xcode for<br>your team by:<br>  1- Open the Flutter project’s Xcode target with<br>       open ios/Runner.xcworkspace<br>  2- Select the ‘Runner’ project in the navigator then the ‘Runner’ target<br>     in the project settings<br>  3- In the ‘General’ tab, make sure a ‘Development Team’ is selected.<br>     You may need to:</p><pre><code>     - Log in with your Apple ID in Xcode first     - Ensure you have a valid unique Bundle ID     - Register your device with your Apple Developer Account     - Let Xcode automatically provision a profile for your app</code></pre><p>  4- Build or run your project again<br>It’s also possible that a previously installed app with the same Bundle<br>Identifier was signed with a different certificate.<br>For more information, please visit:<br>  <a href="https://flutter.io/setup/#deploy-to-ios-devices" target="_blank" rel="noopener">https://flutter.io/setup/#deploy-to-ios-devices</a><br>Or run on an iOS simulator without code signing<br>════════════════════════════════════════════════════════════════════════════════<br>2018-10-27 12:09:29.004 ios-deploy[91734:221562][ !! ] Error 0xe8008015: A valid provisioning profile for this executable was not found. AMDeviceSecureInstallApplication(0, device, url, options, install_callback, 0)<br>Could not install build/ios/iphoneos/Runner.app on b53d6902af4ac5d5166a3125b9013886739c92d2.<br>Try launching Xcode and selecting “Product &gt; Run” to fix the problem:<br>  open ios/Runner.xcworkspace<br>Error launching application on xxx的 iPhone.<br>Exited (sigterm)</p></blockquote><p>用xcode打开 flutter项目<code>/ios/Runner.xcworkspace</code> 这个文件，好，我们手动打开，点击编译，此时会编译不通过～</p><p>出现这个问题的原因是你的xcode project 中的team没有选择，选择方法如下。</p><p><img src="http://pan.94ht.com/QQ20190104-203008.png" alt="img"></p><h2 id="不受信任的开发者"><a href="#不受信任的开发者" class="headerlink" title="不受信任的开发者"></a>不受信任的开发者</h2><p>解决方式：打开手机上的”设置-&gt;通用-&gt;设备管理-&gt;开发者应用”，进入以后，点击”信任 xxxxx@xxx.com”</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>官方链接：<a href="https://flutter.io/docs/get-started/install/macos" target="_blank" rel="noopener">https://flutter.io/docs/get-started/install/macos</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 真题调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android进阶之路</title>
      <link href="/2018/12/25/android-advanced/"/>
      <url>/2018/12/25/android-advanced/</url>
      
        <content type="html"><![CDATA[<h2 id="读书进阶Android"><a href="#读书进阶Android" class="headerlink" title="读书进阶Android"></a>读书进阶Android</h2><p>已读：《Android群英传》</p><p>正读：《Android进阶之光》</p><p>未读：《Android开发艺术探索》</p><a id="more"></a><hr><h4 id="进阶知识点："><a href="#进阶知识点：" class="headerlink" title="进阶知识点："></a>进阶知识点：</h4><ul><li>Activity启动模式</li><li>View的滑动与动画</li><li>View的事件分发机制</li><li>自定义View、ViewGrroup</li><li>多线程编程、线程池使用与原理</li><li>网络编程、网络框架使用与原理</li><li>设计模式（单例、工厂……）</li><li>常用框架原理（RXJava、EventBus、Dagger2……）</li><li>应用架构（MVP、MVVM）</li><li>性能优化</li><li>JNI和NDK编程</li></ul><hr><h4 id="专项进阶："><a href="#专项进阶：" class="headerlink" title="专项进阶："></a>专项进阶：</h4><ul><li>Android音视频</li><li>Android通信</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 框架组件(Android Architecture Components)使用指南</title>
      <link href="/2018/12/04/86ef/"/>
      <url>/2018/12/04/86ef/</url>
      
        <content type="html"><![CDATA[<p>面对越来越复杂的 App 需求，Google 官方发布了Android 框架组件库（Android Architecture Components ）。为开发者更好的开发 App 提供了非常好的样本。这个框架里的组件是配合 Android 组件生命周期的，所以它能够很好的规避组件生命周期管理的问题。今天我们就来看看这个库的使用。</p><a id="more"></a><h4 id="通用的框架准则"><a href="#通用的框架准则" class="headerlink" title="通用的框架准则"></a>通用的框架准则</h4><p>官方建议在架构 App 的时候遵循以下两个准则：</p><ol><li><p><strong>关注分离</strong></p><p>其中早期开发 App 最常见的做法是在 Activity 或者 Fragment 中写了大量的逻辑代码，导致 Activity 或 Fragment 中的代码很臃肿，十分不易维护。现在很多 App 开发者都注意到了这个问题，所以前两年 MVP 结构就非常有市场，目前普及率也很高。</p></li><li><p><strong>模型驱动UI</strong></p><p>模型持久化的好处就是：即使系统回收了 App 的资源用户也不会丢失数据，而且在网络不稳定的情况下 App 依然可以正常地运行。从而保证了 App 的用户体验。</p></li></ol><h4 id="App-框架组件"><a href="#App-框架组件" class="headerlink" title="App 框架组件"></a>App 框架组件</h4><p>框架提供了以下几个核心组件，我们将通过一个实例来说明这几个组件的使用。</p><ul><li>ViewModel</li><li>LiveData</li><li>Room</li></ul><p>假设要实现一个用户信息展示页面。这个用户信息是通过REST API 从后台获取的。</p><h4 id="建立UI"><a href="#建立UI" class="headerlink" title="建立UI"></a>建立UI</h4><p>我们使用 fragment (UserProfileFragment.java) 来实现用户信息的展示页面。为了驱动 UI，我们的数据模型需要持有以下两个数据元素</p><ul><li><strong>用户ID</strong>: 用户的唯一标识。可以通过 fragment 的 arguments 参数进行传递这个信息。这样做的好处就是如果系统销毁了应用，这个参数会被保存并且下次重新启动时可以恢复之前的数据。</li><li><strong>用户对象数据</strong>：POJO 持有用户数据。</li></ul><p>我们要创建 <strong>ViewModel</strong> 对象用于保存以上数据。</p><p>那什么是 ViewModel 呢？</p><blockquote><p>A <strong>ViewModel</strong> provides the data for a specific UI component, such as a fragment or activity, and handles the communication with the business part of data handling, such as calling other components to load the data or forwarding user modifications. The ViewModel does not know about the View and is not affected by configuration changes such as recreating an activity due to rotation.</p></blockquote><p>ViewModel 是一个框架组件。它为 UI 组件 (fragment或activity) 提供数据，并且可以调用其它组件加载数据或者转发用户指令。ViewModel 不会关心 UI 长什么样，也不会受到 UI 组件配置改变的影响，例如不会受旋转屏幕后 activity 重新启动的影响。因此它是一个与 UI 组件无关的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfileFragment</span> <span class="keyword">extends</span> <span class="title">LifecycleFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UID_KEY = <span class="string">"uid"</span>;</span><br><span class="line">    <span class="keyword">private</span> UserProfileViewModel viewModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        String userId = getArguments().getString(UID_KEY);</span><br><span class="line">        viewModel = ViewModelProviders.of(<span class="keyword">this</span>).get(UserProfileViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        viewModel.init(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater,</span></span></span><br><span class="line"><span class="function"><span class="params">                @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.user_profile, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的是：由于框架组件目前还处于预览版本，这里<code>UserProfileFragment</code> 是继承于 <code>LifecycleFragment</code> 而不是 <code>Fragment</code>。待正式发布版本之后 Android Support 包中的 <code>Fragment</code> 就会默认实现 <code>LifecycleOwner</code> 接口。而 <code>LifecycleFragment</code> 也是实现了 <code>LifecycleOwner</code> 接口的。即正式版本发布时 Support 包中的 UI 组件类就是支持框架组件的。</p><p>现在已经有了 UI 组件和 ViewModel，那么我们如何将它们进行连接呢？这时候就需要用到 LiveData 组件了。</p><blockquote><p><strong>LiveData</strong> is an observable data holder. It lets the components in your app observe <a href="https://developer.android.com/reference/android/arch/lifecycle/LiveData.html" target="_blank" rel="noopener"><code>LiveData</code></a> objects for changes without creating explicit and rigid dependency paths between them. LiveData also respects the lifecycle state of your app components (activities, fragments, services) and does the right thing to prevent object leaking so that your app does not consume more memory.</p></blockquote><p>LiveData 的使用有点像 RxJava。因此完全可以使用 RxJava 来替代 LiveData 组件。</p><p>现在我们修改一下 <code>UserProfileViewModel</code> 类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> LiveData&lt;User&gt; user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>User user</code> 替换成  <code>LiveData&lt;User&gt; user</code></p><p>然后再修改 <code>UserProfileFragment</code> 类中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    viewModel.getUser().observe(<span class="keyword">this</span>, user -&gt; &#123;</span><br><span class="line">      <span class="comment">// update UI</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户数据发生改变时，就会通知 UI 进行更新。ViewModel 与 UI 组件的交互就是这么简单。</p><p>但细心的朋友可能发现了：fragment 在 <code>onActivityCreated</code> 方法中添加了相应的监听，但是没有在其它对应的生命周期中移除监听。有经验的朋友就会觉得这是不是有可能会发生引用泄露问题呢？其实不然，LiveData 组件内部已经为开发者做了这些事情。即 LiveData 会再正确的生命周期进行回调。</p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>现在已经成功的把 ViewModel 与 UI 组件（fragment）进行了通信。那么 ViewModel 又是如何获取数据的呢？</p><p>假设我们的数据是通过REST API 从后天获取的。我们使用 <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a> 库实现网络请求。</p><p>以下是请求网络接口 <code>Webservice</code> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Webservice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GET</span> declares an HTTP GET request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Path</span>("user") annotation on the userId parameter marks it as a</span></span><br><span class="line"><span class="comment">     * replacement for the &#123;user&#125; placeholder in the <span class="doctag">@GET</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewModel 可以引用 <code>Webservice</code> 接口，但是这样做违背了我们在上文提到的<strong>关注分离</strong>准则。因为我们推荐使用 <code>Repository</code> 模型对 <code>Webservice</code> 进行封装。</p><blockquote><p><strong>Repository</strong> modules are responsible for handling data operations. They provide a clean API to the rest of the app. They know where to get the data from and what API calls to make when data is updated. You can consider them as mediators between different data sources (persistent model, web service, cache, etc.).</p></blockquote><p>关于 Repository 模式可以参考我的上一篇《App 组件化/模块化之路——Repository模式》</p><p>以下是使用 Repository 封装 <code>WebService</code> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Webservice webservice;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;User&gt; <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This is not an optimal implementation, we'll fix it below</span></span><br><span class="line">        <span class="keyword">final</span> MutableLiveData&lt;User&gt; data = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">        webservice.getUser(userId).enqueue(<span class="keyword">new</span> Callback&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// error case is left out for brevity</span></span><br><span class="line">                data.setValue(response.body());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Respository 模式抽象数据源接口，也可以很方便地替换其它数据。这样 ViewModel 也不用知道数据源到底是来自哪里。</p><h4 id="组件间的依赖管理"><a href="#组件间的依赖管理" class="headerlink" title="组件间的依赖管理"></a>组件间的依赖管理</h4><p>从上文我们知道 <code>UserRepository</code> 类需要有一个 <code>WebService</code> 实例才能工作。我们可以直接创建它，但这么做我们就必须知道它的依赖，而且会由很多重复的创建对象的代码。这时候我们可以使用依赖注入。本例中我们将使用 Dagger 2 来管理依赖。</p><h4 id="连接-ViewModel-和-Repository"><a href="#连接-ViewModel-和-Repository" class="headerlink" title="连接 ViewModel 和 Repository"></a>连接 ViewModel 和 Repository</h4><p>修改 <code>UserProfileViewModel</code> 类，引用 Repository 并且通过 Dagger 2 对 Repository 的依赖进行管理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfileViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LiveData&lt;User&gt; user;</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> <span class="comment">// UserRepository parameter is provided by Dagger 2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserProfileViewModel</span><span class="params">(UserRepository userRepo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepo = userRepo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// ViewModel is created per Fragment so</span></span><br><span class="line">            <span class="comment">// we know the userId won't change</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        user = userRepo.getUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><p>前面我们实现的 Repository 是只有一个网络数据源的。这样做每次进入用户信息页面都需要去查询网络，用户需要等待，体验不好。因此在 Repository 中加一个缓存数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span>  <span class="comment">// informs Dagger that this class should be constructed once</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Webservice webservice;</span><br><span class="line">    <span class="comment">// simple in memory cache, details omitted for brevity</span></span><br><span class="line">    <span class="keyword">private</span> UserCache userCache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;User&gt; <span class="title">getUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        LiveData&lt;User&gt; cached = userCache.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cached;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MutableLiveData&lt;User&gt; data = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">        userCache.put(userId, data);</span><br><span class="line">        <span class="comment">// this is still suboptimal but better than before.</span></span><br><span class="line">        <span class="comment">// a complete implementation must also handle the error cases.</span></span><br><span class="line">        webservice.getUser(userId).enqueue(<span class="keyword">new</span> Callback&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> </span>&#123;</span><br><span class="line">                data.setValue(response.body());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持久化数据-（Room-组件）"><a href="#持久化数据-（Room-组件）" class="headerlink" title="持久化数据 （Room 组件）"></a>持久化数据 （Room 组件）</h4><p>Android 框架提供了 Room 组件，为 App 数据持久化提供了解决方案。</p><blockquote><p><strong>Room</strong> is an object mapping library that provides local data persistence with minimal boilerplate code. At compile time, it validates each query against the schema, so that broken SQL queries result in compile time errors instead of runtime failures. Room abstracts away some of the underlying implementation details of working with raw SQL tables and queries. It also allows observing changes to the database data (including collections and join queries), exposing such changes via <em>LiveData</em> objects. In addition, it explicitly defines thread constraints that address common issues such as accessing storage on the main thread.</p></blockquote><p>Room 组件提供了数据库操作，配合 LiveData 使用可以监听数据库的变化，进而更新 UI 组件。</p><p>要使用 Room 组件，需要以下步骤：</p><ul><li>使用注解 <code>@Entity</code> 定义实体</li><li>创建 <code>RoomDatabase</code> 子类</li><li>创建数据访问接口（DAO）</li><li>在 <code>RoomDatabase</code> 中引用 DAO</li></ul><ol><li><strong>用注解 <code>@Entity</code> 定义实体类</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryKey</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="comment">// getters and setters for fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>创建 <code>RoomDatabase</code>子类</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database</span>(entities = &#123;User<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">version</span> </span>= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>MyDatabase</code> 是抽象类，Room 组件为我们提供具体的实现。</p><ol><li><strong>创建 DAO</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(onConflict = REPLACE)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE id = :userId"</span>)</span><br><span class="line">    <span class="function">LiveData&lt;User&gt; <span class="title">load</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>在 <code>RoomDatabase</code> 中引用 DAO</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database</span>(entities = &#123;User<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">version</span> </span>= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>现在有了 Room 组件，那么我们可以修改 <code>UserRepository</code> 类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Webservice webservice;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRepository</span><span class="params">(Webservice webservice, UserDao userDao, Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.webservice = webservice;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;User&gt; <span class="title">getUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        refreshUser(userId);</span><br><span class="line">        <span class="comment">// return a LiveData directly from the database.</span></span><br><span class="line">        <span class="keyword">return</span> userDao.load(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshUser</span><span class="params">(<span class="keyword">final</span> String userId)</span> </span>&#123;</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// running in a background thread</span></span><br><span class="line">            <span class="comment">// check if user was fetched recently</span></span><br><span class="line">            <span class="keyword">boolean</span> userExists = userDao.hasUser(FRESH_TIMEOUT);</span><br><span class="line">            <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">                <span class="comment">// refresh the data</span></span><br><span class="line">                Response response = webservice.getUser(userId).execute();</span><br><span class="line">                <span class="comment">// TODO check for error etc.</span></span><br><span class="line">                <span class="comment">// Update the database.The LiveData will automatically refresh so</span></span><br><span class="line">                <span class="comment">// we don't need to do anything else here besides updating the database</span></span><br><span class="line">                userDao.save(response.body());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止我们的代码就基本完成了。UI 组件通过 ViewModel 访问数据，而 ViewModel 通过 LiveData 监听数据的变化，并且使用 Repository 模式封装数据源。这些数据源可以是网络数据，缓存以及持久化数据。</p><h4 id="框架结构图"><a href="#框架结构图" class="headerlink" title="框架结构图"></a>框架结构图</h4><p><img src="/images/final-architecture.png" alt="final-architecture"></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://developer.android.com/topic/libraries/architecture/guide.html#recommended_app_architecture" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/guide.html#recommended_app_architecture</a></p><p><a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="noopener">https://github.com/googlesamples/android-architecture-components</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跟着Google学习架构2：todo‑mvp代码分析</title>
      <link href="/2018/11/11/3b09/"/>
      <url>/2018/11/11/3b09/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MVP简介"><a href="#一、MVP简介" class="headerlink" title="一、MVP简介"></a>一、MVP简介</h2><p><img src="https:////upload-images.jianshu.io/upload_images/3985563-25731fb5c707f5d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/416/format/webp" alt="img"></p><ul><li>Model: 数据层，负责与网络层和数据库层的逻辑交互。</li><li>View: UI层，显示数据, 并向Presenter报告用户行为。</li><li>Presenter: 从Model拿数据，应用到UI层，管理UI的状态，响应用户的行为。</li></ul><a id="more"></a><h2 id="二、MVP优势"><a href="#二、MVP优势" class="headerlink" title="二、MVP优势"></a>二、MVP优势</h2><p>在学习todo-mvp之前，先了解一下MVP的优势。</p><ul><li>分离了视图逻辑和业务逻辑，降低了耦合。</li><li>Activity只处理生命周期的任务，代码变得更加简洁。</li><li>视图逻辑和业务逻辑分别抽象到了View和Presenter的接口中，提高代码的阅读性。</li><li>Presenter被抽象成接口，可以有多种具体的实现，所以方便进行单元测试。</li><li>把业务逻辑抽到Presenter中去，避免后台线程引用着Activity导致Activity的资源无法被系统回收从而引起内存泄露和OOM。</li></ul><h2 id="三、todo-mvp结构解析"><a href="#三、todo-mvp结构解析" class="headerlink" title="三、todo-mvp结构解析"></a>三、todo-mvp结构解析</h2><h3 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1.项目结构"></a>1.项目结构</h3><p><img src="https:////upload-images.jianshu.io/upload_images/3985563-bf64641065361b3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/950/format/webp" alt="img"></p><p>从上图可以看出，todo-mvp是按照功能模块划分的。</p><p>其中tasks, taskdetail, addedittask, statistics是四个业务模块。</p><p>data是数据模块，其中具体的类<code>TasksRepository</code>担任Model层，负责远程和本地数据的获取。</p><p><code>BasePresenter</code>和<code>BaseView</code>是presenter 和 view 的基类，在具体模块承担实际功能。最后，util是工具类集合。</p><h3 id="2-具体解析"><a href="#2-具体解析" class="headerlink" title="2.具体解析"></a>2.具体解析</h3><p>在todoapp中，MVP的具体结构如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/3985563-4634a04a1a55cd1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/584/format/webp" alt="img"></p><p>下面以tasks模块具体阐述上述图片中的实际作用关系。</p><p><strong>基类</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface BasePresenter &#123;</span><br><span class="line"></span><br><span class="line">    void start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>start()</code>方法的作用是presenter开始获取数据并调用view中方法改变界面显示，其调用时机是在Fragment类的<code>onResume</code>方法中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface BaseView&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    void setPresenter(T presenter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>setPresenter()</code>方法作用是在将presenter实例传入view中，其<strong>调用时机是presenter实现类的构造函数中</strong>。</p><p><strong>契约类</strong></p><p>与之前使用的MVP实现不同，官方的实现中加入了契约类来统一管理view与presenter的所有的接口，这种方式使得view与presenter中有哪些功能，一目了然，维护起来也方便，同时使得view与presenter一一对应，并有效地减少类的数目。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface TasksContract &#123;</span><br><span class="line"></span><br><span class="line">    interface View extends BaseView&lt;Presenter&gt; &#123;</span><br><span class="line"></span><br><span class="line">        void setLoadingIndicator(boolean active);</span><br><span class="line"></span><br><span class="line">        void showTasks(List&lt;Task&gt; tasks);</span><br><span class="line"></span><br><span class="line">        void showAddTask();</span><br><span class="line"></span><br><span class="line">        void showTaskDetailsUi(String taskId);</span><br><span class="line"></span><br><span class="line">        void showTaskMarkedComplete();</span><br><span class="line"></span><br><span class="line">        void showTaskMarkedActive();</span><br><span class="line"></span><br><span class="line">        void showCompletedTasksCleared();</span><br><span class="line"></span><br><span class="line">        void showLoadingTasksError();</span><br><span class="line"></span><br><span class="line">        void showNoTasks();</span><br><span class="line"></span><br><span class="line">        void showActiveFilterLabel();</span><br><span class="line"></span><br><span class="line">        void showCompletedFilterLabel();</span><br><span class="line"></span><br><span class="line">        void showAllFilterLabel();</span><br><span class="line"></span><br><span class="line">        void showNoActiveTasks();</span><br><span class="line"></span><br><span class="line">        void showNoCompletedTasks();</span><br><span class="line"></span><br><span class="line">        void showSuccessfullySavedMessage();</span><br><span class="line"></span><br><span class="line">        boolean isActive();</span><br><span class="line"></span><br><span class="line">        void showFilteringPopUpMenu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Presenter extends BasePresenter &#123;</span><br><span class="line"></span><br><span class="line">        void result(int requestCode, int resultCode);</span><br><span class="line"></span><br><span class="line">        void loadTasks(boolean forceUpdate);</span><br><span class="line"></span><br><span class="line">        void addNewTask();</span><br><span class="line"></span><br><span class="line">        void openTaskDetails(@NonNull Task requestedTask);</span><br><span class="line"></span><br><span class="line">        void completeTask(@NonNull Task completedTask);</span><br><span class="line"></span><br><span class="line">        void activateTask(@NonNull Task activeTask);</span><br><span class="line"></span><br><span class="line">        void clearCompletedTasks();</span><br><span class="line"></span><br><span class="line">        void setFiltering(TasksFilterType requestType);</span><br><span class="line"></span><br><span class="line">        TasksFilterType getFiltering();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TasksActivity</strong></p><p>Activity 在项目中是一个全局的控制者，负责创建 view 以及 presenter 实例，并将二者联系起来。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> TasksFragment tasksFragment &#x3D;</span><br><span class="line">         (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class="line"> if (tasksFragment &#x3D;&#x3D; null) &#123;</span><br><span class="line">     &#x2F;&#x2F; 创建 fragment</span><br><span class="line">     tasksFragment &#x3D; TasksFragment.newInstance();</span><br><span class="line">     ActivityUtils.addFragmentToActivity(</span><br><span class="line">             getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 创建 presenter，TasksPresenter是TasksContract.Presenter 的实现类</span><br><span class="line">&#x2F;&#x2F; 传入两个参数 </span><br><span class="line">&#x2F;&#x2F;1.TasksRepository实例，负责数据层  </span><br><span class="line">&#x2F;&#x2F;2.tasksFragment，是TasksContract.View的实现类，即view实例</span><br><span class="line"> mTasksPresenter &#x3D; new TasksPresenter(</span><br><span class="line">         Injection.provideTasksRepository(getApplicationContext()), tasksFragment);</span><br></pre></td></tr></table></figure><p>其中，通过实例化<code>TasksPresenter</code>时，传入<code>tasksFragment</code>，使得在<code>TasksPresenter</code>中拥有view实例。同时，在实例化时初始化构造函数，调用了<code>setPresenter()</code>方法，使得view实例中拥有了presenter实例对象，使得两者联系起来。</p><p><code>TasksPresenter</code>构造函数如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public TasksPresenter(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView) &#123;</span><br><span class="line">    mTasksRepository &#x3D; checkNotNull(tasksRepository, &quot;tasksRepository cannot be null&quot;);</span><br><span class="line">    mTasksView &#x3D; checkNotNull(tasksView, &quot;tasksView cannot be null!&quot;);</span><br><span class="line"></span><br><span class="line">    mTasksView.setPresenter(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TasksFragment</strong></p><p>将Fragment作为view层的实现类，使得Activity作为一个全局控制类来创建对象，而Fragment作为view，两者各司其职。同时，Fragment比较灵活，能够方便的处理界面适配的问题。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TasksFragment extends Fragment implements TasksContract.View &#123;</span><br><span class="line">    ...........</span><br><span class="line">    public static TasksFragment newInstance() &#123;</span><br><span class="line">        return new TasksFragment();</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">    @Override</span><br><span class="line">    public void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">    @Override</span><br><span class="line">    public void setPresenter(@NonNull TasksContract.Presenter presenter) &#123;</span><br><span class="line">        mPresenter &#x3D; checkNotNull(presenter);</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isActive() &#123;</span><br><span class="line">        return isAdded();</span><br><span class="line">    &#125;</span><br><span class="line">    ...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 view 的实现TasksFragment，只挑一部分重要的方法来看。</p><ul><li><code>newInstance ()</code>方法，实例化TasksFragment对象。</li><li><code>setPresenter()</code>方法继承于父类，通过该方法，view 获得了 presenter 得实例，从而可以调用 presenter 代码来处理业务逻辑。</li><li>在<code>onResume()</code>中，调用了 presenter 得<code>start()</code>方法，获取数据并操作view界面的显示。</li><li><code>isActive()</code>方法，通过<code>isAdded()</code>判断对应Activity是否销毁。在Fragment在执行异步耗时操作后，如果调用Activity实例，应当先使用<code>isActive()</code>方法加以判断。</li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>通过对todo-mvp分析，再次了解学习了MVP。从google提供的例子中可以看出，MVP的实现较为简单，model、view和presenter各个职责明确，便于扩展维护。contract契约类的出现，使得model和presenter结构更加清晰明了。Activity和Fragment的配合，使得Activity职能更为简化，同时View的实现更加灵活。</p><p>参考文章：<br><a href="https://www.jianshu.com/p/e219ebd1572a" target="_blank" rel="noopener">https://www.jianshu.com/p/e219ebd1572a</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 技术 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着Google学习架构1：todo‑mvp和todo‑mvp‑clean</title>
      <link href="/2018/11/10/33d5/"/>
      <url>/2018/11/10/33d5/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>这里一定要说明一下，对于MVP,MVC,MVVM,Clean Architecture 等都只是设计思想，并不是代码框架，具体的框架需要来使用上述的设计思想来实现。就比如下面的MVP实现中，View是Activity,Fragment，Presenter是单独的类来处理逻辑，REPOSITORY可以看做是Model。</p><a id="more"></a><h1 id="android-architecture-todoapp-mvp"><a href="#android-architecture-todoapp-mvp" class="headerlink" title="android-architecture-todoapp-mvp"></a>android-architecture-todoapp-mvp</h1><p>google官方推荐的Android框架MVP例子。自己添加了一些注释和心得。<br>基于 Model-View-Presenter的机构模式。</p><p>核心思想就再下面这张图里面：</p><p><img src="http://pan.94ht.com/mvp.png" alt="ss"></p><p>图中的REPOSITORY 也就是数据层，相当于Model。</p><p>谷歌仓库：<br><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="noopener">https://github.com/googlesamples/android-architecture</a></p><h1 id="android-architecture-todoapp-mvp-clean"><a href="#android-architecture-todoapp-mvp-clean" class="headerlink" title="android-architecture-todoapp-mvp-clean"></a>android-architecture-todoapp-mvp-clean</h1><p><strong>下面的内容来自<a href="http://www.jianshu.com/p/c6a1a5c9a49b" target="_blank" rel="noopener">简书</a></strong></p><p>首先看一个Clean Architecture构想图：<br><img src="http://pan.94ht.com/CleanArchitecture.jpg" alt="mvp"></p><p>约定，从最里面的圈向外依次为1、2、3、4。</p><ul><li>第一个圈，是代表App的业务对象（business objects of the application），我的理解也就是相当于数据层。</li><li>第二个圈，是编排数据从 Entity 入或出的流，也叫交互器(Interactors)，基本上所有业务逻辑都在这里。</li><li>第三个圈，把 Use Cases 或者 Entity 使用的数据结构转换成需要的形式。Presenters 和 Controllers 都属于这里。</li><li>第四个圈，框架和驱动：处理细节的地方：UI、工具（tools）、框架（framework）等。</li></ul><p>上面只是一个设计规范，那么具体到代码实现应该怎么设计呢？<br>下图是一个大概的框架：<br><img src="http://pan.94ht.com/CleanCode.png" alt="CleanCode"></p><h4 id="Presentation-Layer"><a href="#Presentation-Layer" class="headerlink" title="Presentation Layer"></a>Presentation Layer</h4><p>这一层是处理UI、动画逻辑的地方，它使用了MVP（Model View Presenter）模式， 你也可以使用 MVC、MVVM（不再深究）。</p><p>在这里 Activity和Fragment都是Views，不处理除UI逻辑之外的任何逻辑，许多的渲染操作都在这里完成。</p><p>在这一层 Presenters 是由各种 interactors (use cases) 组成的，他们负责执行一个异步任务，并通过回调取回需要的数据给UI渲染。</p><p><img src="http://pan.94ht.com/CleanCodeMvp.png" alt="CleanCodeMvp"></p><p>Model就相当于各种interactors(use cases)，可以把多个interactors(use cases)封装一下来实现一个页面的逻辑，这样封装好的就是Model了，当然如果不封装也可以。</p><p>如果你想看一看一些比较酷的MVP、MVVM例子，可以参考 <a href="https://github.com/pedrovgs/EffectiveAndroidUI/" target="_blank" rel="noopener">Effective Android UI</a> 。</p><h4 id="Domain-Layer"><a href="#Domain-Layer" class="headerlink" title="Domain Layer"></a>Domain Layer</h4><p>所有的业务逻辑都是在这层处理的。考虑到Android工程，你会看到所有的 interactors (use cases) 也是在这里实现的。</p><p>这层是一个纯Java的模块，不包含任何Android依赖，所有的外部交互都是通过接口来实现。<br><img src="http://pan.94ht.com/CleanCodeDomain.png" alt="CleanCodeDomain"></p><p>通过上图可以发现，这一层即包含与 Presentation Layer交互的接口（interactors / use cases），也包含与 Data Layer交互的接口（Repository Interface）。</p><h4 id="Data-Layer"><a href="#Data-Layer" class="headerlink" title="Data Layer"></a>Data Layer</h4><p>所有App需要的数据都是通过这层的 UserRepository （实现了DomainLayer的接口）提供的，它使用了 <a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank" rel="noopener">Repository Pattern</a> 的策略—— 通过一个工厂，根据不同的条件抓取不同的数据源。比如，当通过 id 来获取一个 user 时，如果这个 user 在缓存中不存在，那么它会选择磁盘缓存作为数据源，如果磁盘缓存也不存在它会通过云端接口获取数据，并保存在本地缓存中。</p><h4 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h4><p>这是一个值得讨论的话题，非常欢迎任何分享。我的策略是实用回调机制。如果 DataRepo 发生变化，回调接口提供两个方法：onResponse() 和 onError(), 后者把错误封装在 ErrorBundle 类里面：这种处理方式带来一个问题，错误通过层层传递（就是异步编程中常见的 <a href="http://callbackhell.com/" target="_blank" rel="noopener">CallbackHell</a> 问题 ）导致代码可读性变差。</p><p>或者可以使用 EventBus 来处理，但是这种方式有点像 <a href="http://www.drdobbs.com/jvm/programming-with-reason-why-is-goto-bad/228200966" target="_blank" rel="noopener">GOTO</a> 会导致代码逻辑混乱。</p><p>github代码示例：<br><a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="noopener">Here is the github link</a></p><hr><p>基于 android-architecture-todoapp-mvp，使用Clean Architecture的概念来实现。参见链接：<br><a href="https://github.com/stateofzhao/android-architecture-todoapp-mvp-clean" target="_blank" rel="noopener">https://github.com/stateofzhao/android-architecture-todoapp-mvp-clean</a></p><p>在这里唠叨下MVP和MVP-Clean的不同：</p><ul><li>MVP，Presenter直接持并操作数据层UserRepository，数据层就被看做是MVP中的M了。由于Presenter对业务逻辑至关重要，所以Presenter不光起到隔离Model与View的作用，还起到具体业务逻辑实现的作用，导致Presenter比较臃肿，不便于业务功能的扩展。</li><li>MVP-Clean，这个是MVP结合Clean Architecture来使用的，不让Presenter直接处理数据层，而是使用Domain Layer把数据层与上层（Presenter和View）彻底隔离起来，所有的业务逻辑都是在这层处理的，考虑到Android工程，你会看到所有的 interactors (use cases) 也是在这里实现的，这一层是纯java模块，不包含任何Android依赖；Presenter是由各种interactors (use cases) 组成，Presenter其实就是起到一个数据转换作用，把数据层的数据封装成View需要显示的数据；数据层UserRepository（实现了DomainLayer的接口）与上面的基本MVP数据层一样，就是提供APP需要的各种数据，注意数据层需要实现DomainLayer层提供的接口，但是在官方例子中，数据层接口直接放到数据层里面。</li></ul><p>通过上面的理解，可以看出俩MVP中的M是一个相当泛类的指代，它并不是指具体的一个类，比如在基本MVP中它指数据层；而在MVP-Clean中指UseCase层的各种useCase。</p><h1 id="与MVP很相近的MVC模式"><a href="#与MVP很相近的MVC模式" class="headerlink" title="与MVP很相近的MVC模式"></a>与MVP很相近的MVC模式</h1><p>参见知乎上的一个链接：<br><a href="https://www.zhihu.com/question/22886622" target="_blank" rel="noopener">https://www.zhihu.com/question/22886622</a></p><p>回答中讲解的非常好，看了后发现我之前理解的Model和Controller完全是错误的！</p><p>参考文章：<br><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 架构 </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解 IntelliJ IDEA 的项目配置和Web部署</title>
      <link href="/2018/10/10/a03f/"/>
      <url>/2018/10/10/a03f/</url>
      
        <content type="html"><![CDATA[<h1 id="1、项目配置的理解"><a href="#1、项目配置的理解" class="headerlink" title="1、项目配置的理解"></a>1、项目配置的理解</h1><p>IDEA 中最重要的各种设置项，就是这个 Project Structre 了，关乎你的项目运行，缺胳膊少腿都不行。最近学校正好也是用之前自己比较熟悉的IDEA而不是Eclipse，为了更深入理解和使用，就找来各种资料再研究一下，这里整理后来个输出。</p><a id="more"></a><p><img src="/images/idea1.png" alt=""></p><h2 id="1-1-Project"><a href="#1-1-Project" class="headerlink" title="1.1 Project"></a>1.1 Project</h2><p><img src="/images/idea2.png" alt=""></p><ol><li><strong>Project name</strong>：定义项目的名称；</li><li><strong>Project SDK</strong>：设置该项目使用的JDK，也可以在此处新添加其他版本的JDK；</li><li><strong>Project language level</strong>：这个和JDK的类似，区别在于，假如你设置了JDK1.8，却只用到1.6的特性，那么这里可以设置语言等级为1.6，这个是限定项目编译检查时最低要求的JDK特性；</li><li><strong>Project compiler output</strong>：项目中的默认编译输出总目录，如图黄色部分，实际上每个模块可以自己设置特殊的输出目录（Modules - (project) - Paths - Use module compile output path），所以这个设置有点鸡肋。</li></ol><h2 id="1-2-Modules"><a href="#1-2-Modules" class="headerlink" title="1.2 Modules"></a>1.2 Modules</h2><p><img src="/images/idea3.png" alt=""></p><h3 id="1-2-1-增删子项目"><a href="#1-2-1-增删子项目" class="headerlink" title="1.2.1 增删子项目"></a>1.2.1 增删子项目</h3><p><img src="/images/idea4.png" alt=""></p><p>一个项目中可以有多个子项目，每个子项目相当于一个模块。一般我们项目只是单独的一个，IntelliJ IDEA 默认也是单子项目的形式，所以只需要配置一个模块。</p><p>（此处的两个项目引入仅作示例参考）</p><h3 id="1-2-2-子项目配置"><a href="#1-2-2-子项目配置" class="headerlink" title="1.2.2 子项目配置"></a>1.2.2 子项目配置</h3><p>每个子项目都对应了Sources、Paths、Dependencies 三大配置选项：</p><ul><li><strong>Sources</strong>：显示项目的目录资源，那些是项目部署的时候需要的目录，不同颜色代表不同的类型；</li><li><strong>Paths</strong>：可以指定项目的编译输出目录，即项目类和测试类的编译输出地址（替换掉了Project的默认输出地址）</li><li><strong>Dependencies</strong>：项目的依赖</li></ul><p><img src="/images/idea5.png" alt=""></p><p><img src="/images/idea6.png" alt=""></p><p><img src="/images/idea7.png" alt=""></p><h3 id="1-2-3-增删框架（Web部署-1）"><a href="#1-2-3-增删框架（Web部署-1）" class="headerlink" title="1.2.3 增删框架（Web部署-1）"></a>1.2.3 增删框架（Web部署-1）</h3><p>每个子项目之下都可以定义它所使用的框架，这里重点说明一下Web部分的设置。</p><p><img src="/images/idea8.png" alt=""></p><h2 id="1-3-Libraries"><a href="#1-3-Libraries" class="headerlink" title="1.3 Libraries"></a>1.3 Libraries</h2><p>这里可以显示所添加的jar包，同时也可以添加jar包，并且可以把多个jar放在一个组里面，类似于jar包整理。</p><p>这里默认将每个jar包做为了一个单独的组（未测试，待定）。</p><h2 id="1-4-Facets"><a href="#1-4-Facets" class="headerlink" title="1.4 Facets"></a>1.4 Facets</h2><p>官方的解释是：</p><p>When you select a framework (a facet) in the element selector pane, the settings for the framework are shown in the right-hand part of the dialog.</p><p>（当你在左边选择面板点击某个技术框架，右边将会显示这个框架的一些设置）</p><p>说实话，并没有感觉到有什么作用。</p><h2 id="1-5-Artifacts（Web部署-2）"><a href="#1-5-Artifacts（Web部署-2）" class="headerlink" title="1.5 Artifacts（Web部署-2）"></a>1.5 Artifacts（Web部署-2）</h2><p>项目的打包部署设置，这个是项目配置里面比较关键的地方，重点说一下。</p><p>先理解下它的含义，来看看官方定义的artifacts：</p><p>An artifact is an assembly of your project assets that you put together to test, deploy or distribute your software solution or its part. Examples are a collection of compiled Java classes or a Java application packaged in a Java archive, a Web application as a directory structure or a Web application archive, etc.</p><p>即编译后的Java类，Web资源等的整合，用以测试、部署等工作。再白话一点，就是说某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式。某个module有了 Artifacts 就可以部署到应用服务器中了。</p><p><em>（</em></p><p><strong>*jar</strong>：Java ARchive，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发Java平台应用软件或库；*</p><p><strong>*war</strong>：Web application ARchive，一种JAR文件，其中包含用来分发的JSP、Java Servlet、Java类、XML文件、标签库、静态网页（HTML和相关文件），以及构成Web应用程序的其他资源；*</p><p><strong>*exploded</strong>：在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。*</p><p><em>）</em></p><p>默认情况下，IDEA的 Modules 和 Artifacts 的 output目录已经设置好了，不需要更改，打成war包的时候会自动在 WEB-INF目录下生成classes，然后把编译后的文件放进去。</p><p><img src="/images/idea9.png" alt=""></p><p>你可能对这里的输出目录不太理解，之前不是配置过了文件编译的输出目录了吗？为什么这里还有一个整合这些资源的目录呢？它又做了哪些事呢？ </p><p>==其实，实际上，当你点击运行tomcat时，默认就开始做以下事情：==</p><ul><li>编译，IDEA在保存/自动保存后不会做编译，不像Eclipse的保存即编译，因此在运行server前会做一次编译。编译后class文件存放在指定的项目编译输出目录下（见1.2.2）；</li><li>根据artifact中的设定对目录结构进行创建；</li><li>拷贝web资源的根目录下的所有文件到artifact的目录下（见1.2.3）；</li><li>拷贝编译输出目录下的classes目录到artifact下的WEB-INF下（见1.2.2）；</li><li>拷贝lib目录下所需的jar包到artifact下的WEB_INF下；</li><li>运行server，运行成功后，如有需要，会自动打开浏览器访问指定url。</li></ul><p>在这里还要注意的是，配置完成的artifact，需要在tomcat中进行添加：</p><p><img src="/images/idea10.png" alt=""></p><h1 id="2、参考链接"><a href="#2、参考链接" class="headerlink" title="2、参考链接"></a>2、参考链接</h1><ul><li><a href="http://whudoc.qiniudn.com/2016/IntelliJ-IDEA-Tutorial/project-composition-introduce.html" target="_blank" rel="noopener">IntelliJ IDEA 项目相关的几个重要概念介绍</a></li><li><a href="https://www.jetbrains.com/help/idea/2016.3/dependencies-tab.html?search=project%20structure" target="_blank" rel="noopener">Dependencies Tab</a></li><li><a href="https://www.jetbrains.com/help/idea/2016.3/facet-page.html?search=project%20structure" target="_blank" rel="noopener">Facet Page</a></li><li><a href="https://www.jetbrains.com/help/idea/2016.3/working-with-artifacts.html#artifact_def" target="_blank" rel="noopener">Working with Artifacts</a></li><li><a href="http://www.cnblogs.com/52php/p/5677661.html" target="_blank" rel="noopener">Intellij IDEA 14.x 中的Facets和Artifacts的区别</a></li><li><a href="http://white-crucifix.iteye.com/blog/2070830" target="_blank" rel="noopener">IntelliJ使用指南—— 深入理解IntelliJ的Web部署逻辑</a></li><li><a href="https://my.oschina.net/lujianing/blog/186737" target="_blank" rel="noopener">IntelliJ IDEA WEB项目的部署配置</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《The Modern Javascript Tutorial》：javascript中的&quot;this&quot;</title>
      <link href="/2018/09/08/f1a1/"/>
      <url>/2018/09/08/f1a1/</url>
      
        <content type="html"><![CDATA[<h1 id="对象方法与-“this”"><a href="#对象方法与-“this”" class="headerlink" title="对象方法与 “this”"></a>对象方法与 “this”</h1><p>对象通常被用来表示真实世界中的实体，比如用户、订单等等：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，在现实世界中，用户可以<strong>操作</strong>：从购物车中挑选某物、登录、注销等。</p><p>在 JavaScript 中，操作通过属性中的函数来表示。</p><h2 id="方法示例"><a href="#方法示例" class="headerlink" title="方法示例"></a>方法示例</h2><p>刚开始，我们来让 <code>user</code> 说 hello：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">*!*</span><br><span class="line">user.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">user.sayHi(); /</span><span class="regexp">/ Hello!</span></span><br></pre></td></tr></table></figure><p>这里我们使用函数表达式创建了函数，并将其指定给对象的 <code>user.sayHi</code> 属性。</p><p>随后我们调用它。用户现在可以说话了！</p><p>作为对象属性的函数称之为<strong>方法</strong>。</p><p>那么，现在 <code>user</code> 对象有了一个 <code>sayHi</code> 方法。</p><p>当然我们也可以使用预先定义的函数作为方法，就像这样：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">*!*</span><br><span class="line"><span class="comment">// 首先声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后将其作为一个方法</span></span><br><span class="line">user.sayHi = sayHi;</span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">user.sayHi(); /</span><span class="regexp">/ Hello!</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>header</span></figcaption><table><tr><td class="code"><pre><span class="line">当我们在代码中用对象表示实体时，这就是所谓的[面向对象编程](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object-oriented_programming)，简称为 &quot;OOP&quot;。</span><br><span class="line"></span><br><span class="line">OOP 是一门很大的学问，也是一门有其本身乐趣的学问。怎样选择合适的实体？如何组织它们之间的交互？这就是架构，有很多关于此方面的书，例如 E.Gamma、R.Helm、R.Johnson 和 J.Vissides 所著的《设计模式：可复用面向对象软件的基础》、G.Booch 所著的《面向对象分析与设计》等等。在后面的 &lt;info:object-oriented-programming&gt; 一章中，我们将会触及这个主题的浅层内容。</span><br></pre></td></tr></table></figure><h3 id="方法简写"><a href="#方法简写" class="headerlink" title="方法简写"></a>方法简写</h3><p>在对象字面量中，有一种更短的（声明）方法的语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这些对象作用一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法简写看起来更好，对吧？</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">*!*</span><br><span class="line">  sayHi() &#123; <span class="comment">// 与 "sayHi: function()" 一样</span></span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp">    alert("Hello");</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>如所示，我们可以省略 <code>&quot;function&quot;</code> 只写了 <code>sayHi()</code>。</p><p>说实话，这种表示法还是有些不同。与对象集成有关的细微差别（稍后将会介绍），但现在它们无关紧要。在几乎所有的情况下，较短的语法是最好的。</p><h2 id="方法中的-“this”"><a href="#方法中的-“this”" class="headerlink" title="方法中的 “this”"></a>方法中的 “this”</h2><p>对象方法需要访问对象中的存储的信息完成其工作是很常见的。</p><p>举个例子，<code>user.sayHi()</code> 中的代码可能需要用到 <code>user</code> 的 name 属性。</p><p><strong>为了访问该对象，方法中可以使用 <code>this</code> 关键字。</strong></p><p><code>this</code> 的值就是在点之前的这个对象，即调用该方法的对象。</p><p>举个例子：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  sayHi() &#123;</span><br><span class="line">*!*</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">user.sayHi(); /</span><span class="regexp">/ John</span></span><br></pre></td></tr></table></figure><p>在这里 <code>user.sayHi()</code> 执行过程中，<code>this</code> 的值是 <code>user</code>。</p><p>技术上讲，也可以在不使用 <code>this</code> 的情况下，通过外部变量名来引用它：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  sayHi() &#123;</span><br><span class="line">*!*</span><br><span class="line">    alert(user.name); <span class="comment">// "user" 替代 "this"</span></span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>但这样的代码是不可靠的。如果我们将 <code>user</code> 复制给另一个变量。例如 <code>admin = user</code>，并赋另外的值给 <code>user</code>，那么它将访问到错误的对象。</p><p>如下所示：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line"></span><br><span class="line">  sayHi() &#123;</span><br><span class="line">*!*</span><br><span class="line">    alert( user.name ); <span class="comment">// 导致错误</span></span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">let admin = user;</span></span><br><span class="line"><span class="regexp">user = null; /</span><span class="regexp">/ 覆盖让其更易懂</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">admin.sayHi(); /</span><span class="regexp">/ 噢哟！在 sayHi() 使用了旧的变量名。错误！</span></span><br></pre></td></tr></table></figure><p>如果在 <code>alert</code> 中以 <code>this.name</code> 替换 <code>user.name</code>，那么代码就会正常运行。</p><h2 id="“this”-不受限制"><a href="#“this”-不受限制" class="headerlink" title="“this” 不受限制"></a>“this” 不受限制</h2><p>在 JavaScript 中，”this” 关键字与大多数其他编程语言中的不同。首先，它可以用于任何函数。</p><p>这样的代码没有语法错误：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( *!*<span class="keyword">this</span>*<span class="regexp">/!*.name );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>this</code> 是在运行时求值的。它可以是任何值。</p><p>例如，从不同的对象中调用同一个函数可能会有不同的 “this” 值：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> admin = &#123; <span class="attr">name</span>: <span class="string">"Admin"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*!*</span><br><span class="line"><span class="comment">// 在两个对象中使用的是相同的函数</span></span><br><span class="line">user.f = sayHi;</span><br><span class="line">admin.f = sayHi;</span><br><span class="line">*<span class="regexp">/!*</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 它们调用时有不同的 this 值。</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 函数内部的 "this" 是点之前的这个对象。</span></span><br><span class="line"><span class="regexp">user.f(); /</span><span class="regexp">/ John  (this == user)</span></span><br><span class="line"><span class="regexp">admin.f(); /</span><span class="regexp">/ Admin  (this == admin)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">admin['f'](); /</span><span class="regexp">/ Admin（使用点或方括号语法来访问这个方法，都没有关系。）</span></span><br></pre></td></tr></table></figure><p>实际上，我们可以在没有任何对象的情况下调用函数：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在这种情况下，严格模式下的 <code>this</code> 值为 <code>undefined</code>。如果我们尝试访问 <code>this.name</code>，将会出现错误。</p><p>在非严格模式（没有使用 <code>use strict</code>）的情况下，<code>this</code> 将会是<strong>全局对象</strong>（浏览器中的 <code>window</code>，我们稍后会进行讨论）。<code>&quot;use strict&quot;</code> 可以修复这个历史行为。</p><p>请注意，通常在没有对象的情况下使用 <code>this</code> 的函数调用是不常见的，会（导致）编程错误。如果函数中有 <code>this</code>，那么通常意味着它是在对象上下文环境中被调用的。</p><figure class="highlight plain"><figcaption><span>header</span></figcaption><table><tr><td class="code"><pre><span class="line">如果你来自其他的编程语言，那么你可能熟悉『绑定 &#96;this&#96;』的概念。在对象定义的方法中，&#96;this&#96; 总是指向该对象。</span><br><span class="line"></span><br><span class="line">在 JavaScript 中，&#96;this&#96; 是『自由』的，它的值是在调用时进行求值的，它的值并不取决于方法声明的位置，而是（取决）于在『点之前』的是什么对象。</span><br><span class="line"></span><br><span class="line">在运行时对 &#96;this&#96; 求值的这个想法有其优缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性给错误留下了余地。</span><br><span class="line"></span><br><span class="line">这里我们的立场并不是要评判编程语言的这个想法的好坏，而是要了解怎样使用它，如何趋利避害。</span><br></pre></td></tr></table></figure><h2 id="内部：引用类型"><a href="#内部：引用类型" class="headerlink" title="内部：引用类型"></a>内部：引用类型</h2><p>​```warn header=”In-depth language feature”<br>本文介绍一个进阶的主题，来更好地理解一些特殊情况。</p><p>如果你想学得更快，这部分你可以跳过或过后来读。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">『复杂』的方法调用可能会失去 &#96;this&#96;，比如：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js run</span><br><span class="line">let user &#x3D; &#123;</span><br><span class="line">  name: &quot;John&quot;,</span><br><span class="line">  hi() &#123; alert(this.name); &#125;,</span><br><span class="line">  bye() &#123; alert(&quot;Bye&quot;); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.hi(); &#x2F;&#x2F; John (the simple call works)</span><br><span class="line"></span><br><span class="line">*!*</span><br><span class="line">&#x2F;&#x2F; 现在我们要判断 name 属性，来决定调用 user.hi 或是 user.bye。</span><br><span class="line">(user.name &#x3D;&#x3D; &quot;John&quot; ? user.hi : user.bye)(); &#x2F;&#x2F; Error!</span><br><span class="line">*&#x2F;!*</span><br></pre></td></tr></table></figure></p><p>最后一行中有一个三元运算符，它要判断是 <code>user.hi</code> 或 <code>user.bye</code>。在这种情况下，结果会是 <code>user.hi</code>。</p><p>该方法立即被括号 <code>()</code> 调用。但它无效。</p><p>你可以看到该调用导致了错误，因为调用中的 <code>&quot;this&quot;</code> 为 <code>undefined</code>。</p><p>这样是正确的（对象点方法）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.hi();</span><br></pre></td></tr></table></figure><p>这样没有效果（对方法求值）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(user.name == <span class="string">"John"</span> ? user.hi : user.bye)(); <span class="comment">// 错误！</span></span><br></pre></td></tr></table></figure><p>原因是什么？如果我们想了解为什么会这样，那么我们要深入理解 <code>obj.method()</code> 调用的原理。</p><p>仔细看，我们可能注意到 <code>obj.method()</code> 语句中有两个操作符。</p><ol><li>首先，点 <code>&#39;.&#39;</code> 取得这个 <code>obj.method</code> 属性。</li><li>其后的括号 <code>()</code> 调用它。</li></ol><p>那么，<code>this</code> 是如何从第一部分传递到第二部分的呢？</p><p>如果把这些操作分离开，那么 <code>this</code> 肯定会丢失：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  hi() &#123; alert(<span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*!*</span><br><span class="line"><span class="comment">// 将赋值与方法调用拆分为两行</span></span><br><span class="line"><span class="keyword">let</span> hi = user.hi;</span><br><span class="line">hi(); <span class="comment">// 错误，因为 this 未定义</span></span><br><span class="line">*<span class="regexp">/!*</span></span><br></pre></td></tr></table></figure><p>这里 <code>hi = user.hi</code> 把函数赋值给变量，其后的最后一行是完全独立的，所以它没有 <code>this</code>。</p><p><strong>为了让 <code>user.hi()</code> 有效，JavaScript 用一个技巧 —— 这个 <code>&#39;.&#39;</code> 点返回的不是一个函数, 而是一种特殊的[引用类型]的值(<a href="https://tc39.github.io/ecma262/#sec-reference-specification-type" target="_blank" rel="noopener">https://tc39.github.io/ecma262/#sec-reference-specification-type</a>).</strong></p><p>引用类型是一种『规范中有的类型』。我们不能明确地指定它，但是可以在语言内部使用。</p><p>引用类型的值是三点的结合 <code>(base, name, strict)</code>，如下：</p><ul><li><code>base</code> 是对象。</li><li><code>name</code> 是属性。</li><li>当 <code>use strict</code> 生效，<code>strict</code> 为真。</li></ul><p><code>user.hi</code> 属性访问的值不是函数，而是引用类型的值。在严格模式下，<code>user.hi</code> 是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用类型值</span></span><br><span class="line">(user, <span class="string">"hi"</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>当在引用类型上用 <code>()</code> 调用时，它们接收到这个对象和它的方法的所有信息，并且设定正确的 <code>this</code> 值（这里等于 <code>user</code>）。</p><p><code>hi = user.hi</code> 赋值等其他的操作，将引用类型作为一个整体丢弃，只获取 <code>user.hi</code>（一个函数）的值进行传递。因此，进一步操作『失去』了 <code>this</code>（值）。</p><p>所以如果直接使用点 <code>obj.method()</code> 或方括号语法 <code>obj[method]()</code>（它们在这里并无差别）调用函数，那么作为结果，<code>this</code> 值会以正确的方式进行传递。</p><h2 id="箭头函数没有自己的-“this”"><a href="#箭头函数没有自己的-“this”" class="headerlink" title="箭头函数没有自己的 “this”"></a>箭头函数没有自己的 “this”</h2><p>箭头函数有些特别：它们没有自己的 <code>this</code>。如果我们在这样的函数中引用 <code>this</code>，<code>this</code> 值取决于外部『正常的』函数。</p><p>举个例子，这里的 <code>arrow()</code> 使用的 <code>this</code> 来自外部的 <code>user.sayHi()</code> 方法：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">"Ilya"</span>,</span><br><span class="line">  sayHi() &#123;</span><br><span class="line">    <span class="keyword">let</span> arrow = <span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="keyword">this</span>.firstName);</span><br><span class="line">    arrow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.sayHi(); <span class="comment">// Ilya</span></span><br></pre></td></tr></table></figure><p>这是箭头函数的一个特征，当我们并不想要一个独立的 <code>this</code> 值，反而想从外部上下文中获取时，它很有用。在后面的章节 <info:arrow-functions> 中我们将更深入地介绍箭头函数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>存储在对象中函数称之为『方法』。</li><li>对象执行方法进行『操作』，比如 <code>object.doSomething()</code>。</li><li>方法可以将该对象引用为 <code>this</code>。</li></ul><p><code>this</code> 的值是在运行时求值的。</p><ul><li>函数声明使用的 <code>this</code> 只有等到调用时才会有值。</li><li>函数可以在对象之间进行共用。</li><li>当函数使用『方法』语法 <code>object.method()</code> 调用时，调用过程中的 <code>this</code> 总是指向 <code>object</code>。</li></ul><p>请注意箭头函数有些特别：它们没有 <code>this</code>。在箭头函数内部访问的都是来自外部的 <code>this</code> 值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 阅读 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《The Modern Javascript Tutorial》：javascript递归函数的分析</title>
      <link href="/2018/09/07/f1a1/"/>
      <url>/2018/09/07/f1a1/</url>
      
        <content type="html"><![CDATA[<p>递归和堆栈</p><p>我们回到函数，深入研究一下。</p><p>我们的第一个主题是<strong>递归</strong>。</p><p>如果你不是刚接触编程，那么你可能已经很熟悉它，可以跳过这一章了。</p><p>递归是一种编程模式，用于一个任务可以被分割为多个相似的更简单的任务的场景。或者用于一个任务可以被简化为一个容易的行为加上更简单的任务变体。或者像我们随后会看到的，用来处理特定类型的数据结构。</p><p>当一个函数解决一个任务时，在该过程中它可以调用很多其它函数。那么当一个函数调用<strong>自身</strong>时，就称其为<strong>递归</strong>。</p><a id="more"></a><h2 id="两种思考方式"><a href="#两种思考方式" class="headerlink" title="两种思考方式"></a>两种思考方式</h2><p>简单起见，我们写一个函数 <code>pow(x, n)</code>，它可以计算 <code>x</code> 的 <code>n</code> 次方，即用 <code>x</code> 乘以自身 <code>n</code> 次。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">2</span>) = <span class="number">4</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">3</span>) = <span class="number">8</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">4</span>) = <span class="number">16</span></span><br></pre></td></tr></table></figure><p>有两种实现方式。</p><ol><li><p>迭代思路：<code>for</code> 循环：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在循环中用 x 乘以 result</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result *= x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( pow(<span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p>递归思路：简化任务，调用自身：</p><figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * pow(x, n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( pow(<span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ol><p>注意递归方式完全不相同。</p><p>当 <code>pow(x, n)</code> 被调用时，执行分为两个分支：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">              <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line">pow(x, n) =</span><br><span class="line">             \       </span><br><span class="line">              <span class="keyword">else</span>     = x * pow(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>如果 <code>n == 1</code>，所有事情都会很简单，这叫做递归的<strong>基础</strong>，因为它立即得到显而易见的结果：<code>pow(x, 1)</code> 等于 <code>x</code>。</li><li>否则，我们可以用 <code>x * pow(x, n - 1)</code> 表示 <code>pow(x, n)</code>。在数学里，可能会这么写 <code>x<sup>n</sup> = x * x<sup>n-1</sup></code>。这叫做<strong>一个递归步骤</strong>：我们将任务转变为更简单的行为（<code>x</code> 的乘法）和更简单的同类任务调用（更小的 <code>n</code> 给 <code>pow</code>）。后面步骤继续简化直到 <code>n</code> 等于 <code>1</code>。</li></ol><p>我们也可以说 <code>pow</code> <strong>递归的调用自身</strong> 直到 <code>n == 1</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 阅读 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/25/3eeb/"/>
      <url>/2018/08/25/3eeb/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p>博客迁至Hexo，托管在GitHub上，以后可以开始舒适的学作之旅了～</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨平台方案：Weex使用小记</title>
      <link href="/2018/08/22/3a79/"/>
      <url>/2018/08/22/3a79/</url>
      
        <content type="html"><![CDATA[<p>还记得刚接触ReactNative时有多激动，此前还没想过能有这么强大的框架，后来对看多了混合开发的资料发现这真的已经成了不许要学会的一个技能，于是招收学习起了React，效果不尽人意，可能是先接触了Vue，已经习惯了它的开放方式，对React总是用不习惯，有些知识点甚至不能掌握更别提做出格完整的项目了，于是就我而言React是没有Vue好用的，之前也在网上找过Vue有没有类似Native的框架，了解了NativeScript发现国内用的人比较少，文档都是全英文（虽并无大碍）但坑太多我自己安装起来也比较吃力，于是有放弃了对VueNative的探索，继续学习RN～～～还算入门了，但就是不习惯啊，偶然想到另一门技术Weex，之前看到过但并不知道它是基于Vue的跨平台框架于是没去学习，了解后发现它原来是阿里开发的，它原来是基于Vue的，虽然用的人还不多，但他原来有那么全的中文文档～～～卧槽。。。。</p><a id="more"></a><p>用所有的东西都是有坑的，但我坚信对我而言国内人开发的东西会极大的亲近我们，于是开始了搭建环境、学习的旅程。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>相比NativeScript，Weex简直是水到渠成，web端一下子就能运行起来，而且代码是那么的熟悉，Vue在心中已有一席之地，想想以后的混合开发会是如此的畅快！</p><ol><li>安装脚手架</li></ol><p><code>npm install weex-toolkit -g</code></p><ol><li>创建项目</li></ol><p><code>weex create awesome-app</code></p><ol><li>运行项目</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd awesome-app</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="http://weex.apache.org/guide/images/toolkit-preview.png" alt="Weex"></p><h2 id="android端运行"><a href="#android端运行" class="headerlink" title="android端运行"></a>android端运行</h2><ul><li>添加特定平台的项目</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weex platform add ios</span><br><span class="line">weex platform add android</span><br></pre></td></tr></table></figure><p>官网都说了：</p><blockquote><p>由于网络环境的不同，安装过程可能需要一些时间，请耐心等待。如果安装失败，请确保自己的网络环境畅通。</p></blockquote><p>所以昨晚在这一步发生的错误应该就是网络的原因，今天早上网络流畅点就好了</p><ul><li>在本地机器上打开 Android 和 iOS 项目</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weex run ios</span><br><span class="line">weex run android</span><br><span class="line">weex run web</span><br></pre></td></tr></table></figure><p>下面是运行中遇到的一些问题：</p><h3 id="studio3-0对其的不兼容"><a href="#studio3-0对其的不兼容" class="headerlink" title="studio3.0对其的不兼容"></a>studio3.0对其的不兼容</h3><p>坑都在这里了，我想这些坑原因应该都来自于Android Studio 3.0新版特性</p><h4 id="无法下载到版本所对应的gradle"><a href="#无法下载到版本所对应的gradle" class="headerlink" title="无法下载到版本所对应的gradle"></a>无法下载到版本所对应的gradle</h4><blockquote><p>Error: Error: Command failed: ./gradlew  assembleDebug<br>Exception in thread “main” javax.net.ssl.SSLException: Connection has been shutdown: javax.net.ssl.SSLException: SSL peer shut down incorrectly</p></blockquote><p>原因：<br>由于网络被墙，无法下载到版本所对应的gradle。</p><p>解决：<br>将<code>app/platforms/android/gradle/wrapper</code>下的<code>distributionUrl</code>改为本地对应的版本号</p><p><img src="/images/QQ20180908-121118.png" alt="distributionUrl"></p><h4 id="Gradle自定义apk名称报错"><a href="#Gradle自定义apk名称报错" class="headerlink" title="Gradle自定义apk名称报错"></a>Gradle自定义apk名称报错</h4><blockquote><p>Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=debug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl.</p></blockquote><p>AS 3.0之前自定义apk名称：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.each &#123; output -&gt;</span><br><span class="line">    def fileName &#x3D; &quot;$&#123;variant.versionName&#125;_release.apk&quot;</span><br><span class="line">    def outFile &#x3D; output.outputFile</span><br><span class="line">    if (outFile !&#x3D; null &amp;&amp; outFile.name.endsWith(&#39;.apk&#39;)) &#123;</span><br><span class="line">        output.outputFile &#x3D;newFile(outFile.parent, fileName)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.all &#123; output -&gt;  &#x2F;&#x2F; each 改为 all</span><br><span class="line">    def fileName &#x3D; &quot;$&#123;variant.versionName&#125;_release.apk&quot;</span><br><span class="line">    def outFile &#x3D; output.outputFile</span><br><span class="line">    if (outFile !&#x3D; null &amp;&amp; outFile.name.endsWith(&#39;.apk&#39;)) &#123;</span><br><span class="line">        outputFileName &#x3D; fileName  &#x2F;&#x2F;  output.outputFile 改为 outputFileName </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>把<code>each</code>修改为<code>all</code>，然后通过<code>outputFileName</code>修改生成apk的名称。此外，AS 3.0后打包完，除了apk包文件，还会多一个 <code>output.json</code> 参数文件。</p><p><img src="/images/QQ20180908-122053.png" alt="/awesome-app/platforms/android/app"></p><h2 id="学习！"><a href="#学习！" class="headerlink" title="学习！"></a>学习！</h2><p>下面就开始各种使用它了！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 混合开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试翻译React英文文档</title>
      <link href="/2018/08/17/react-tutorial/"/>
      <url>/2018/08/17/react-tutorial/</url>
      
        <content type="html"><![CDATA[<p>虽然发现React是有中文网的，但是奈何一直打不开中文文档，即使我已经开了VPN，自己现在又习惯性的想看更专业的官方文档，国内的一些教程实在看不下去了，所以想着自己尝试翻译他的文档，帮助一些和我一样有强迫症患者的朋友。</p><a id="more"></a><hr><p>官网就是官网，教程真的是牛逼，react教程分为两种，实践教程（practical tutorial）和概念教程（guide to main concepts），都很好，我这里就先翻译实践教程吧！</p><hr><h2 id="实践教程-practical-tutorial"><a href="#实践教程-practical-tutorial" class="headerlink" title="实践教程(practical tutorial)"></a>实践教程(practical tutorial)</h2><h3 id="在开始实践教程之前-Before-We-Start-the-Tutorial"><a href="#在开始实践教程之前-Before-We-Start-the-Tutorial" class="headerlink" title="在开始实践教程之前(Before We Start the Tutorial)"></a>在开始实践教程之前(Before We Start the Tutorial)</h3><p>在这个教程中，我们将做一个小游戏，<strong>你千万别被吓到，你怎么这么快就能做一个游戏了，我要说的是，你并不是在做一个很厉害的游戏，我们也只是给你一个这样的机会</strong>，在这个方法的教程中,你将会学习到用react构建基础的应用并且熟练地掌握它，它也将让你充分理解React。</p><blockquote><p><strong>建议</strong><br>这个教程被设计为那些想要通过亲自动手边做边学的人，如果你更喜欢去一步一步学习概念，你可以去另一套教程里，一会发现这两套教程可以互补的学习，大家可以取他们各自的长处！</p></blockquote><p>这个教程可以被分为下面几个部分</p><ul><li>教程构建 将给你一个如何开始这个教程的指导</li><li>概述 将教你一些React的基础内容：components, props和state</li><li>小游戏项目 将教你一些在React开发过程中最通用的一些技能</li><li>历史回流 将让你对React有更深的理解，体会到React强大之处</li></ul><p>你没必要立刻掌握以上所有的部分，你可以尝试先去学你能学会的部分，没必要纠结是否自己基础是否太薄弱。</p><p>有时跟着教程拷贝代码是好事，但我们还是建议你去一步一步的去手写，那将帮助你更好的记忆和更深的理解！</p><h4 id="我们在做什么（这部分可以不看吧，有点啰嗦了）"><a href="#我们在做什么（这部分可以不看吧，有点啰嗦了）" class="headerlink" title="我们在做什么（这部分可以不看吧，有点啰嗦了）"></a>我们在做什么（这部分可以不看吧，有点啰嗦了）</h4><p>在这个教程中，我们将为你展示如何去用React开发一个交互的小游戏。</p><p>你可以先看一下游戏做出后<a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010" target="_blank" rel="noopener">最后的成果</a>，如果你不能理解代码，还不熟悉它如何做出来的，别担心，这个教程的目标就是教会你这些东西，不然你可以走了。</p><p>我们建议你继续教程之前先熟悉一下这个游戏，你可以注意到在游戏面板的右面有一个数字列表，他将记录你游戏的每一步，并且可以实时更新。</p><p>熟悉了之后就Ok了，下面我们一下来开发这个游戏！</p><h4 id="前提条件-Prerequisites"><a href="#前提条件-Prerequisites" class="headerlink" title="前提条件(Prerequisites)"></a>前提条件(Prerequisites)</h4><p>我们假设你已经熟练掌握了HTMl和JavaScript了，虽然有其他语言基础也可以，但那些基础还是要掌握的，我们也假设你熟悉了一些例如<code>functions``objects``arrays</code>这些Js里面的概念，并且有一些对<code>classes</code>有一定的理解。</p><p>如果你需要去重新学习JavaScript，我们推荐阅读<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">这个教程</a>，注意：我们也使用一些ES6的语法，例如尖头函数、<code>classes</code>、<code>let</code>、<code>const</code>，你可以使用<a href="https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2016%2Creact&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=" target="_blank" rel="noopener">Babel REPL</a>核实ES6代码规范。</p><h3 id="教程构建-Setup-for-the-Tutorial"><a href="#教程构建-Setup-for-the-Tutorial" class="headerlink" title="教程构建(Setup for the Tutorial)"></a>教程构建(Setup for the Tutorial)</h3><p>有两个方法学习这个教程：</p><ul><li>你可以在浏览器中再现编写代码</li><li>也可以搭建本地的开发环境</li></ul><h4 id="方法一：浏览器在线编写"><a href="#方法一：浏览器在线编写" class="headerlink" title="方法一：浏览器在线编写"></a>方法一：浏览器在线编写</h4><p>这是很快的入门方法</p><p>首先打开<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" target="_blank" rel="noopener">Starter Code</a>,这里还没有把游戏显示出来，我们可以在这里在线编辑学习。</p><p>确定是痛这种方法的话，我们可以跳过下面第二种方法去看<code>概述</code>部分了</p><h4 id="方法二：-搭建本地开发环境"><a href="#方法二：-搭建本地开发环境" class="headerlink" title="方法二： 搭建本地开发环境"></a>方法二： 搭建本地开发环境</h4><p>虽然我们这个教程中并不需要这种方法，但他也很重要！<br>（This is completely optional and not required for this tutorial!，原文显得很不重要一样）</p><p>这个方法需要更大的工作量，但是可以在本地选择自己的编辑器来学习本套课程，下面是步骤：</p><ol><li>确定你已经安装了Node.Js</li><li>跟着下面安装指导来创建新的工程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure></li><li>删除新项目中<code>src/</code>目录下所有的文件（文件夹保留）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd my-app</span><br><span class="line">rm -f src&#x2F;*</span><br></pre></td></tr></table></figure></li><li><p>在<code>src/</code>文件夹中新建一个名为<code>index.css</code>的文件，用于编写css代码</p></li><li><p>在<code>src/</code>文件夹中新建一个名为<code>index.js</code>的文件，用于编写js代码</p></li><li><p>在<code>index.js</code>中添加下面三行代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br></pre></td></tr></table></figure><p>现在你可以运行<code>npm start</code>，浏览器打开<code>http://localhost:3000</code>，你可以看见一个空的页面,这样，本地的开发环境就搭建好了。</p></li></ol><h4 id="寻求帮助"><a href="#寻求帮助" class="headerlink" title="寻求帮助"></a>寻求帮助</h4><p>如果你在构建环境的过程中有什么问题，可以直接找我～～～</p><blockquote><p><strong>原文</strong><br><em>If you get stuck, check out the <a href="https://reactjs.org/community/support.html" target="_blank" rel="noopener">community support</a> resources. In particular, <a href="https://discord.gg/0ZcbPKXt5bZjGY5n" target="_blank" rel="noopener">Reactiflux Chat</a> is a great way to get help quickly. If you don’t receive an answer, or if you remain stuck, please file an issue, and we’ll help you out.</em></p></blockquote><h3 id="概述-Overview"><a href="#概述-Overview" class="headerlink" title="概述(Overview)"></a>概述(Overview)</h3><h4 id="React是什么？-What-Is-React"><a href="#React是什么？-What-Is-React" class="headerlink" title="React是什么？(What Is React?)"></a>React是什么？(What Is React?)</h4><p>React是开源、高效、灵活的Js框架，它能够让你李用一个个脱离的片段（被叫做组件<code>components</code>）来构建出一个复杂的UI。</p><p>React有一部分不同种类的组件，但是它们都继承自<code>React.Component</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage: &lt;ShoppingList name="Mark" /&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到类似XML标签的代码，我们使用组件去告诉React我们将在屏幕中显示什么，当我们数据改变React也将高效的更新这个组件。</p><p>这里，<code>ShoppingList</code>是一个组件（ React component class, or React component type）,组件里包含一些参数，叫做<code>props</code>(propertie的缩写),并且通过<code>render</code>方法返回一个试图层（hierarchy of views）.</p><p><code>render</code>方法返回一个你想在网页中看到的“描述”，React拿到这个“描述”并且展示出来，大部分React开发者使用一种特殊的语法“JSX”来写<code>render</code>的内容，极其方便。在JSX语法中<br><code>&lt;div /&gt;</code>句式被转换成<code>React.createElement(&#39;div&#39;)</code>，这样我们可以在JS代码中方便的写入类似HTML标签的语法了。<br><code>React.createElement(&#39;div&#39;)</code>写<code>render</code>内容Example:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, &#123;<span class="attr">className</span>: <span class="string">'shopping-list'</span>&#125;,</span><br><span class="line">  React.createElement(<span class="string">'h1'</span>, <span class="comment">/* ... h1 children ... */</span>),</span><br><span class="line">  React.createElement(<span class="string">'ul'</span>, <span class="comment">/* ... ul children ... */</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><a href="https://babeljs.io/repl/#?presets=react&amp;code_lz=DwEwlgbgBAxgNgQwM5IHIILYFMC8AiJACwHsAHUsAOwHMBaOMJAFzwD4AoKKYQgRlYDKJclWpQAMoyZQAZsQBOUAN6l5ZJADpKmLAF9gAej4cuwAK5wTXbg1YBJSswTV5mQ7c7XgtgOqEETEgAguTuYFamtgDyMBZmSGFWhhYchuAQrADc7EA" target="_blank" rel="noopener">完整的例子</a>（可见，很繁琐）</p><p>如果你想了解更多<code>createElement()</code>的内容，请查阅<a href="https://reactjs.org/docs/react-api.html#createelement" target="_blank" rel="noopener">API文档</a>，在实际开发中我们不常使用到它，而是用更为方便的JSX语法。</p><p>JSX自带Javascript的全部功能，你可以把任何JS表达式放在JSX的代码块中，每个React组件是一个Js对象，你可以在其中使用一些变量和函数。</p><p>上面的<code>ShoppingList</code>组件仅仅在DOM树中渲染了<code>&lt;div /&gt;</code>和<code>&lt;li /&gt;</code>，你也可以渲染出自定义的React组件。比如说，你可以通过写<code>&lt;ShoppingList /&gt;</code>来显示<code>ShoppingList</code>的全部内容，每个React组件被独立的分离，这样，你就可以通过简单的组件构建出一个复杂的UI界面。</p><h4 id="浏览-the-Starter-Code（Inspecting-the-Starter-Code）"><a href="#浏览-the-Starter-Code（Inspecting-the-Starter-Code）" class="headerlink" title="浏览 the Starter Code（Inspecting the Starter Code）"></a>浏览 the Starter Code（Inspecting the Starter Code）</h4><p>如果你是在线学习编写代码，打开这个代码页面：<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" target="_blank" rel="noopener">Starter Code</a>,如果你是在本地编写代码，打开<code>src/index.js</code></p><p>这个代码是你以后进行后续编写的基础，我们已经提供了CSS样式，你可以专注于学习React来开发这个游戏。</p><p>通过阅读这段代码，你会发现其中有三个组件：</p><ul><li>Square</li><li>Board</li><li>Game</li></ul><p>Square组件仅渲染了单个的<code>&lt;button&gt;</code>，Board组件渲染了9个Square组件，Game组件渲染了一个board组件和一个以后将要修改了占位代码，现在还没有能够交互的组件。</p><h4 id="通过props传递数据-Passing-Data-Through-Props"><a href="#通过props传递数据-Passing-Data-Through-Props" class="headerlink" title="通过props传递数据(Passing Data Through Props)"></a>通过props传递数据(Passing Data Through Props)</h4><p>趁热打铁！让我们试着将数据从Board组件传递到Square组件。</p><p>在Board组件的<code>renderSquare</code>方法中，修改代码让一个叫做<code>value</code>的变量传递到Square组件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将Square<code>render</code>方法中的<code>{/* TODO */}</code>修改为<code>{this.props.value}</code>：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br>修改之前界面是：</p><p><img src="/images/tictac-empty-1566a4f8490d6b4b1ed36cd2c11fe4b6-a9336.png" alt="界面视图"></p><p>修改之后，你将可以在每个Square组件中看见一个数字：</p><p><img src="/images/tictac-numbers-685df774da6da48f451356f33f4be8b2-be875.png" alt="界面视图"></p><p><a href="https://codepen.io/gaearon/pen/aWWQOG?editors=0010" target="_blank" rel="noopener">看此部分完整代码</a></p><p>祝贺你！你已经成功将数据从Board组件(父zujian)传递到Square组件(子组件)，props传递是React中从父到子的数据流动的方式。</p><h4 id="制作一个交互组件-Making-an-Interactive-Component"><a href="#制作一个交互组件-Making-an-Interactive-Component" class="headerlink" title="制作一个交互组件(Making an Interactive Component)"></a>制作一个交互组件(Making an Interactive Component)</h4><p>功能：当我们点击时，能将Square组件中的值变为“X”。<br>首先，改变组件中的<code>render()</code>方法：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'click'</span>); &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br>现在点击一个Square组件，你将看到一个alert框。</p><blockquote><blockquote><p><strong>Note</strong><br>为了保存类型并且避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">对this不能理解</a>，我们将使用尖头函数的句式（<code>arrow function syntax</code>）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"> render() &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     &lt;button className=<span class="string">"square"</span> onClick=&#123;() =&gt; alert(<span class="string">'click'</span>)&#125;&gt;</span><br><span class="line">       &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">     &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">   );</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><br>请看这边<code>onClick={() =&gt; alert(&#39;click&#39;)}</code>，我们传递一个<em>函数</em>作为<code>onClick</code>的参数，这个函数将在我们点击的时候执行，大家通常会忘了写<code>() =&gt;</code>而写成<code>onClick={alert(&#39;click&#39;)}</code>，如果这样的话，大家可以看看会发生什么。</p></blockquote></blockquote><p>下一步，我们想要让Square“记住”我们点击的行为，并且在其中放入一个“X”字符。要让组件“记住”，<br>我们要用到<strong>state</strong></p><p>React组件可以通过在构造函数中设置<code>this.state</code>来定义state，<code>this.state</code>被认为是React组件中被私有的。让我们在<code>this.state</code>中储存当前Square的value，点击的时候能瘦改变。</p><p>首先，写一个构造函数去初始化state</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="string">"square"</span> onClick=&#123;() =&gt; alert(<span class="string">'click'</span>)&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong><br>在<code>JavaScript classes</code>中，当定义一个子类的时候，你需要去调用<code>super</code>方法。所有的React组件的类都应该有一个<code>constructor</code>并在其中调用<code>super(props)</code></p></blockquote><p>现在我们将改变Square的<code>render</code>方法去实现当我们点击时展示当前的state的值：</p><ul><li>在<code>&lt;button&gt;</code>标签中用<code>this.state.value</code>替换<code>this.props.value</code></li><li>用<code>() =&gt; this.setState({value: &#39;X&#39;})</code>替换<code>() =&gt; alert()</code></li><li>将<code>className</code>和<code>onClick</code>各占一行以便更好的阅读</li></ul><p>改变以后<code>&lt;button&gt;</code>标签应该是这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        className=<span class="string">"square"</span></span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: <span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>通过调用Square中的<code>onClick</code>方法执行<code>this.setState</code>方法，我们高速React去重新渲染这个组件。更新之后Square的<code>this.state.value</code>将变成<code>X</code>，这样，如果我们点击任何一个Square，将会在其中展示一个<code>&#39;X&#39;</code>。</p><p>当我们在组件中调用<code>setState</code>方法，React也将自动更新其中的子组件。</p><p><a href="[看此部分完整代码](https://codepen.io/gaearon/pen/aWWQOG?editors=0010">看此部分完整代码</a></p><h4 id="开发工具-Developer-Tools"><a href="#开发工具-Developer-Tools" class="headerlink" title="开发工具(Developer Tools)"></a>开发工具(Developer Tools)</h4><p>这里介绍的是React在<code>Chrome</code>和<code>Firefox</code>的插件，先不翻译</p><h3 id="完成小游戏项目"><a href="#完成小游戏项目" class="headerlink" title="完成小游戏项目"></a>完成小游戏项目</h3><p>有了这个游戏的基础框架，要完成这个游戏，我们需要去瓤“X”和“O”能够在游戏面板中交替下棋，并且需要一个方法去决定谁是赢家。</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>目前，每个Square组件都有一个游戏的State，为了一决定谁是赢家，我们将在同一个地方构建每一个Square的value。</p><p>我们可以认为Board仅仅是询问了每一个Square的state，尽管在React中这种方法可以实现，我们也不将使用，因为它这样代码将相对难以理解，更容易产生bug并且难遇维护。储存游戏状态更好的方法是在父组件Board中储存，而不是在每一个Square中储存，Board组件通过传递props能够告诉每一个Square该去显示什么,<a href="#通过props传递数据-Passing-Data-Through-Props">就像我们之前用props传递数据一样</a>。</p><p>去采集来自数个子组件的数据，或者让两个子组件相互通信交流，你需要去共享父组件的state，父组件可以用props向下传递state；这能让子组件随着父组件相互同步。</p><p>当React组件被复用时，将state拿到父组件中在React中是一个常见的方法，让我们把握这个机会试一下！<br>我们在Board增加一个构造方法，并且初始化state，包含含有9个null的数组，这9个null分别对应9个方块：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> status = <span class="string">'Next player: X'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"status"</span>&gt;&#123;status&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>当我们以后填满棋盘，我们将看到类似：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#39;O&#39;, null, &#39;X&#39;,</span><br><span class="line">  &#39;X&#39;, &#39;X&#39;, &#39;O&#39;,</span><br><span class="line">  &#39;O&#39;, null, null,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Board组件中的<code>renderSquare</code>方法现在是这样的；<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>之前我们传递0-8九个数字给每一个方块，不同于之前的步骤，我们用Square中state中的值“X”代替数字，这是我们数字不能显示的原因。</p><p>我们现在将再次使用props传递机制。我们现在修改Board去指导每个独立的方块。我们已经定义了<code>squares</code>数组，然后我们将修改Board的renderSquare的方法去拿到它：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;this.state.squares[i]&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><a href="[看此部分完整代码](https://codepen.io/gaearon/pen/gWWQPY?editors=0010">看此部分完整代码</a></p><p>每个方块现在将接收到一个<code>value</code>prop，它将是<code>&#39;X&#39;</code>,<code>&#39;O&#39;</code>,<code>null</code>其中一个值。</p><p> 下一步，我们需要去对方块点击后发生的事件做改变，Board组件现在决定那写方块被填满，我们需要去用一个方法让Square组件能够更新Board的state，既然state对每个组件来说是私有的。我们不能直接在square组件中修改Board组件的state。</p><p> 为了维持state的私有性，我们需要从Board向下传递一个方法，这个方法将被调用。下面我们改变Board组件中的<code>renderSquare</code>方法：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Square</span><br><span class="line">      value&#x3D;&#123;this.state.squares[i]&#125;</span><br><span class="line">      onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick(i)&#125;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong><br>  为了更好的可读性，我们把元素分行，并且我们加了一个圆括号解决能让<code>return</code>之后架上分号，并且结束代码。</p></blockquote><p>  下载我们从Board传了两个props给Square:<code>value</code>和<code>onClick</code>. 这个<code>onClick</code>是一个Square组件被点击时可以调用的一个方法，我们对Square做如下的工作：</p><ul><li>在Square的<code>render</code>方法中，用<code>this.props.value</code>替换<code>this.state.value</code></li><li>在Square的<code>render</code>方法中，用<code>this.props.onClick()</code>替换<code>this.setState()</code></li><li><p>删除Square的<code>constructor</code>，因为它不再用来跟踪游戏的状态了</p><p>改变之后的Square组件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  class Square extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button</span><br><span class="line">        className&#x3D;&quot;square&quot;</span><br><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; this.props.onClick()&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;this.props.value&#125;</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当一个方块被点击，Board传过来的<code>onClick</code>方法将被调用，下面来看看为什么：</p><ol><li>在<code>&lt;button&gt;</code>组件中的<code>onClick</code>属性通知React创建了一个点击事件的监听事件</li><li>当按钮被点击，React将调用在Square组件的<code>render()</code>方法中的<code>onClick</code>事件处理器 </li><li>这个事件处理器再调用<code>this.props.onClick()</code>，这个Square的<code>onClick</code>属性具体的内容在Board组件中</li><li>既然Board组件传递<code>onClick={() =&gt; this.handleClick(i)}</code>给Square，那个这个Square当被点击时调用的是<code>this.handleClick(i)</code></li><li>我们还没定义<code>handleClick()</code>方法，那么我们就开始干咯。</li></ol><blockquote><p><strong>Note</strong><br>DOM下的<code>&lt;button&gt;</code>元素的<code>onClick</code>内置的组件. 对于像Square一样的自定义标签，命名是取决于你的, 我们完全可以将Square的<code>onClick</code>属性或者Board的<code>handleClick</code>方法命名成别的名字. 然而在React中为一些代表事件的属性使用<code>on[Event]</code>这样的命名格式是一种约定而成的习惯, <code>handle[Event]</code>作为处理方法的名称也是这个道理。</p></blockquote><p>当我们试着去点击一个方块，应该会报一个error，因为我们还没定义<code>handleClick</code>方法，我们现在开始在Board class中写<code>handleClick</code>方法:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="keyword">const</span> squares = <span class="keyword">this</span>.state.squares.slice();</span><br><span class="line">    squares[i] = <span class="string">'X'</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">squares</span>: squares&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Square</span><br><span class="line">        value=&#123;<span class="keyword">this</span>.state.squares[i]&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> status = <span class="string">'Next player: X'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"status"</span>&gt;&#123;status&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="[看此部分完整代码](https://codepen.io/gaearon/pen/ybbQJX?editors=0010">看此部分完整代码</a></p><p>这样之后，我们又能够点击且填满方块了，但是现在它们的状态<code>state</code>被储存在Board组件而不是每个独立的Square组件中。当我们Boare的state改变，Square组件将自动重新渲染，让所有方块的状态的状态<code>state</code>都放在Board组件中将让我们之后的开发中可以决定谁是赢家。</p><p>既然方块组件（Square components）不再有state，它仅仅做的是接收来自棋盘组件（Board component）的values值并且当被点击时通知棋盘组件。在React中，方块组件现在叫做被控制组件，棋盘完全控制着它们。</p><p>注意在<code>handleClick</code>中，我们调用了<code>.slice()</code>来创建一个<code>squares</code>数组的copy，然后修改它而不是直接修改之前就存在的，下面我们将解释我们为什么要这么做。</p><h4 id="为什么不变性如此重要（Why-Immutability-Is-Important）"><a href="#为什么不变性如此重要（Why-Immutability-Is-Important）" class="headerlink" title="为什么不变性如此重要（Why Immutability Is Important）"></a>为什么不变性如此重要（Why Immutability Is Important）</h4><p> 在之前的代码中，我们推荐使用<code>.slice()</code>去创建<code>squares</code>数组的copy，然后修改它而不是直接修改之前就存在的。我们现在讨论为何不改变之前的数组，为何踏实重要的。</p><p> 我们知道，改变数据有两个方法一个是直接改变数据的值，还有就是修改一个数据拷贝的副本。</p><p> <em>直接改变数据</em></p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Jeff'</span>&#125;;</span><br><span class="line">player.score = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// Now player is &#123;score: 2, name: 'Jeff'&#125;</span></span><br></pre></td></tr></table></figure><p><em>间接得到改变的数据</em><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Jeff'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newPlayer = <span class="built_in">Object</span>.assign(&#123;&#125;, player, &#123;<span class="attr">score</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="comment">// Now player is unchanged, but newPlayer is &#123;score: 2, name: 'Jeff'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Or if you are using object spread syntax proposal, you can write:</span></span><br><span class="line"><span class="comment">// var newPlayer = &#123;...player, score: 2&#125;;</span></span><br></pre></td></tr></table></figure></p><p><em>复杂的功能变简单</em></p><p>不可变性是复杂的功能实现起来变得更简单，在之后的教程中，我们将实现一个<code>time travel</code>的功能，可以允许我们玩游戏的过程中回顾之前的步骤，还有悔棋，这是这个游戏的普通需求，避免去直接改变数据让我们能够完好无损回到游戏游戏的历史界面。</p><p><em>观察变动</em></p><p>数据直接改变后想去观察是困难的，这种观察房需要可变的对象与之前他本身的的各种copy版本进行比较</p><p>观察改变在不变的对象的情况下是更容易的，如果当前的不变对象与之前的是不同的，那么说明已经改变。</p><p><em>决定何时重新加载</em></p><p>不可变的主要益处设市能够帮助我们构建一个<em>pure components</em>(纯净的组件？？)，不便数据可以是我们易于发现改变何时发生并且帮助我们决定何时重新加载。</p><p>你可以学习更多关于<code>shouldComponentUpdate()</code>并且通过阅读<a href="https://reactjs.org/docs/optimizing-performance.html#examples" target="_blank" rel="noopener">Optimizing Performance</a>学习如何构建<em>pure components</em></p><h4 id="功能组件（Functional-Components）"><a href="#功能组件（Functional-Components）" class="headerlink" title="功能组件（Functional Components）"></a>功能组件（Functional Components）</h4><p>我们现在让Square变成一个<strong>functional component</strong>.</p><p>在react中，<strong>功能组件（functional component）</strong>是一个写组件的简单方式，其中仅包含一个<code>render</code>方法，并且没有自己的state，代替定义一个继承自<code>React.Component</code>的类，我们可以写一个function，<code>props</code>作为参数，并且返回我们想要渲染的内容，比起组件类功能组件是单调的，许多简单的组件可以写成这样的形式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button className=<span class="string">"square"</span> onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">      &#123;props.value&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>我们将其中的两处<code>this.props</code>替换成<code>this.props</code></p><p><a href="[看此部分完整代码](https://codepen.io/gaearon/pen/QvvJOv?editors=0010">看此部分完整代码</a></p><blockquote><p><strong>Note</strong><br>当我们将Square修改成功能组件时，我们也将<code>onClick={() =&gt; this.props.onClick()}</code>变为<code>更简短的onClick={props.onClick}</code>（不要缺少两边的括号），在类中我们需要用箭头函数去使用正确的<code>this</code>的值，但是在功能组件中我们无需担心<code>this</code>。</p></blockquote><h4 id="轮流下棋"><a href="#轮流下棋" class="headerlink" title="轮流下棋"></a>轮流下棋</h4><p>我们现在需要去改善游戏中一个明显的bug：“O”不能在标记在棋盘中</p><p>我们将默认第一步下“X”，我们可以在Board组件中修改这个默认值:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">      xIsNext: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>每次一个玩家移动完，<code>xIsNext</code>(boolean)将被迅速取反曲决定下一步的玩家，并且游戏的state将被保存，我们修改Board的<code>handleClick</code>方法，加入<code>xIsNext</code>：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleClick(i) &#123;</span><br><span class="line">    <span class="keyword">const</span> squares = <span class="keyword">this</span>.state.squares.slice();</span><br><span class="line">    squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">'X'</span> : <span class="string">'O'</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      squares: squares,</span><br><span class="line">      xIsNext: !<span class="keyword">this</span>.state.xIsNext,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>通过这个改变，“X”和“O”可轮流切换，让我们也改变在棋盘状态文本<code>status</code>去展示下一步的玩家：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    const status &#x3D; &#39;Next player: &#39; + (this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &#x2F;&#x2F; the rest has not changed</span><br></pre></td></tr></table></figure><p>做了这个改变之后，你的棋盘组件应该是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Board extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      squares: Array(9).fill(null),</span><br><span class="line">      xIsNext: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    const squares &#x3D; this.state.squares.slice();</span><br><span class="line">    squares[i] &#x3D; this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      squares: squares,</span><br><span class="line">      xIsNext: !this.state.xIsNext,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Square</span><br><span class="line">        value&#x3D;&#123;this.state.squares[i]&#125;</span><br><span class="line">        onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick(i)&#125;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const status &#x3D; &#39;Next player: &#39; + (this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;status&quot;&gt;&#123;status&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;board-row&quot;&gt;</span><br><span class="line">          &#123;this.renderSquare(0)&#125;</span><br><span class="line">          &#123;this.renderSquare(1)&#125;</span><br><span class="line">          &#123;this.renderSquare(2)&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;board-row&quot;&gt;</span><br><span class="line">          &#123;this.renderSquare(3)&#125;</span><br><span class="line">          &#123;this.renderSquare(4)&#125;</span><br><span class="line">          &#123;this.renderSquare(5)&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div className&#x3D;&quot;board-row&quot;&gt;</span><br><span class="line">          &#123;this.renderSquare(6)&#125;</span><br><span class="line">          &#123;this.renderSquare(7)&#125;</span><br><span class="line">          &#123;this.renderSquare(8)&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="宣布赢家"><a href="#宣布赢家" class="headerlink" title="宣布赢家"></a>宣布赢家</h4><p>既然我们已经展示了下一步玩家是哪一位，我们也应当展示游戏何时分出胜负并且结束游戏，我们可以通过增加下面这个帮助函数放在文件尾部实现这个功:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function calculateWinner(squares) &#123;</span><br><span class="line">  const lines &#x3D; [</span><br><span class="line">    [0, 1, 2],</span><br><span class="line">    [3, 4, 5],</span><br><span class="line">    [6, 7, 8],</span><br><span class="line">    [0, 3, 6],</span><br><span class="line">    [1, 4, 7],</span><br><span class="line">    [2, 5, 8],</span><br><span class="line">    [0, 4, 8],</span><br><span class="line">    [2, 4, 6],</span><br><span class="line">  ];</span><br><span class="line">  for (let i &#x3D; 0; i &lt; lines.length; i++) &#123;</span><br><span class="line">    const [a, b, c] &#x3D; lines[i];</span><br><span class="line">    if (squares[a] &amp;&amp; squares[a] &#x3D;&#x3D;&#x3D; squares[b] &amp;&amp; squares[a] &#x3D;&#x3D;&#x3D; squares[c]) &#123;</span><br><span class="line">      return squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们将在Board的<code>render</code>中调用这个<code>calculateWinner(squares)</code>函数去何时游戏时候分出胜负，如果有玩家胜出了我们将展示出来，例如“Winner: X”，我们将在Board的<code>render</code>方法中替换<code>status</code>通过下面的代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    const winner &#x3D; calculateWinner(this.state.squares);</span><br><span class="line">    let status;</span><br><span class="line">    if (winner) &#123;</span><br><span class="line">      status &#x3D; &#39;Winner: &#39; + winner;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      status &#x3D; &#39;Next player: &#39; + (this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &#x2F;&#x2F; the rest has not changed</span><br></pre></td></tr></table></figure><p>我们现在可以修改Board的<code>handleClick</code>函数，如果有玩家赢了游戏，去提前return去不响应点击事件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handleClick(i) &#123;</span><br><span class="line">    const squares &#x3D; this.state.squares.slice();</span><br><span class="line">    if (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    squares[i] &#x3D; this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      squares: squares,</span><br><span class="line">      xIsNext: !this.state.xIsNext,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>[看此部分完整代码]<a href="https://codepen.io/gaearon/pen/LyyXgK?editors=0010" target="_blank" rel="noopener">看此部分完整代码</a></p><p>祝贺你！你现在已经差不多完成了这个游戏了，并且你也已经学习到了react的基础知识，到这里，你可能已经是一个真正的赢家了！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学 </tag>
            
            <tag> react </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台方案：将ReactNative集成到现有原生应用(Android)</title>
      <link href="/2018/08/15/integration-with-existing-apps/"/>
      <url>/2018/08/15/integration-with-existing-apps/</url>
      
        <content type="html"><![CDATA[<p>如果你正准备从头开始制作一个新的应用，那么 React Native 会是个非常好的选择。但如果你只想给现有的原生应用中添加一两个视图或是业务流程，React Native 也同样不在话下。只需简单几步，你就可以给原有应用加上新的基于 React Native 的特性、画面和视图等。</p><p>具体的步骤根据你所开发的目标平台不同而不同。</p><a id="more"></a><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>把 React Native 组件集成到 Android 应用中有如下几个主要步骤：</p><ol><li>配置好 React Native 依赖和项目结构。</li><li>创建 js 文件，编写 React Native 组件的 js 代码。</li><li>在应用中添加一个<code>RCTRootView</code>。这个<code>RCTRootView</code>正是用来承载你的 React Native 组件的容器。</li><li>启动 React Native 的 Packager 服务，运行应用。</li><li>验证这部分组件是否正常工作。</li></ol><h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2><p>首先按照<a href="getting-started.md">开发环境搭建教程</a>来安装 React Native 在 Android 平台上所需的一切依赖软件。</p><h3 id="1-配置项目目录结构"><a href="#1-配置项目目录结构" class="headerlink" title="1. 配置项目目录结构"></a>1. 配置项目目录结构</h3><p>首先创建一个空目录用于存放 React Native 项目，然后在其中创建一个<code>/android</code>子目录，把你现有的 Android 项目拷贝到<code>/android</code>子目录中。</p><h3 id="2-安装-JavaScript-依赖包"><a href="#2-安装-JavaScript-依赖包" class="headerlink" title="2. 安装 JavaScript 依赖包"></a>2. 安装 JavaScript 依赖包</h3><p>在项目根目录下创建一个名为<code>package.json</code>的空文本文件，然后填入以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;MyReactNativeApp&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node node_modules&#x2F;react-native&#x2F;local-cli&#x2F;cli.js start&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例中的<code>version</code>字段没有太大意义（除非你要把你的项目发布到 npm 仓库）。<code>scripts</code>中是用于启动 packager 服务的命令。</p></blockquote><p>接下来我们使用 yarn 或 npm（两者都是 node 的包管理器）来安装 React 和 React Native 模块。请打开一个终端/命令提示行，进入到项目目录中（即包含有 package.json 文件的目录），然后运行下列命令来安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save react-native</span><br></pre></td></tr></table></figure></p><p>这样默认会安装最新版本的 React Native，同时会打印出类似下面的警告信息（你可能需要滚动屏幕才能注意到）：</p><blockquote><p>warning “react-native@0.52.2” has unmet peer dependency “react@16.2.0”.</p></blockquote><p>这是正常现象，意味着我们还需要安装指定版本的 React：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add react@16.2.0</span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save react</span><br></pre></td></tr></table></figure><br>注意必须严格匹配警告信息中所列出的版本，高了或者低了都不可以。</p><blockquote><p>如果你使用多个第三方依赖，可能这些第三方各自要求的 react 版本有所冲突，此时应优先满足<code>react-native</code>所需要的<code>react</code>版本。其他第三方能用则用，不能用则只能考虑选择其他库。</p></blockquote><p>所有 JavaScript 依赖模块都会被安装到项目根目录下的<code>node_modules/</code>目录中（这个目录我们原则上不复制、不移动、不修改、不上传，随用随装）。</p><p>把<code>node_modules/</code>目录记录到<code>.gitignore</code>文件中（即不上传到版本控制系统，只保留在本地）。</p><h2 id="把-React-Native-添加到你的应用中"><a href="#把-React-Native-添加到你的应用中" class="headerlink" title="把 React Native 添加到你的应用中"></a>把 React Native 添加到你的应用中</h2><h3 id="配置-maven"><a href="#配置-maven" class="headerlink" title="配置 maven"></a>配置 maven</h3><p>在你的 app 中 <code>build.gradle</code> 文件中添加 React Native 依赖:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;</span><br><span class="line">    ...</span><br><span class="line">    compile &quot;com.facebook.react:react-native:+&quot; &#x2F;&#x2F; From node_modules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果想要指定特定的 React Native 版本，可以用具体的版本号替换 <code>+</code>，当然前提是你从 npm 里下载的是这个版本。</p></blockquote><p>在项目的 <code>build.gradle</code> 文件中为 React Native 添加一个 maven 依赖的入口，必须写在 “allprojects” 代码块中:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            &#x2F;&#x2F; All of React Native (JS, Android binaries) is installed from npm</span><br><span class="line">            url &quot;$rootDir&#x2F;..&#x2F;node_modules&#x2F;react-native&#x2F;android&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>确保依赖路径的正确！以免在 Android Studio 运行 Gradle 同步构建时抛出 “Failed to resolve: com.facebook.react:react-native:0.x.x” 异常。</p></blockquote><h3 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h3><p>接着，在 <code>AndroidManifest.xml</code> 清单文件中声明网络权限:</p><pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></pre><p>如果需要访问 <code>DevSettingsActivity</code> 界面（即开发者菜单），则还需要在 <code>AndroidManifest.xml</code> 中声明:</p><pre><code>&lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;</code></pre><p>开发者菜单一般仅用于在开发时从 Packager 服务器刷新 JavaScript 代码，所以在正式发布时你可以去掉这一权限。</p><h3 id="代码集成"><a href="#代码集成" class="headerlink" title="代码集成"></a>代码集成</h3><p>Now we will actually modify the native Android application to integrate React Native.</p><h4 id="React-Native-组件"><a href="#React-Native-组件" class="headerlink" title="React Native 组件"></a>React Native 组件</h4><p>我们首先要写的是”High Score”（得分排行榜）的 JavaScript 端的代码。</p><h5 id="1-创建一个index-js文件"><a href="#1-创建一个index-js文件" class="headerlink" title="1. 创建一个index.js文件"></a>1. 创建一个<code>index.js</code>文件</h5><p>首先在项目根目录中创建一个空的<code>index.js</code>文件。(注意在 0.49 版本之前是 index.android.js 文件)</p><p><code>index.js</code>是 React Native 应用在 Android 上的入口文件。而且它是不可或缺的！它可以是个很简单的文件，简单到可以只包含一行<code>require/import</code>导入语句。本教程中为了简单示范，把全部的代码都写到了<code>index.js</code>里（当然实际开发中我们并不推荐这样做）。</p><h5 id="2-添加你自己的-React-Native-代码"><a href="#2-添加你自己的-React-Native-代码" class="headerlink" title="2. 添加你自己的 React Native 代码"></a>2. 添加你自己的 React Native 代码</h5><p>在<code>index.js</code>中添加你自己的组件。这里我们只是简单的添加一个<code>&lt;Text&gt;</code>组件，然后用一个带有样式的<code>&lt;View&gt;</code>组件把它包起来。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.hello&#125;&gt;Hello, World&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">"center"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hello: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    textAlign: <span class="string">"center"</span>,</span><br><span class="line">    margin: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">"MyReactNativeApp"</span>, () =&gt; HelloWorld);</span><br></pre></td></tr></table></figure><h5 id="3-配置权限以便开发中的红屏错误能正确显示"><a href="#3-配置权限以便开发中的红屏错误能正确显示" class="headerlink" title="3. 配置权限以便开发中的红屏错误能正确显示"></a>3. 配置权限以便开发中的红屏错误能正确显示</h5><p>如果你的应用会运行在 Android 6.0（API level 23）或更高版本，请确保你在开发版本中有打开<code>悬浮窗(overlay)</code>权限。你可以在代码中使用<code>Settings.canDrawOverlays(this);</code>来检查。之所以需要这一权限，是因为我们会把开发中的报错显示在悬浮窗中（仅在开发阶段需要）。在 Android 6.0（API level 23）中用户需要手动同意授权。具体请求授权的做法是在<code>onCreate()</code>中添加如下代码。其中<code>OVERLAY_PERMISSION_REQ_CODE</code>是用于回传授权结果的字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERLAY_PERMISSION_REQ_CODE = <span class="number">1</span>;  <span class="comment">// 任写一个值</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</span><br><span class="line">                                   Uri.parse(<span class="string">"package:"</span> + getPackageName()));</span><br><span class="line">        startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, the <code>onActivityResult()</code> method (as shown in the code below) has to be overridden to handle the permission Accepted or Denied cases for consistent UX.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == OVERLAY_PERMISSION_REQ_CODE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                <span class="comment">// SYSTEM_ALERT_WINDOW permission not granted</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="掌握核心科技：ReactRootView"><a href="#掌握核心科技：ReactRootView" class="headerlink" title="掌握核心科技：ReactRootView"></a>掌握核心科技：<code>ReactRootView</code></h4><p>我们还需要添加一些原生代码来启动 React Native 的运行时环境并让它开始渲染。首先需要在一个<code>Activity</code>中创建一个<code>ReactRootView</code>对象，然后在这个对象之中启动 React Native 应用，并将它设为界面的主视图。</p><blockquote><p>如果你想在安卓 5.0 以下的系统上运行，请用 <code>com.android.support:appcompat</code> 包中的 <code>AppCompatActivity</code> 代替 <code>Activity</code> 。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</span><br><span class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(<span class="keyword">this</span>);</span><br><span class="line">        mReactInstanceManager = ReactInstanceManager.builder()</span><br><span class="line">                .setApplication(getApplication())</span><br><span class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</span><br><span class="line">                .setJSMainModulePath(<span class="string">"index"</span>)</span><br><span class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</span><br><span class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</span><br><span class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 注意这里的MyReactNativeApp必须对应“index.js”中的</span></span><br><span class="line">        <span class="comment">// “AppRegistry.registerComponent()”的第一个参数</span></span><br><span class="line">        mReactRootView.startReactApplication(mReactInstanceManager, <span class="string">"MyReactNativeApp"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        setContentView(mReactRootView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>If you are using a starter kit for React Native, replace the “HelloWorld” string with the one in your index.js file (it’s the first argument to the <code>AppRegistry.registerComponent()</code> method).</p></blockquote><p>如果你使用的是 Android Studio , 可以使用<code>Alt + Enter</code>快捷键来自动为 MyReactActivity 类补上缺失的 import 语句。注意<code>BuildConfig</code>应该是在你自己的包中自动生成，无需额外引入。千万不要从<code>com.facebook...</code>的包中引入！</p><p>我们需要把 <code>MyReactActivity</code> 的主题设定为 <code>Theme.AppCompat.Light.NoActionBar</code> ，因为里面有许多组件都使用了这一主题。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">".MyReactActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一个<code>ReactInstanceManager</code>可以在多个 activities 或 fragments 间共享。 You will want to make your own <code>ReactFragment</code> or <code>ReactActivity</code> and have a singleton _holder_ that holds a <code>ReactInstanceManager</code>. When you need the <code>ReactInstanceManager</code> (e.g., to hook up the <code>ReactInstanceManager</code> to the lifecycle of those Activities or Fragments) use the one provided by the singleton.</p></blockquote><p>下一步我们需要把一些 activity 的生命周期回调传递给<code>ReactInstanceManager</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.onHostDestroy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactRootView.unmountReactApplication();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还需要把后退按钮事件传递给 React Native：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.onBackPressed();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This allows JavaScript to control what happens when the user presses the hardware back button (e.g. to implement navigation). When JavaScript doesn’t handle the back button press, your <code>invokeDefaultOnBackPressed</code> method will be called. By default this simply finishes your <code>Activity</code>.</p><p>Finally, we need to hook up the dev menu. By default, this is activated by (rage) shaking the device, but this is not very useful in emulators. So we make it show when you press the hardware menu button (use <code>Ctrl + M</code> if you’re using Android Studio emulator):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_MENU &amp;&amp; mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.showDevOptionsDialog();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 activity 已就绪，可以运行一些 JavaScript 代码了。</p><h3 id="测试集成结果"><a href="#测试集成结果" class="headerlink" title="测试集成结果"></a>测试集成结果</h3><p>You have now done all the basic steps to integrate React Native with your current application. Now we will start the React Native packager to build the <code>index.bundle</code> package and the server running on localhost to serve it.</p><h5 id="1-运行-Packager"><a href="#1-运行-Packager" class="headerlink" title="1. 运行 Packager"></a>1. 运行 Packager</h5><p>运行应用首先需要启动开发服务器（Packager）。你只需在项目根目录中执行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h5 id="2-运行你的应用"><a href="#2-运行你的应用" class="headerlink" title="2. 运行你的应用"></a>2. 运行你的应用</h5><p>保持 packager 的窗口运行不要关闭，然后像往常一样编译运行你的 Android 应用(在命令行中执行<code>./gradlew installDebug</code>或是在 Android Studio 中编译运行)。</p><p>编译执行一切顺利进行之后，在进入到 MyReactActivity 时应该就能立刻从 packager 中读取 JavaScript 代码并执行和显示：</p><p><img src="/images/EmbeddedAppAndroid.png" alt="Screenshot"></p><h2 id="在-Android-Studio-中打包"><a href="#在-Android-Studio-中打包" class="headerlink" title="在 Android Studio 中打包"></a>在 Android Studio 中打包</h2><p>你也可以使用 Android Studio 来打 release 包！其步骤基本和原生应用一样，只是在每次编译打包之前需要先执行 js 文件的打包(即生成离线的 jsbundle 文件)。具体的 js 打包命令如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ react-native bundle --platform android --dev false --entry-file index.js --bundle-output android&#x2F;com&#x2F;your-company-name&#x2F;app-package-name&#x2F;src&#x2F;main&#x2F;assets&#x2F;index.android.bundle --assets-dest android&#x2F;com&#x2F;your-company-name&#x2F;app-package-name&#x2F;src&#x2F;main&#x2F;res&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>注意把上述命令中的路径替换为你实际项目的路径。如果 assets 目录不存在，则需要提前自己创建一个。</p></blockquote><p>然后在 Android Studio 中正常生成 release 版本即可！</p><h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><p>就是一进入ReactNative的Activity就闪退到前面的页面，后查看log发现<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: couldn&#39;t find DSO to load: libreactnativejni</span><br></pre></td></tr></table></figure></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在两处添加配置：<br>app#build.gradle</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"> &#x2F;&#x2F;...</span><br><span class="line"> ndk &#123;</span><br><span class="line">     abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 混合开发 </tag>
            
            <tag> reactnative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《第一行代码》</title>
      <link href="/2018/08/14/0/"/>
      <url>/2018/08/14/0/</url>
      
        <content type="html"><![CDATA[<h2 id="读书感受"><a href="#读书感受" class="headerlink" title="读书感受"></a>读书感受</h2><p>本着查漏补缺的态度，刚来学校随手拿到一本书看了起来，就这么一下子看完了，有一个感觉，技术之类的书还要是有点基础看的，不仅效率高而且获益确实不少。</p><a id="more"></a><p>也没有都看，前面已经接触太多的东西就没去看了，大概以后还会当工具书来翻一翻，主要是从我之前没接触的广播看起，看着看着发现之前不会的东西居然掌握了，着实让我倍感自信，有了继续看的动力，加上手头正在做一个自己感觉还算比较满意的项目，一下子感觉自己离大神的距离又近了一点（😆）。我是真的极其讨厌“大神”这个词，第一个原因是看过太多所谓的大神其实只是貌似或者说是被别人吹出来的，再说这个领域本来就没有多少真正大神，我暂时是这么想的，可能因为我的眼界还太窄，你不可能什么都会，就算你会的很多你也应该谦虚一点，所以我要谦虚一点😀。</p><p>用我前阵子非常喜欢说的话，就是学习编程跟学习英语其实没什么两样，你学了你就会了，你看过一样东西并且去练习了你自然也就会了，没什么天赋之类的（这也是我暂时的想法），只有你有没有兴趣这种说法！</p><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="广播（Broadcast）"><a href="#广播（Broadcast）" class="headerlink" title="广播（Broadcast）"></a>广播（Broadcast）</h3><h4 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h4><ul><li><p>标准广播</p><p>完全异步，几乎所有接收者同时接收到广播。</p></li><li><p>有序广播</p><p>广播接收器有先后顺序，优先级别高的先收到，执行完毕后继续传递。</p></li></ul><h4 id="接收广播（BroadReceiver）"><a href="#接收广播（BroadReceiver）" class="headerlink" title="接收广播（BroadReceiver）"></a>接收广播（BroadReceiver）</h4><p>看前面两小节，通俗的理解广播就是监听了某某事件（比如网络是否连接），当某某事件发生时，广播执行相应操作。</p><p>广播注册：</p><ul><li><p>在代码中注册（也称动态注册）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</span><br><span class="line">networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</span><br><span class="line">registerReceiver(networkChangeReceiver, intentFilter); <span class="comment">//注册网络变化</span></span><br></pre></td></tr></table></figure></li><li><p>在 AndroidManifest.xml 文件中注册（静态注册）</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span> /&gt;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">&lt;receiver</span><br><span class="line">    android:name=<span class="string">".BootCompleteReceiver"</span></span><br><span class="line">    android:enabled=<span class="string">"true"</span></span><br><span class="line">    android:exported=<span class="string">"true"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;<span class="comment">//开机启动广播</span></span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure></li></ul><p>创建广播接受器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">       ConnectivityManager connectionManager = (ConnectivityManager)</span><br><span class="line">               getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">       NetworkInfo networkInfo = connectionManager.getActiveNetworkInfo();</span><br><span class="line">       <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable()) &#123;</span><br><span class="line">           Toast.makeText(context, <span class="string">"network is available"</span>,</span><br><span class="line">                   Toast.LENGTH_SHORT).show();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Toast.makeText(context, <span class="string">"network is unavailable"</span>,</span><br><span class="line">                   Toast.LENGTH_SHORT).show();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消注册：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">unregisterReceiver(networkChangeReceiver);</span><br><span class="line">    localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h4><p>方法类似于打开另一个<code>Activity</code>，用的是<code>intent</code>实例化的时候将自定义的广播传入参数，然后调用<code>sendBroadcast</code>方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button = (Button) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</span><br><span class="line">        localBroadcastManager.sendBroadcast(intent); <span class="comment">// 发送本地广播</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其他的就是广播可以跨应用程序传播（当然，有时为了安全可以使用本地广播）。</p><h4 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h4><p>有序广播可以设置优先权选择那个接收者先执行。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span> // 1</span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>截断传递（即不允许广播再传递）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">"received in MyBroadcastReceiver"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    abortBroadcast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h4><p>与动态注册广播相似，只不过注册广播时使用<code>localBroadcastManager</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"><span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>); <span class="comment">// 获取实例</span></span><br><span class="line">    Button button = (Button) findViewById(R.id.button);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</span><br><span class="line">            localBroadcastManager.sendBroadcast(intent); <span class="comment">// 发送本地广播</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    intentFilter.addAction(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</span><br><span class="line">    localReceiver = <span class="keyword">new</span> LocalReceiver();</span><br><span class="line">    localBroadcastManager.registerReceiver(localReceiver, intentFilter); <span class="comment">// 注册本地广播监听器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我做第一个Android项目的过程！</title>
      <link href="/2018/03/25/d89c/"/>
      <url>/2018/03/25/d89c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
